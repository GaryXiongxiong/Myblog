<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>蒋亦雄的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jiangyixiong.top/"/>
  <updated>2021-05-25T09:10:34.170Z</updated>
  <id>http://jiangyixiong.top/</id>
  
  <author>
    <name>Yixiong Jiang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>时间的往事——记一次与夏令时的斗智斗勇</title>
    <link href="http://jiangyixiong.top/2021/05/25/%E6%97%B6%E9%97%B4%E7%9A%84%E5%BE%80%E4%BA%8B%E2%80%94%E2%80%94%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%B8%8E%E5%A4%8F%E4%BB%A4%E6%97%B6%E7%9A%84%E6%96%97%E6%99%BA%E6%96%97%E5%8B%87/"/>
    <id>http://jiangyixiong.top/2021/05/25/%E6%97%B6%E9%97%B4%E7%9A%84%E5%BE%80%E4%BA%8B%E2%80%94%E2%80%94%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%B8%8E%E5%A4%8F%E4%BB%A4%E6%97%B6%E7%9A%84%E6%96%97%E6%99%BA%E6%96%97%E5%8B%87/</id>
    <published>2021-05-25T16:59:47.000Z</published>
    <updated>2021-05-25T09:10:34.170Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="时间往事"><a href="#时间往事" class="headerlink" title="时间往事"></a>时间往事</h1><p><img src="/images/dst-1.png" alt="title"></p><h2 id="1784"><a href="#1784" class="headerlink" title="1784"></a>1784</h2><blockquote><p>首先，对每扇装有百叶窗以遮挡阳光的窗户征收一路易（法国货币）的税。<br>第二……在蜡商店里安排守卫，不允许任何家庭每周获得超过一磅的蜡烛供应。<br>第三，还应派人看守，阻止所有在日落后经过街道的马车，但医生、外科医生和助产士的马车除外。<br>第四，改变人们的时间，每天早晨，太阳一升起，就让每个教堂的所有钟声响起；如果这还不够？让大炮在每条街道上响起，以有效地唤醒那些迟钝的人，使他们睁开眼睛，看到他们的真正利益。<br>—— 本杰明·富兰克林 巴黎日报 1784年4月26日</p></blockquote><p>富兰克林看着巴黎日报上头版刊登的自己的文章，沉浸在自己辛辣的幽默感中不自觉地发出阵阵冷笑。殊不知随着这篇文章，一枚种子已经种入了人类的共同意识中——操纵时间。</p><h2 id="1895"><a href="#1895" class="headerlink" title="1895"></a>1895</h2><p>比起富兰克林的调侃与嘲讽，乔治·哈德森是认真的。</p><p>乔治·哈德森是一位热爱收集昆虫的昆虫学家，但他在新西兰惠灵顿邮局的工作迫使他只能在下班时间进行收集昆虫的作业。因此，下班后短暂的太阳光成为了他最珍视的东西，“要是工作时间可以根据日光调整，让我有更多的时间来收集昆虫，那就再好不过了”。在寻求变更工作时间未果后，哈德森有了一个大胆的想法。</p><p>1895年，一篇论文被送到了惠灵顿哲学学会，并激起基督城（新西兰南岛最大城市）政府的极大兴趣，这篇论文提议在每年的夏天，将时钟向前拨动两个小时，以最大重合人们的活动时间与日照时间。而这篇文章的署名正是乔治·哈德森。</p><h2 id="1916"><a href="#1916" class="headerlink" title="1916"></a>1916</h2><p>在第一次世界大战中，为了节省宝贵的战时能源。德意志帝国与其盟友奥匈帝国在1916年4月30日凌晨，将其时钟向后拨动了一小时，成为了最早的两个在全国范围采用夏令时制的国家。而站在他们对立面的英联邦与许多欧洲中立国很快就跟进了。俄罗斯和其他一些国家则等到了第二年。而美国在1918年采用了夏令时。虽然之后大多数国家在战争结束后的几年里放弃了夏令时，但随着时间来到爆发能源危机的70年代，夏令时再一次开始变得普遍，并一直维持至今。</p><h2 id="2021"><a href="#2021" class="headerlink" title="2021"></a>2021</h2><p>2021年4月4日，澳洲东部时间凌晨2点59分59秒，一秒钟后，当地的所有时钟将会向前移动一个小时，回到2点整，一如往年。</p><p>于此同时，一名base在中国西安的程序猿正在家中安然沉睡。</p><p>第二天，他所在澳洲某项目组发现，部署在AWS悉尼的E2E test产生了大量报错。其中共同点，是这些错误全部与时间计算有关。经过一系列的Debug，他们定位到了正在使用中，名为Day.js的Datetime Utils ，这个已经稳定使用半载的dependency在一夜之间出现了行为异常。</p><p>就在这个程序猿和他所在的团队焦头烂额百思不得其解时，本杰明·富兰克林的冷笑仿佛引力波一般穿越百年的时光，来到了他们耳畔。</p><h1 id="记一次与时间的斗智斗勇"><a href="#记一次与时间的斗智斗勇" class="headerlink" title="记一次与时间的斗智斗勇"></a>记一次与时间的斗智斗勇</h1><h2 id="事件回顾"><a href="#事件回顾" class="headerlink" title="事件回顾"></a>事件回顾</h2><p>好了我不装了我摊牌了，我说的这个程序猿就是我自己。</p><p>在前一段时间，我们项目组遇到了由于DST（即上文提到的Daylight saving time，又称日光节约时间，或夏令时）产生的时间计算问题。</p><p>这次事件的起因是，我们项目中用到的Day.js时间计算工具，在系统时间是AEDT（澳洲东部夏令时）时表现正常，但当系统时间变为AEST（澳洲东部标准时）时，他的时间计算功能就会出现异常。同时，我们集成的系统严格要求我们传输的时间为ISO格式的当地时间，这也对我们时区转换的准确性提出了更高的要求。为了解决这个问题，我们决定替换Day.js，并集中封装出一个Datetime utils来统一处理时间计算。这个Datetime utils在我们的开发过程中前前后后换过数个时间计算库，但他们的表现都不算完美。为了解决这些问题我们调研了TypeScript生态下常用的时间计算库，并趟过了不少坑，所以借这篇文章分享下我们学到的一些时间表示与夏令时相关知识，希望能对大家有所帮助。</p><h2 id="时间的表示"><a href="#时间的表示" class="headerlink" title="时间的表示"></a>时间的表示</h2><p>早在计算机出现很久以前，人类就有了一套通用且完善的描述时间的方法。</p><p><img src="/images/dst-2.png" alt="title"></p><p>这是我们随处可见的一篇新闻稿，其中的时间表示如下：</p><blockquote><p>2021年5月11日 （星期二）上午10时</p></blockquote><p>配合着新闻的地区信息，我们便得到了一个精准的时间点：</p><blockquote><p>2021年5月11日 10点0分0秒 北京时间</p></blockquote><p>之后，我们可以让这个时间点的表示更为国际化：</p><blockquote><p>2021-05-11 10:00:00 GMT +08:00 （国际化表示）<br>⬇️<br>2021-05-11T10:00:00.000+08:00:00 （ISO格式表示）<br>⬇️<br>2021-05-11T02:00:00.000Z （转换为UTC时间并以ISO格式表示）</p></blockquote><p>为了让时间点可以在计算机中完美的表示，我们计算出当前时间距离世界标准时的1970年1月1日0点0分0秒的毫秒数进行存储，这个数值被称为时间戳。这个时间戳由计算机根据机器的时间表示，时区等设置进行解析。</p><blockquote><p>1620698400000</p></blockquote><h2 id="GMT与UTC"><a href="#GMT与UTC" class="headerlink" title="GMT与UTC"></a>GMT与UTC</h2><p>在时间的表示一节中，我们见识到了两个‘黑话’：GMT和UTC，两个词其实指向的是两个不同的概念，只是由于具体含义十分相近以至于在很多地方都是混用的，用以表示世界标准时间，即+0区的时间。</p><p>GMT为Greenwich Mean Time的缩写，意为格林威治观测时间。是坐落在0经度线上的英国格林威治天文台观测并发布的当地时间。从1925年至1972年，他都被用作世界标准时间。</p><p>UTC的概念则是建立于1972年，以弥补地球自转速度减慢的问题。这个时间系统以国际原子时为基础，使用铯的原子频率来设定时间标准。换句话说，UTC是GMT的更精确的替代系统。</p><blockquote><p>UTC名字的来源是在建立这套计时系统时，英语国家们希望将其命名为CUT (Coordinated Universal Time)，而法语国家则希望将其命名为TUC (Temps Universal Coordonn)。最终各退一步，取了个没有实际含义的名字：UTC。</p></blockquote><h2 id="Offset与Timezone"><a href="#Offset与Timezone" class="headerlink" title="Offset与Timezone"></a>Offset与Timezone</h2><p>说完了时间表示中提到的GMT与UTC，下来说一说时间表示中最后的一部分：+08:00:00</p><p>这个部分被称为offset，意指为当地时间相较于UTC的偏移量。+08:00:00的具体含义就是，比UTC时间快8个小时。基于当地时间与当地的offset，我们可以轻松的计算出当时的UTC时间：</p><p>$$local_time - offset = UTC_time$$</p><p>需要注意的是,offset ≠ timezone，我们所说的东八区，西一区等这些概念指的并不是timezone（时区），而是一组offset为+08:00:00的时区的集合。一个🌰见下图：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">东八区 = &#123;CST（中国标准时）,SGT（新加坡时间）,AWST（澳洲西部标准时）... &#125;</span><br></pre></td></tr></table></figure><p>截至目前，一切看起来还不算复杂，offset是timezone的一个属性，一个offset可以对应多个timezone。但当DST出现后，事情坏了起来。</p><h2 id="DST"><a href="#DST" class="headerlink" title="DST"></a>DST</h2><p>DST (Daylight saving time)，日光节约时，夏令时/冬令时，这个奇怪的小精灵有着多个名字。它会在每年春天的某一天将时钟向后拨一小时，又在秋天的某一天将时钟向前拨动一个小时。</p><p>因为DST，一个timezone开始在不同的时间段对应不同的offset。我们的鬼故事就此展开：</p><ul><li>在悉尼，2021年4月4日凌晨2点59分59秒后，时针会回滚并再次指向2点</li><li>之后，在2021年10月3日凌晨1点59分59秒后，时针会跳过2点直接指向3点，随之而来的是⬇️</li><li>悉尼人会经历两次2021年4月4日凌晨2点到3点！！</li><li>2021年10月3日凌晨2点到3点在悉尼不存在！！</li><li>这种事情每年都会发生！！</li></ul><p>那。。。能不能再恐怖点？</p><ul><li><strong>每年切换DST和ST的时间都会变！！！</strong></li></ul><p>是的，每年应用DST的时间段是不固定的，各个国家可以根据近年日照情况灵活调整。我们可以在IANA的网站上查询到各国的夏令时数据库。这个数据库每年都会根据各国官方组织提供的数据更新。我们从中摘录出2021-01-24版本中悉尼时间的部分作展示：</p><p><img src="/images/dst-3.png" alt="title"></p><p>可以看到在2008年之前，澳洲东部的夏令时的时间每隔3、5年都会变化一次，好在2008年之后暂时固定了下来，在每年十月的第一个周日切换至夏令时，在每年四月的第一个周日切回冬令时。</p><p>这种不规律的变化会怎么影响我们日期的计算？我们继续向下看。</p><h2 id="TypeScript生态下如何处理时间"><a href="#TypeScript生态下如何处理时间" class="headerlink" title="TypeScript生态下如何处理时间"></a>TypeScript生态下如何处理时间</h2><p>面对时间的计算，我们通常会采用下列表格中的工具/库，但经过这段时间的调研，我们发现他们都不完美，在此简要的列举下我们的一些发现：</p><ul><li>Date：最基础的日期工具<ul><li>JS原生类型</li><li>提供一些十分基础的方法，无法应对日期计算等工作</li></ul></li><li>Moment.js：后端项目首选，如果需要计算1970前、2039后的夏令时时间，记得手动计算并添加夏令时数据<ul><li>老牌日期工具库，功能完善API友好</li><li>提供完善的单元测试以保证计算正确性</li><li>时区数据全，但仅覆盖了1970-2039年，超出部分需自行生成数据填充</li><li>自动解析字符串能力较弱，需要解析时手动提供格式</li><li>数据包较大，完整版不适合前端工程使用</li><li>目前该项目不再更新Feature，仅做维护</li></ul></li><li>Day.js：<del>东北半球最好的时间工具，</del>如果你不需要跨时区/夏令时的计算，并且确认你的项目不会跑在系统时区有夏令时设置的环境中，选它基本没问题<ul><li>比较受欢迎的日期工具库，提供类Moment.js的API</li><li>相较于Moment.js，提供immutable的实例对象</li><li>在系统时区有夏令时时，会有几率产生日期计算bug</li><li>在系统时区有夏令时时，时区转换会计算错误</li></ul></li><li>Spacetime：轻量级时间工具，bug不少，未来可期<ul><li>优秀的自动字符串解析能力</li><li>较为准确的跨时区/夏令时转换与计算</li><li>夏令时数据不够严谨（例如悉尼时区，写死了每年4月3日和10月3日切换夏令时）</li><li>部分可work around的小问题</li></ul></li><li>其他可供选择的日期工具<ul><li>fns-date</li><li>Luxon</li></ul></li></ul><h2 id="一个Datetime-Utils面对的挑战"><a href="#一个Datetime-Utils面对的挑战" class="headerlink" title="一个Datetime Utils面对的挑战"></a>一个Datetime Utils面对的挑战</h2><p>看了看这些库，是不是觉得TypeScript生态弱爆了，一个能打的时间工具都没有？其实这真不怪TypeScript生态不好，更不是这些时间工具的开发者水平不行。而是开发一个全世界世界各个时区都能放心使用，并保证计算准确性的Datetime Utils真的太难了！有多难？不如用我们的人类大脑来试试计算下面这些问题<del>，需要正确答案可以联系我</del>：</p><ul><li>02/01/2021 表示几月几日？</li><li>现在是悉尼1999年10月30日下午6点，12个小时以后是什么时间？</li><li>悉尼2051年4月2日是夏令时（AEDT）还是冬令时（AEST）？</li><li>悉尼2021年4月3日凌晨2点30分对应UTC时间是什么？</li><li>当我们谈论加一年时，具体指加多少天？2020年2月29日加上一年是2021年几月几日？加一年是加多少天？</li><li>当我问谈论加一月时，具体指加多少天？1月31日加上一个月之后是几月几日？加一个月是多少天？</li><li>1月31日到2月15日隔了多少个月？可以用小数表示吗？</li></ul><p>这些tricky的问题不是我故意想来为难各位，而是真的在我们的项目中遇到甚至因为计算问题引发了bug。这些问题目前都已经覆盖在了单元测试中。</p><p>汇总下这些问题，我们可以知道，一个Datetime Utils，会遇到如下这些挑战：</p><p><img src="/images/dst-4.png" alt="title"></p><p>在我们封装自用的Datetime utils的过程中，也总结出了一些观点：</p><ul><li>针对使用场景选择合适的三方库。没有最好的工具，只有最适合的工具。</li><li>在应用中集中封装管理时间计算逻辑。对于同一个项目，一定要对时间的计算逻辑有一个团队共识。并将这些共识统一实现并封装在一处，以保证项目的行为一致性。</li><li>大量覆盖单元测试（较难实践，例如moment.js提供了160531个test case）。</li><li>采用时间戳/UTC ISO传输时间，这种格式的时间各类计算工具/库解析的逻辑基本都是一致的，不会产生歧义。</li><li>服务端计算，这属于本人的一点拙见。对于时间这类标准存在变化且时效性较强的计算，个人认为十分适合放在由权威机构提供的服务端进行，类似于现在的授时服务。</li></ul><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这是我第一次写这类博客，对于相关知识也全靠这段时间的恶补，如果错误还请斧正。这篇博客与其说是分享不如说是对夏令时制度的吐槽。在我看来夏令时这种比较无规律的修改“全局变量”的行为是比较容易产生问题的。2007年的美国就因更新了DST规则而导致大量软件出现问题。</p><blockquote><p>Changes to DST rules cause problems in existing computer installations. For example, the 2007 change to DST rules in North America required that many computer systems be upgraded, with the greatest impact on e-mail and calendar programs. The upgrades required a significant effort by corporate information technologists.</p></blockquote><p>为了达到节能的效果与其调整时钟，不如直接调整上班时间来的实在且可行。就像我们上学时的冬季作息和夏季作息一样（笑）。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://toastui.medium.com/handling-time-zone-in-javascript-547e67aa842d">Handling Time Zone in JavaScript</a></p><p><a href="https://paperspast.natlib.govt.nz/periodicals/TPRSNZ1895-28.2.7.1.5">On Seasonal Time-adjustment in Countries South of Lat. 30°</a></p><p><a href="https://www.pluralsight.com/courses/date-time-fundamentals">Pluralsight : Date and Time Fundamentals</a></p><p><a href="https://en.wikipedia.org/wiki/Time_zone">Wikipedia : timezone</a></p><p><a href="https://en.wikipedia.org/wiki/Daylight_saving_time">Wikipedia : DST</a></p><p><a href="https://en.wikipedia.org/wiki/Unix_time">Wikipedia : Unix Time</a></p><p><a href="https://en.wikipedia.org/wiki/ISO_8601">Wikipedia : ISO-8601</a></p><p><a href="https://www.iana.org/time-zones">IANA timezone Database</a></p><p><a href="https://blogs.technet.microsoft.com/dst2007">Microsoft Daylight Saving Time &amp; Time Zone Blog</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date">MDN : Date API</a></p><p><a href="https://momentjs.com/timezone/">Moment Timezone</a></p><p><a href="https://tools.ietf.org/html/rfc1123">RFC-1123</a></p><p><a href="https://tools.ietf.org/html/rfc2822">RFC2888</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h1 id=&quot;时间往事&quot;&gt;&lt;a href=&quot;#时间往事&quot; class=&quot;headerlink&quot; title=&quot;时间往事&quot;&gt;&lt;/a&gt;时间往事&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/dst-1.png&quot; alt=&quot;title&quot;&gt;&lt;/
      
    
    </summary>
    
    
      <category term="blog" scheme="http://jiangyixiong.top/categories/blog/"/>
    
    
      <category term="Typescript" scheme="http://jiangyixiong.top/tags/Typescript/"/>
    
      <category term="DST" scheme="http://jiangyixiong.top/tags/DST/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode笔记 用动态规划解决【120 三角形最小路径和】</title>
    <link href="http://jiangyixiong.top/2021/01/28/LeetCode%E7%AC%94%E8%AE%B0-%E7%94%A8%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%A7%A3%E5%86%B3%E3%80%90120-%E4%B8%89%E8%A7%92%E5%BD%A2%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C%E3%80%91/"/>
    <id>http://jiangyixiong.top/2021/01/28/LeetCode%E7%AC%94%E8%AE%B0-%E7%94%A8%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%A7%A3%E5%86%B3%E3%80%90120-%E4%B8%89%E8%A7%92%E5%BD%A2%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C%E3%80%91/</id>
    <published>2021-01-28T10:38:57.000Z</published>
    <updated>2021-05-25T09:10:34.170Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个三角形 <code>triangle</code> ，找出自顶向下的最小路径和。</p><p>每一步只能移动到下一行中相邻的结点上。<strong>相邻的结点</strong> 在这里指的是 <strong>下标</strong> 与 <strong>上一层结点下标</strong> 相同或者等于 <strong>上一层结点下标 + 1</strong> 的两个结点。也就是说，如果正位于当前行的下标 <code>i</code> ，那么下一步可以移动到下一行的下标 <code>i</code> 或 <code>i + 1</code> 。</p><a id="more"></a><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：triangle &#x3D; [[2],[3,4],[6,5,7],[4,1,8,3]]</span><br><span class="line">输出：11</span><br><span class="line">解释：如下面简图所示：</span><br><span class="line">   2</span><br><span class="line">  3 4</span><br><span class="line"> 6 5 7</span><br><span class="line">4 1 8 3</span><br><span class="line">自顶向下的最小路径和为 11（即，2 + 3 + 5 + 1 &#x3D; 11）。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：triangle &#x3D; [[-10]]</span><br><span class="line">输出：-10</span><br></pre></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h4 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h4><p>此题很容易想到使用贪心算法求解，既从顶点开始，每一步都选择值最小的点向下前进。在示例提供的数据中这种算法可以找到最优解。但需要考虑在一些情况下，贪心算法仅能找到局部最优解，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   2</span><br><span class="line">  3 4</span><br><span class="line"> 8 9 1</span><br><span class="line">7 6 5 2</span><br><span class="line">本例使用贪心算法获取的路径为：（2-3-8-6）但实际最优解为（2-4-1-2）</span><br></pre></td></tr></table></figure><h4 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h4><p>这道题目其实类似于背包问题，天然适用与动态规划，甚至于我们可以直接在现有的三角形上构建动态规划矩阵。核心思路为：</p><ul><li>计算第一行节点的最小路径和（其实就是数字本身，不用做处理）</li><li>从第二行开始，根据当前行与上一行，计算到每一行各个节点的最小路径和</li><li>找到最后一行中最小的路径和节点，即为这个三角形的最小路径和</li></ul><p>例如刚才提到的三角形：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   2</span><br><span class="line">  3 4</span><br><span class="line"> 8 9 1</span><br><span class="line">7 6 5 2</span><br></pre></td></tr></table></figure><p>计算第二行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  (2)</span><br><span class="line"> (5 6)</span><br><span class="line"> 8 9 1</span><br><span class="line">7 6 5 2</span><br></pre></td></tr></table></figure><p>计算第三行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   (2)</span><br><span class="line">  (5 6)</span><br><span class="line">(13 14 7)</span><br><span class="line"> 7 6 5 2</span><br><span class="line">其中，9这个节点既可从5到达，也可从6到达，我们只需计算最小从5到达的路径和即可</span><br></pre></td></tr></table></figure><p>计算最后一行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    (2)</span><br><span class="line">   (5 6)</span><br><span class="line"> (13 14 7)</span><br><span class="line">(20 19 12 9)</span><br></pre></td></tr></table></figure><p>通过取最后一行的最小值，即可获取最小路径和：9</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>思路清晰之后直接上代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minimumTotal</span>(<span class="params">self, triangle: List[List[int]]</span>) -&gt; int:</span></span><br><span class="line">        <span class="keyword">for</span> coloumIndex,row <span class="keyword">in</span> enumerate(triangle):</span><br><span class="line">            <span class="keyword">if</span> coloumIndex&gt;<span class="number">0</span>:</span><br><span class="line">                <span class="comment"># 最左边元素仅可从上一行的最左边元素到达</span></span><br><span class="line">                row[<span class="number">0</span>] += triangle[coloumIndex<span class="number">-1</span>][<span class="number">0</span>]</span><br><span class="line">                <span class="comment"># 最右边元素仅可从上一行最右边元素到达</span></span><br><span class="line">                row[<span class="number">-1</span>] += triangle[coloumIndex<span class="number">-1</span>][<span class="number">-1</span>]</span><br><span class="line">                <span class="comment"># 其余元素可从上一行的2个元素到达，取最小计算路径和</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,coloumIndex):</span><br><span class="line">                    row[i]+=min(triangle[coloumIndex<span class="number">-1</span>][i<span class="number">-1</span>],triangle[coloumIndex<span class="number">-1</span>][i])</span><br><span class="line">        <span class="comment"># 返回最后一行中最小的路径和</span></span><br><span class="line">        <span class="keyword">return</span> min(triangle[<span class="number">-1</span>])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个三角形 &lt;code&gt;triangle&lt;/code&gt; ，找出自顶向下的最小路径和。&lt;/p&gt;
&lt;p&gt;每一步只能移动到下一行中相邻的结点上。&lt;strong&gt;相邻的结点&lt;/strong&gt; 在这里指的是 &lt;strong&gt;下标&lt;/strong&gt; 与 &lt;strong&gt;上一层结点下标&lt;/strong&gt; 相同或者等于 &lt;strong&gt;上一层结点下标 + 1&lt;/strong&gt; 的两个结点。也就是说，如果正位于当前行的下标 &lt;code&gt;i&lt;/code&gt; ，那么下一步可以移动到下一行的下标 &lt;code&gt;i&lt;/code&gt; 或 &lt;code&gt;i + 1&lt;/code&gt; 。&lt;/p&gt;
    
    </summary>
    
    
      <category term="blog" scheme="http://jiangyixiong.top/categories/blog/"/>
    
    
      <category term="Algorithm" scheme="http://jiangyixiong.top/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>快速搭建易于打理的个人博客 - 基于Github Pages与Actions的博客自动部署</title>
    <link href="http://jiangyixiong.top/2021/01/25/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E6%98%93%E4%BA%8E%E6%89%93%E7%90%86%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-%E5%9F%BA%E4%BA%8EGithub%20Pages%E4%B8%8EActions%E7%9A%84%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/"/>
    <id>http://jiangyixiong.top/2021/01/25/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E6%98%93%E4%BA%8E%E6%89%93%E7%90%86%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-%E5%9F%BA%E4%BA%8EGithub%20Pages%E4%B8%8EActions%E7%9A%84%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</id>
    <published>2021-01-25T18:06:18.000Z</published>
    <updated>2021-05-25T09:10:34.170Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo是一款快速，简洁且高效的博客框架。可以快速地将Markdown格式文章转化为静态博客页面。Hexo本身附带一键部署功能，可将生成的静态页面部署至GitHub pages，但本文讨论的是另一种部署方式。通过Github Actions在提交博客源码时自动生成静态页面并部署至Github Pages。</p><a id="more"></a><h2 id="Github-Pages"><a href="#Github-Pages" class="headerlink" title="Github Pages"></a>Github Pages</h2><blockquote><p>Github Pages 被设计用以发布存储于Github仓库的个人、组织、项目相关的静态页面。</p></blockquote><p>Github Pages 的配置非常方便，我们只需将静态页面上传至一个Github仓库，并在仓库配置中开启GithubPages相关选项</p><p><img src="/images/image-20210126104911097.png" alt="image-20210126104911097"></p><p>其中在<strong>Source</strong>部分中配置静态页面所在的分支与目录。设置完成后即可通过{UserName}.github.io访问。这里也可以使用自定义域名，详细配置见<a href="https://docs.github.com/articles/using-a-custom-domain-with-github-pages/">Github官方指南</a>。</p><h2 id="Github-Actions"><a href="#Github-Actions" class="headerlink" title="Github Actions"></a>Github Actions</h2><blockquote><p>Github Actions是Github推出的自动构建、测试、部署的工作流。类似于Gitlab的CI/CD或Jenkins。可以通过Github的pull、merge、issue等动作触发。</p></blockquote><p>有了Github Pages，我们只需要将Hexo生成的静态页面推送至我们配置了Github Pages对应的仓库即可。如果我们采用手动操作，有如下几个步骤：</p><ol><li>本地安装Hexo并初始化我们的博客（仅需一次）</li><li>写点什么</li><li>通过NPM+Hexo生成静态页面</li><li>将静态页面所在文件夹init为一个git文件夹，并关联到我们创建好的Github仓库，并推送</li></ol><p>而采用Github Actions，我们仅需将这几个动作写成脚本，自动化即可。</p><h4 id="初始化本地Hexo博客"><a href="#初始化本地Hexo博客" class="headerlink" title="初始化本地Hexo博客"></a>初始化本地Hexo博客</h4><p>这部分不详细说明Hexo的使用，可见<a href="https://hexo.io/zh-cn/docs/">Hexo官方指南</a>，非常详细且有中文。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g hexo-cli</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo init &lt;目录名&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> &lt;目录名&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install</span></span><br></pre></td></tr></table></figure><p>之后我们可以添加几篇初始内容。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo new <span class="string">&quot;文章标题&quot;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo new page --path about/me <span class="string">&quot;页面标题&quot;</span></span></span><br></pre></td></tr></table></figure><p>之后，我们本地运行Hexo查看下效果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo server</span></span><br></pre></td></tr></table></figure><p>至此，我们已经在本地完成了Hexo的初始化。之后将其推送至一个新的Github仓库，作为源码仓库。</p><h4 id="配置Actions自动部署"><a href="#配置Actions自动部署" class="headerlink" title="配置Actions自动部署"></a>配置Actions自动部署</h4><p>重点来了，之后我们要配置Github Actions，让源码仓库在有新的push内容时，自动生成静态页面，并将静态页面推送至Github Pages仓库。</p><p>首先，为了让Actions拥有向Pages仓库push内容的权限，我们需要在我们的Github账号中新建一个Personal Access Token。前往个人Settings - Developer settings - Personal access token。并创建一个新的Token。</p><p><img src="/images/image-20210126111006651.png" alt="image-20210126111006651"></p><p><img src="/images/image-20210126111142998.png" alt="image-20210126111142998"></p><p>之后，我们需要将这个新创建的token添加至博客源码仓库。前往源码仓库的设置页面：Settings-Secret, 添加一个新的 repository secret。</p><p><img src="/images/image-20210126111338255.png" alt="image-20210126111338255"> </p><p>完成之后我们就可以开始编写Actions脚本了。添加Action的方法为，在源码仓库中，新建 <code>.github/workflows</code>目录。并在其中创建一个<code>yml</code>文件，文件名可自由定义。这个<code>yml</code>文件就是自动构建的脚本，具体的编写可见<a href="https://docs.github.com/en/actions/learn-github-actions">Github官方指南</a>。这里放出本博客的构建脚本并进行说明：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Garys</span> <span class="string">blog</span> <span class="string">deployment</span> <span class="comment">#自动构建工作流名称</span></span><br><span class="line"><span class="attr">on:</span> </span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;master&quot;</span> </span><br><span class="line">      <span class="comment">#触发器，详见https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#onpushpull_requestpaths</span></span><br><span class="line"><span class="attr">jobs:</span> <span class="comment"># 构建任务列表，一个工作流中可有多个构建任务</span></span><br><span class="line">  <span class="attr">generate_public:</span> <span class="comment"># 构建任务1</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">generate</span> <span class="string">&amp;</span> <span class="string">deploy</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span> <span class="comment"># 定义运行环境，这里选择ubuntu</span></span><br><span class="line">    <span class="attr">steps:</span> <span class="comment"># 任务步骤列表，本任务中有4项任务</span></span><br><span class="line">    </span><br><span class="line">      <span class="comment"># 1. 将本仓库代码拉至当前工作目录，这里使用了Github提供的预定义Action，可在 https://github.com/actions/checkout 查看其源码，本质上是通过git拉取当前仓库指定分支的代码。</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2.3.1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">persist-credentials:</span> <span class="literal">false</span></span><br><span class="line">          </span><br><span class="line">      <span class="comment"># 2. 通过npm安装项目依赖，这里直接通过run运行npm命令</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Hexo</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">          </span><br><span class="line">      <span class="comment"># 3. 通过npm生成hexo静态页面</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">run-script</span> <span class="string">build</span></span><br><span class="line">          </span><br><span class="line">      <span class="comment"># 4. 将生成的静态页面目录推送至Github pages仓库。这里使用了Github pages部署action，源码与文档见 https://github.com/JamesIves/github-pages-deploy-action ，其通过Git将指定目录推送至指定仓库。</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">JamesIves/github-pages-deploy-action@3.7.1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.BLOG_DEPLOYMENT</span> <span class="string">&#125;&#125;</span> <span class="comment"># 刚才配置的Repository secret，secrets后的名称与刚才配置的名称一致。</span></span><br><span class="line">          <span class="attr">BRANCH:</span> <span class="string">master</span> <span class="comment"># 目标分支</span></span><br><span class="line">          <span class="attr">FOLDER:</span> <span class="string">public</span> <span class="comment"># 静态页面所在当前残酷的目录</span></span><br><span class="line">          <span class="attr">REPOSITORY_NAME:</span> <span class="string">GaryXiongxiong/Myblog</span> <span class="comment"># 目标仓库</span></span><br><span class="line">          <span class="attr">GIT_CONFIG_NAME:</span> <span class="string">GaryXiongxiong</span></span><br><span class="line">          <span class="attr">GIT_CONFIG_EMAIL:</span> <span class="string">i@jiangyixiong.top</span></span><br><span class="line">          <span class="attr">CLEAN:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>配置完成后，只需把我们更新后的源码仓库推送至Github，之后便可在Github仓库页面的Actions标签中查看构建日志：</p><p><img src="/images/image-20210126113749255.png" alt="image-20210126113749255"></p><p>构建成功后，我们便可通过我们Github pages的链接查看更新后的博客啦！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo是一款快速，简洁且高效的博客框架。可以快速地将Markdown格式文章转化为静态博客页面。Hexo本身附带一键部署功能，可将生成的静态页面部署至GitHub pages，但本文讨论的是另一种部署方式。通过Github Actions在提交博客源码时自动生成静态页面并部署至Github Pages。&lt;/p&gt;
    
    </summary>
    
    
      <category term="blog" scheme="http://jiangyixiong.top/categories/blog/"/>
    
    
      <category term="Github" scheme="http://jiangyixiong.top/tags/Github/"/>
    
      <category term="Github Pages" scheme="http://jiangyixiong.top/tags/Github-Pages/"/>
    
      <category term="自动构建" scheme="http://jiangyixiong.top/tags/%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Hear不同 S01E07 三十而已，越来越多我认识的人选择去卖保险了</title>
    <link href="http://jiangyixiong.top/2021/01/25/Hear%E4%B8%8D%E5%90%8CS01E07%E4%B8%89%E5%8D%81%E8%80%8C%E5%B7%B2%EF%BC%8C%E8%B6%8A%E6%9D%A5%E8%B6%8A%E5%A4%9A%E6%88%91%E8%AE%A4%E8%AF%86%E7%9A%84%E4%BA%BA%E9%80%89%E6%8B%A9%E5%8E%BB%E5%8D%96%E4%BF%9D%E9%99%A9%E4%BA%86/"/>
    <id>http://jiangyixiong.top/2021/01/25/Hear%E4%B8%8D%E5%90%8CS01E07%E4%B8%89%E5%8D%81%E8%80%8C%E5%B7%B2%EF%BC%8C%E8%B6%8A%E6%9D%A5%E8%B6%8A%E5%A4%9A%E6%88%91%E8%AE%A4%E8%AF%86%E7%9A%84%E4%BA%BA%E9%80%89%E6%8B%A9%E5%8E%BB%E5%8D%96%E4%BF%9D%E9%99%A9%E4%BA%86/</id>
    <published>2021-01-25T18:01:49.000Z</published>
    <updated>2021-05-25T09:10:34.170Z</updated>
    
    <content type="html"><![CDATA[<p>本期节目基于刘轶的小范围社会观察，我们想从择业的角度讨论下在30+这个年龄，选择保险行业是否是一条合适的出路。<br>谈到“卖保险”这三个字，我猜很多人大概率不会把它归于褒义词，当然这是我对于这个行业的刻板印象造成的，最近在我的身边（朋友圈），有越来越多30+年龄的人选择了从事保险行业，这其中有我之前公司的合伙人，也有我曾经的客户，她们都是优秀的人才，在我的臆想里，他们应该去全球化的公司担任中高层的管理岗位，对于她们的选择，让我有很多疑问。于是本期节目我们第一次请来了一位嘉宾。<br>本期的嘉宾思意是陈老师的太太，在从事保险事业之前，她从事过教师和行政类的工作，在30+的年龄被全球著名的保险公司“招募”而进入这一行业，对于保险产品本身，她真诚得相信是保障人生和分散风险的工具。<br>本期节目不讨论任何保险产品，也没有如何配置保险的攻略。</p><a id="more"></a><iframe src="https://player.fireside.fm/v2/CSKDZ64u+V9lnzHDQ?theme=dark" width="740" height="200" frameborder="0" scrolling="no"></iframe><p><strong>【本期营业人员】</strong><br>刘轶，<a href="https://www.weibo.com/u/1730354404">@amuro0061</a><br>小雄，<a href="https://www.weibo.com/u/5628876835">@Gary熊了个熊</a></p><p><strong>【本期嘉宾】</strong><br>思意，微信 @megumioishi</p><p><strong>【主题讨论】</strong></p><p>00:22 本期节目陈老师不营业，陈太太作为嘉宾参与了本期节目<br>03:13 思意一天的日程安排<br>07:01 保险从业人员每天的工作就像播种，等待收获<br>09:19 年龄30+的从业人员很受保险公司青睐<br>12:05 从事保险销售工作对自己的人脉是一种消耗还是拓展<br>21:01 即便是熟人，依然会对保险经纪存在很多偏见<br>26:13 那些被保险行业劝退的从业人员是因为不努力吗？<br>33:00 保险公司的各种活动和分享本质上是一种慕强和成功学吗？<br>36:30 保险从业人员内部有销售鄙视链吗？<br>39:02 每个人都是“合伙人”，可是却不缴纳五险一金<br>43:15 选择去保险公司工作的思考<br>50:55 如何礼貌得拒绝身边的保险经纪人</p><p><strong>【节目BGM】</strong><br>I’m 卖保险 – 《I’m 卖保险》by KnowKnow</p><p><strong>【关于我们】</strong></p><p>“Hear不同”是一档凭直觉思维驱动的播客节目，话题多元且随机。我们谈话的目的是为了收获乐趣与自我觉察，无意也无能成为生活方式或社会思潮的引领者，君子和而不同，Hear不同。</p><p><strong>【订阅和rss】</strong></p><p>我们推荐使用泛用性播客客户端订阅我们的RSS进行节目的收听，地址如下：</p><p><a href="https://feeds.fireside.fm/hearbutong/rss">https://feeds.fireside.fm/hearbutong/rss</a></p><p>同时，我们的节目已在各大音频平台上线，包括喜马拉雅fm、荔枝fm、网易云音乐、Google podcast、苹果播客、小宇宙等，您的订阅和反馈是我们持续更新的核动力。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本期节目基于刘轶的小范围社会观察，我们想从择业的角度讨论下在30+这个年龄，选择保险行业是否是一条合适的出路。&lt;br&gt;谈到“卖保险”这三个字，我猜很多人大概率不会把它归于褒义词，当然这是我对于这个行业的刻板印象造成的，最近在我的身边（朋友圈），有越来越多30+年龄的人选择了从事保险行业，这其中有我之前公司的合伙人，也有我曾经的客户，她们都是优秀的人才，在我的臆想里，他们应该去全球化的公司担任中高层的管理岗位，对于她们的选择，让我有很多疑问。于是本期节目我们第一次请来了一位嘉宾。&lt;br&gt;本期的嘉宾思意是陈老师的太太，在从事保险事业之前，她从事过教师和行政类的工作，在30+的年龄被全球著名的保险公司“招募”而进入这一行业，对于保险产品本身，她真诚得相信是保障人生和分散风险的工具。&lt;br&gt;本期节目不讨论任何保险产品，也没有如何配置保险的攻略。&lt;/p&gt;
    
    </summary>
    
    
      <category term="podcast" scheme="http://jiangyixiong.top/categories/podcast/"/>
    
    
      <category term="Hear不同" scheme="http://jiangyixiong.top/tags/Hear%E4%B8%8D%E5%90%8C/"/>
    
  </entry>
  
  <entry>
    <title>Hear不同 S01E06 断更的日子，我在996</title>
    <link href="http://jiangyixiong.top/2020/11/10/Hear%E4%B8%8D%E5%90%8C-S01E06-%E6%96%AD%E6%9B%B4%E7%9A%84%E6%97%A5%E5%AD%90%EF%BC%8C%E6%88%91%E5%9C%A8996/"/>
    <id>http://jiangyixiong.top/2020/11/10/Hear%E4%B8%8D%E5%90%8C-S01E06-%E6%96%AD%E6%9B%B4%E7%9A%84%E6%97%A5%E5%AD%90%EF%BC%8C%E6%88%91%E5%9C%A8996/</id>
    <published>2020-11-10T16:00:08.000Z</published>
    <updated>2021-05-25T09:10:34.166Z</updated>
    
    <content type="html"><![CDATA[<p>时隔2个多月，我们的节目恢复更新了。在这段断更的日子里，小雄经历了制度性的996，而刘轶和陈老师繁忙的程度都超过了996，人生从来不容易，如果你觉得容易，那一定有人帮你把不容易的部分承担了。<br>我们在断更的日子里其实积累了不少选题，《陈老师 请回答》系列会是之后长期更新的系列栏目，敬请期待。也恳请大家积极反馈和我们互动，谢谢。</p><a id="more"></a><iframe src="https://player.fireside.fm/v2/CSKDZ64u+H00dPagv?theme=dark" width="740" height="200" frameborder="0" scrolling="no"></iframe><p><strong>【本期营业人员】</strong><br>刘轶，<a href="https://www.weibo.com/u/1730354404">@amuro0061</a><br>陈老师，<a href="https://www.weibo.com/u/7475078094">@hearchen33</a><br>小雄，<a href="https://www.weibo.com/u/5628876835">@Gary熊了个熊</a></p><p><strong>【主题讨论】</strong></p><p>01:34 我们断更的起因，是小雄公司所在的部门实行了996工作制<br>05:48 996工作制最不能接受的是那个6<br>12:40 国内很多IT公司之所以996，是因为每天都在“创新”<br>13:00 敏捷开发和瀑布流（名词解释，直男话题）<br>15:20 常态的996是因为真的有那么多工作量吗？<br>18:04 福利非常好的大厂，有很多年轻人并不排斥996<br>27:23 我们决定断更，因为《Hear不同》少了小雄就不完整（没人剪辑）了<br>32:51 断更的日子，陈老师忙着天天设计学校的方案，今年申请去学校实习的人数大幅上升，就业形势着实严峻<br>38:45 明年我们也想去PodFest China现场<br>40:09 从9月开始，刘轶忙到每天只睡5.5小时，持续了1个多月<br>45:17 《贤者时间》恢复更新了，开心<br>45:42 为什么我们的节目没有人催更？哇得一声哭了出来</p><p><strong>【节目BGM】</strong></p><p>テーマ・オブ・半沢直樹 <del>Main Title</del> – 《TBS系 日曜劇場「半沢直樹」オリジナル・サウンドトラック》 服部隆之</p><p><strong>【分享环节】</strong><br>小雄：《JOJO的奇妙冒险》动画及跑团游戏<br>陈老师：每日15分钟健身套餐<br>刘轶：干啥啥不行，浪费第一名（沙雕如我）</p><p><strong>【延伸阅读】</strong></p><p>COC×JOJO 跑团 replay丨第1回：替身使者社畜爆锤黑心老板：</p><p><a href="https://www.gcores.com/videos/129933">https://www.gcores.com/videos/129933</a></p><p><strong>【关于我们】</strong></p><p>“Hear不同”是一档凭直觉思维驱动的播客节目，话题多元且随机。我们谈话的目的是为了收获乐趣与自我觉察，无意也无能成为生活方式或社会思潮的引领者，君子和而不同，Hear不同。</p><p><strong>【订阅和rss】</strong></p><p>我们推荐使用泛用性播客客户端订阅我们的RSS进行节目的收听，地址如下：</p><p><a href="https://feeds.fireside.fm/hearbutong/rss">https://feeds.fireside.fm/hearbutong/rss</a></p><p>同时，我们的节目已在各大音频平台上线，包括喜马拉雅fm、荔枝fm、网易云音乐、Google podcast、苹果播客、小宇宙等，您的订阅和反馈是我们持续更新的核动力。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;时隔2个多月，我们的节目恢复更新了。在这段断更的日子里，小雄经历了制度性的996，而刘轶和陈老师繁忙的程度都超过了996，人生从来不容易，如果你觉得容易，那一定有人帮你把不容易的部分承担了。&lt;br&gt;我们在断更的日子里其实积累了不少选题，《陈老师 请回答》系列会是之后长期更新的系列栏目，敬请期待。也恳请大家积极反馈和我们互动，谢谢。&lt;/p&gt;
    
    </summary>
    
    
      <category term="podcast" scheme="http://jiangyixiong.top/categories/podcast/"/>
    
    
      <category term="Hear不同" scheme="http://jiangyixiong.top/tags/Hear%E4%B8%8D%E5%90%8C/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode笔记-用DFS解决【1339-分裂二叉树的最大乘积】</title>
    <link href="http://jiangyixiong.top/2020/10/29/LeetCode%E7%AC%94%E8%AE%B0-%E7%94%A8DFS%E8%A7%A3%E5%86%B3%E3%80%901339-%E5%88%86%E8%A3%82%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E4%B9%98%E7%A7%AF%E3%80%91/"/>
    <id>http://jiangyixiong.top/2020/10/29/LeetCode%E7%AC%94%E8%AE%B0-%E7%94%A8DFS%E8%A7%A3%E5%86%B3%E3%80%901339-%E5%88%86%E8%A3%82%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E4%B9%98%E7%A7%AF%E3%80%91/</id>
    <published>2020-10-29T09:23:04.000Z</published>
    <updated>2021-05-25T09:10:34.170Z</updated>
    
    <content type="html"><![CDATA[<p>给你一棵二叉树，它的根为 <code>root</code> 。请你删除 1 条边，使二叉树分裂成两棵子树，且它们子树和的乘积尽可能大。</p><p>由于答案可能会很大，请你将结果对 10^9 + 7 取模后再返回。</p><a id="more"></a><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><strong>示例 1：</strong></p><p><strong><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/02/02/sample_1_1699.png" alt="img"></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：root &#x3D; [1,2,3,4,5,6]</span><br><span class="line">输出：110</span><br><span class="line">解释：删除红色的边，得到 2 棵子树，和分别为 11 和 10 。它们的乘积是 110 （11*10）</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/02/02/sample_2_1699.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：root &#x3D; [1,null,2,3,4,null,null,5,6]</span><br><span class="line">输出：90</span><br><span class="line">解释：移除红色的边，得到 2 棵子树，和分别是 15 和 6 。它们的乘积为 90 （15*6）</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root &#x3D; [2,3,9,10,7,8,6,5,4,11,1]</span><br><span class="line">输出：1025</span><br></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root &#x3D; [1,1]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p> <strong>提示：</strong></p><ul><li>每棵树最多有 <code>50000</code> 个节点，且至少有 <code>2</code> 个节点。</li><li>每个节点的值在 <code>[1, 10000]</code> 之间。</li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>一开始想到，在两数和一定的情况下，两数越接近，其乘积越大。但仔细一想，计算两树和之差再取绝对值的最小值<code>min( abs( tree_sum(tree1)-tree_sum(tree2) ) )</code>的计算量并不比直接计算两树和的积的最大值<code>max(tree_sum(tree1)-tree_sum(tree2))</code>小多少。故这个想法没派上用场。</p><p>之后开始思考如何遍历把一棵树拆成两颗的所有情况，之前了解的遍历方法都是遍历节点，面对这种切边的情况一度陷入懵逼。看了下LeetCode的讨论，突然反应过来，只要取出以切割边下方的节点为根节点的子树，就能得到两颗以该边切割出的树。同时我们能得到两树的节点和为：<code>切割下的: tree_sum(cut_node)</code>，<code>剩下的：tree_sum(root_node)-tree_sum(cut_node)</code>。有了这个计算方法，暴力求解就行的通了，我们只需对整棵树求和，之后对于树的每个节点，计算以该节点为根节点的子树节点和，就能得到两棵树的乘积：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">product = tree_sum(cut_node)*(tree_sum(root_node)-tree_sum(cut_node))</span><br></pre></td></tr></table></figure><p>接下来就是如何遍历节点的问题了，一开始我并没有多想，直接用BFS写出了代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxProduct</span>(<span class="params">self, root: TreeNode</span>) -&gt; int:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 通过BFS求以root为根节点的节点和</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bfs</span>(<span class="params">root: TreeNode</span>) -&gt; int:</span></span><br><span class="line">        sum_num = <span class="number">0</span></span><br><span class="line">        queue = []</span><br><span class="line">        queue.append(root)</span><br><span class="line">        <span class="keyword">while</span> len(queue)&gt;<span class="number">0</span>:</span><br><span class="line">            node: TreeNode = queue.pop()</span><br><span class="line">            sum_num+=node.val</span><br><span class="line">            <span class="keyword">if</span> node.left <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                queue.append(node.left)</span><br><span class="line">            <span class="keyword">if</span> node.right <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                queue.append(node.right)</span><br><span class="line">        <span class="keyword">return</span> sum_num</span><br><span class="line">    </span><br><span class="line">    total_sum = bfs(root)</span><br><span class="line">    biggest_product = <span class="number">0</span></span><br><span class="line">    queue = []</span><br><span class="line">    queue.append(root)</span><br><span class="line">    <span class="comment"># BFS同时计算每个节点的子树和</span></span><br><span class="line">    <span class="keyword">while</span> len(queue)&gt;<span class="number">0</span>:</span><br><span class="line">        node: TreeNode = queue.pop()</span><br><span class="line">        sub_sum = bfs(node)</span><br><span class="line">        biggest_product = max(biggest_product,sub_sum*(total_sum-sub_sum))</span><br><span class="line">        <span class="keyword">if</span> node.left <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            queue.append(node.left)</span><br><span class="line">        <span class="keyword">if</span> node.right <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            queue.append(node.right)</span><br><span class="line">    <span class="keyword">return</span> biggest_product % <span class="number">1000000007</span></span><br></pre></td></tr></table></figure><p>越写越觉得哪里不对，这段代码相当于一个大BFS中套了小BFS，算法复杂度为<code>O(N^2)</code>。绝逼要超时。提交后也确实超时了。</p><p>思考之后，DFS貌似更适合这里，DFS在递归计算时，每一次自身调用都是一次计算子树和的过程。我们只要在一次DFS的过程中，保存每次递归调用求和的结果，就能得到每颗子树的子树和，最后再遍历一遍，就能找到最大的乘积了。</p><h2 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxProduct</span>(<span class="params">self, root: TreeNode</span>) -&gt; int:</span></span><br><span class="line">    biggest_product = <span class="number">0</span></span><br><span class="line">    sum_vector = []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># DFS 遍历二叉树同时记录每个子树的和</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">root: TreeNode</span>) -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        summary = root.val + dfs(root.left) + dfs(root.right)</span><br><span class="line">        <span class="comment"># 把当前节点对应树的和记录入子树和列表</span></span><br><span class="line">        sum_vector.append(summary)</span><br><span class="line">        <span class="keyword">return</span> summary</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算整棵树节点和的同时构建子树和数组</span></span><br><span class="line">    total_sum = dfs(root)</span><br><span class="line">    <span class="comment"># 遍历子树和数组寻找最大乘积</span></span><br><span class="line">    <span class="keyword">for</span> summary <span class="keyword">in</span> sum_vector:</span><br><span class="line">        biggest_product = max(biggest_product,summary*(total_sum-summary))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> biggest_product % <span class="number">1000000007</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给你一棵二叉树，它的根为 &lt;code&gt;root&lt;/code&gt; 。请你删除 1 条边，使二叉树分裂成两棵子树，且它们子树和的乘积尽可能大。&lt;/p&gt;
&lt;p&gt;由于答案可能会很大，请你将结果对 10^9 + 7 取模后再返回。&lt;/p&gt;
    
    </summary>
    
    
      <category term="blog" scheme="http://jiangyixiong.top/categories/blog/"/>
    
    
      <category term="Algorithm" scheme="http://jiangyixiong.top/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode笔记-递归解决【1147-段式回文】</title>
    <link href="http://jiangyixiong.top/2020/10/26/LeetCode%E7%AC%94%E8%AE%B0-%E9%80%92%E5%BD%92%E8%A7%A3%E5%86%B3%E3%80%901147-%E6%AE%B5%E5%BC%8F%E5%9B%9E%E6%96%87%E3%80%91/"/>
    <id>http://jiangyixiong.top/2020/10/26/LeetCode%E7%AC%94%E8%AE%B0-%E9%80%92%E5%BD%92%E8%A7%A3%E5%86%B3%E3%80%901147-%E6%AE%B5%E5%BC%8F%E5%9B%9E%E6%96%87%E3%80%91/</id>
    <published>2020-10-26T09:56:12.000Z</published>
    <updated>2021-05-25T09:10:34.170Z</updated>
    
    <content type="html"><![CDATA[<p>段式回文 其实与 一般回文 类似，只不过是最小的单位是 一段字符 而不是 单个字母。</p><p>举个例子，对于一般回文 “<code>abcba</code>“ 是回文，而 “<code>volvo</code>“ 不是，但如果我们把 “<code>volvo</code>“ 分为 “<code>vo</code>“、”<code>l</code>“、”<code>vo</code>“ 三段，则可以认为 “<code>(vo)(l)(vo)</code>” 是段式回文（分为 3 段）。</p><a id="more"></a><p>给你一个字符串 <code>text</code>，在确保它满足段式回文的前提下，请你返回 <strong>段</strong> 的 <strong>最大数量</strong> <code>k</code>。</p><p>如果段的最大数量为 <code>k</code>，那么存在满足以下条件的 <code>a_1, a_2, ..., a_k</code>：</p><ul><li>每个 <code>a_i</code> 都是一个非空字符串；</li><li>将这些字符串首位相连的结果 <code>a_1 + a_2 + ... + a_k</code> 和原始字符串 <code>text</code> 相同；</li><li>对于所有<code>1 &lt;= i &lt;= k</code>，都有 <code>a_i = a_&#123;k+1 - i&#125;</code>。</li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：text &#x3D; &quot;ghiabcdefhelloadamhelloabcdefghi&quot;</span><br><span class="line">输出：7</span><br><span class="line">解释：我们可以把字符串拆分成 &quot;(ghi)(abcdef)(hello)(adam)(hello)(abcdef)(ghi)&quot;。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：text &#x3D; &quot;merchant&quot;</span><br><span class="line">输出：1</span><br><span class="line">解释：我们可以把字符串拆分成 &quot;(merchant)&quot;。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：text &#x3D; &quot;antaprezatepzapreanta&quot;</span><br><span class="line">输出：11</span><br><span class="line">解释：我们可以把字符串拆分成 &quot;(a)(nt)(a)(pre)(za)(tpe)(za)(pre)(a)(nt)(a)&quot;。</span><br></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：text &#x3D; &quot;aaa&quot;</span><br><span class="line">输出：3</span><br><span class="line">解释：我们可以把字符串拆分成 &quot;(a)(a)(a)&quot;。</span><br></pre></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>第一反应是通过双指针，从字符串两端逐渐向中间推进寻找相同字符串，发现后即可取出一个回文段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    [a,b,c,d,a,b,c]</span><br><span class="line">i&#x3D;0  ^           ^</span><br><span class="line">i&#x3D;1  ^-^       ^-^</span><br><span class="line">i&#x3D;2  ^-^-^   ^-^-^ 发现回文段（a,b,c）</span><br></pre></td></tr></table></figure><p>取出一个回文段后，我们可以继续推进，寻找下一个回文段，直到两个指针间距&lt;=1，如果这时中间部分未找到回文段，则把中间部分整个提取出作为一个回文段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    [a,b,c,d,e,a,b,c]</span><br><span class="line">i&#x3D;2  ^-^-^     ^-^-^ </span><br><span class="line">这时，中间的(d,e)为一个回文段，k&#x3D;3</span><br></pre></td></tr></table></figure><p>为简化算法，我们可以使用递归，即找到一对回文段后，可去掉找到的回文段，并再次调用该函数本身，<code>k=k(去除已找到的前后两个回文段)+2</code>。递归基线条件有如下3个：</p><ol><li>输入字符串长度=0，则k=0</li><li>输入字符串长度=1，则k=1</li><li>若字符串中找不到回文段，则k=1</li></ol><p>至此，我们已经可以写出代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longestDecomposition</span>(<span class="params">self, text: str</span>) -&gt; int:</span></span><br><span class="line">    n:int = len(text)</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span>(n==<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    mid:int = math.floor(n/<span class="number">2.0</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(mid):</span><br><span class="line">        <span class="keyword">if</span> text[<span class="number">0</span>:i+<span class="number">1</span>]==text[n-i<span class="number">-1</span>:n]:</span><br><span class="line">            <span class="keyword">return</span> self.longestDecomposition(text[i+<span class="number">1</span>:n-i<span class="number">-1</span>])+<span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>提交结果如下：</p><blockquote><p>执行用时: <strong>52 ms</strong></p><p>内存消耗: <strong>13.8 MB</strong></p></blockquote><p>用时仅击败15%，看来还有优化空间，经过考虑后，我们仅需要在当前字符<code>text[i]</code>与最后一个字符相等时，才需要对比整个字符串，所以可以对循环中的判断条件做出以下调整来节省时间：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> text[i] == text[n<span class="number">-1</span>] <span class="keyword">and</span> text[<span class="number">0</span>:i+<span class="number">1</span>]==text[n-i<span class="number">-1</span>:n]:</span><br></pre></td></tr></table></figure><p>修改后结果如下：</p><blockquote><p>执行用时: <strong>36 ms</strong></p><p>内存消耗: <strong>13.7 MB</strong></p></blockquote><p>用时击败89%提交记录。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longestDecomposition</span>(<span class="params">self, text: str</span>) -&gt; int:</span></span><br><span class="line">    n:int = len(text)</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span>(n==<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    mid:int = math.floor(n/<span class="number">2.0</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(mid):</span><br><span class="line">        <span class="keyword">if</span> text[i] == text[n<span class="number">-1</span>] <span class="keyword">and</span> text[<span class="number">0</span>:i+<span class="number">1</span>]==text[n-i<span class="number">-1</span>:n]:</span><br><span class="line">            <span class="keyword">return</span> self.longestDecomposition(text[i+<span class="number">1</span>:n-i<span class="number">-1</span>])+<span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;段式回文 其实与 一般回文 类似，只不过是最小的单位是 一段字符 而不是 单个字母。&lt;/p&gt;
&lt;p&gt;举个例子，对于一般回文 “&lt;code&gt;abcba&lt;/code&gt;“ 是回文，而 “&lt;code&gt;volvo&lt;/code&gt;“ 不是，但如果我们把 “&lt;code&gt;volvo&lt;/code&gt;“ 分为 “&lt;code&gt;vo&lt;/code&gt;“、”&lt;code&gt;l&lt;/code&gt;“、”&lt;code&gt;vo&lt;/code&gt;“ 三段，则可以认为 “&lt;code&gt;(vo)(l)(vo)&lt;/code&gt;” 是段式回文（分为 3 段）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="blog" scheme="http://jiangyixiong.top/categories/blog/"/>
    
    
      <category term="Algorithm" scheme="http://jiangyixiong.top/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode笔记-用前缀和与哈希表解决【560-和为k的子数组】</title>
    <link href="http://jiangyixiong.top/2020/10/22/LeetCode%E7%AC%94%E8%AE%B0-%E7%94%A8%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%93%88%E5%B8%8C%E8%A1%A8%E8%A7%A3%E5%86%B3%E3%80%90560-%E5%92%8C%E4%B8%BAk%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84%E3%80%91/"/>
    <id>http://jiangyixiong.top/2020/10/22/LeetCode%E7%AC%94%E8%AE%B0-%E7%94%A8%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%93%88%E5%B8%8C%E8%A1%A8%E8%A7%A3%E5%86%B3%E3%80%90560-%E5%92%8C%E4%B8%BAk%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84%E3%80%91/</id>
    <published>2020-10-22T16:59:32.000Z</published>
    <updated>2021-05-25T09:10:34.170Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个整数数组和一个整数 <strong>k，</strong>你需要找到该数组中和为 <strong>k</strong> 的连续的子数组的个数。</p><ul><li>数组的长度为 [1, 20,000]</li><li>数组中元素的范围是 [-1000, 1000] ，且整数 <strong>k</strong> 的范围是 [-1e7, 1e7]</li></ul><a id="more"></a><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入:nums &#x3D; [1,1,1], k &#x3D; 2</span><br><span class="line">输出: 2 , [1,1] 与 [1,1] 为两种不同的情况。</span><br></pre></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>看到这种子集合，我一开始想到了动态规划，题解如下：</p><p>我们做一张表对应数组<code>[a,b,c]</code>:</p><table><thead><tr><th></th><th>a</th><th>b</th><th>c</th></tr></thead><tbody><tr><td>a</td><td>a</td><td>0</td><td>0</td></tr><tr><td>b</td><td>a+b</td><td>b</td><td>0</td></tr><tr><td>c</td><td>a+b+c</td><td>b+c</td><td>c</td></tr></tbody></table><p>列为起始元素，行为结束元素</p><p>可以推出我们每行的值等于上一行的值加上本行对应元素。每行只填到自身。对应代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subarraySum</span>(<span class="params">self, nums: List[int], k: int</span>) -&gt; int:</span></span><br><span class="line">    n:int = len(nums)</span><br><span class="line">    count:int = <span class="number">0</span>;</span><br><span class="line">    <span class="comment"># 构建n*n的dp表格</span></span><br><span class="line">    dp_tensor = [[[<span class="number">0</span> <span class="keyword">for</span> row <span class="keyword">in</span> range(n)] <span class="keyword">for</span> col <span class="keyword">in</span> range(n)]]</span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(index+<span class="number">1</span>):</span><br><span class="line">            <span class="comment"># 计算并填写表格</span></span><br><span class="line">            prev:int = dp_tensor[index<span class="number">-1</span>][j] <span class="keyword">if</span> index&gt;<span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">            dp_tensor[index][j] = prev+nums[index]</span><br><span class="line">            <span class="keyword">if</span> dp_tensor[index][j] == k:</span><br><span class="line">                count+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure><p>时间复杂度为<code>O(N^2)</code>感觉并没有发挥DP的优势，跟暴力穷举的时间复杂度类似了。提交后果然超时。</p><p>观看LeetCode相关讨论后学习到本题需要使用前缀和与哈希表解决：</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h4 id="使用前缀和"><a href="#使用前缀和" class="headerlink" title="使用前缀和"></a>使用前缀和</h4><p>设我们有一个数组<code>A[]</code>，其中对应<code>n</code>位置的前缀和为<code>A[0]</code>累加至<code>A[n-1]</code>,依此我们可以构建前缀和数组<code>prev_sums[]</code>，当我们需要知道从<code>A[i]</code>到<code>A[j]</code>的子数组和时，我们只需计算<code>prev_sums[j+1]-prev_sums[i]</code>，对应的，我们修改代码至如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subarraySum</span>(<span class="params">self, nums: List[int], k: int</span>) -&gt; int:</span></span><br><span class="line">    n: int = len(nums)</span><br><span class="line">    prev_sums: List[int] = [<span class="number">0</span>]</span><br><span class="line">    count: int = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 构建前缀和序列</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">        prev_sums.append(prev_sums[i<span class="number">-1</span>]+nums[i<span class="number">-1</span>])</span><br><span class="line">    <span class="comment"># 双指针遍历前缀和序列寻找前缀和差为k的两个元素，并累加数量</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> k == prev_sums[i+<span class="number">1</span>]-prev_sums[j]:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure><h4 id="使用哈希表（字典）"><a href="#使用哈希表（字典）" class="headerlink" title="使用哈希表（字典）"></a>使用哈希表（字典）</h4><p>这时，时间复杂度依然为<code>O(N^2)</code>，为了进一步优化，需要想到，我们只需计算和为k的子数组数量，也就是<code>prev_sums[i+1]-prev_sums[j]=k</code>的数量，就能得出最后的答案。我们可以利用字典中查找<code>key</code>复杂度只为<code>O(1)</code>的特性，把每个<code>prev_sum</code>存储到一个字典的<code>key</code>中，同时把该<code>prev_sum</code>的个数存储到值中。同时在循环中我们只考虑<code>j&lt;=i</code>的情况，所以我们只需要维护一个存储key为<code>prev_sum</code>，值为<code>prev_sum的个数</code>的字典，遍历一次，在遍历过程中，计算出<code>当前prev_sum-k</code>的值，并在字典中查找这个key，如果有对应的值则把值加到<code>count</code>上，最后得出答案。</p><h2 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subarraySum</span>(<span class="params">self, nums: List[int], k: int</span>) -&gt; int:</span></span><br><span class="line">    n: int = len(nums)</span><br><span class="line">    prev_sum = <span class="number">0</span></span><br><span class="line">    prev_sum_map = &#123;<span class="number">0</span> : <span class="number">1</span>&#125;</span><br><span class="line">    count: int = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># 计算i-1元素的前缀和</span></span><br><span class="line">        prev_sum+=nums[i<span class="number">-1</span>]</span><br><span class="line">        <span class="comment"># 在字典中查找 prev_sum-k，如果有，则说明有以当前元素为结尾的和为k的子数组，有prev_sum_map[prev_sum-k]个</span></span><br><span class="line">        <span class="keyword">if</span> prev_sum-k <span class="keyword">in</span> prev_sum_map:</span><br><span class="line">            <span class="comment"># 把以当前元素为结尾的和为k的子数组的数量加到map上</span></span><br><span class="line">            count+=prev_sum_map[prev_sum-k]</span><br><span class="line">        <span class="comment"># 更新当前元素前缀和在字典中的个数</span></span><br><span class="line">        prev_sum_map[prev_sum] = prev_sum_map.get(prev_sum,<span class="number">0</span>)+<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure><p>此算法时间复杂度为<code>O(N)</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个整数数组和一个整数 &lt;strong&gt;k，&lt;/strong&gt;你需要找到该数组中和为 &lt;strong&gt;k&lt;/strong&gt; 的连续的子数组的个数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数组的长度为 [1, 20,000]&lt;/li&gt;
&lt;li&gt;数组中元素的范围是 [-1000, 1000] ，且整数 &lt;strong&gt;k&lt;/strong&gt; 的范围是 [-1e7, 1e7]&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="blog" scheme="http://jiangyixiong.top/categories/blog/"/>
    
    
      <category term="Algorithm" scheme="http://jiangyixiong.top/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode笔记-用桶排序与鸽笼原则解决【164-最大间距】</title>
    <link href="http://jiangyixiong.top/2020/10/21/LeetCode%E7%AC%94%E8%AE%B0-164-%E6%9C%80%E5%A4%A7%E9%97%B4%E8%B7%9D/"/>
    <id>http://jiangyixiong.top/2020/10/21/LeetCode%E7%AC%94%E8%AE%B0-164-%E6%9C%80%E5%A4%A7%E9%97%B4%E8%B7%9D/</id>
    <published>2020-10-21T11:10:39.000Z</published>
    <updated>2021-05-25T09:10:34.170Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个无序的数组，找出数组在排序之后，相邻元素之间最大的差值。</p><p>如果数组元素个数小于 2，则返回 0。</p><ul><li>你可以假设数组中所有元素都是非负整数，且数值在 32 位有符号整数范围内。</li><li>请尝试在线性时间复杂度和空间复杂度的条件下解决此问题。</li></ul><a id="more"></a><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h4 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [3,6,9,1]</span><br><span class="line">输出: 3</span><br><span class="line">解释: 排序后的数组是 [1,3,6,9], 其中相邻元素 (3,6) 和 (6,9) 之间都存在最大差值 3。</span><br></pre></td></tr></table></figure><h4 id="示例二"><a href="#示例二" class="headerlink" title="示例二"></a>示例二</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [10]</span><br><span class="line">输出: 0</span><br><span class="line">解释: 数组元素个数小于 2，因此返回 0。</span><br></pre></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>看到数<strong>组元素全部为非负整数</strong>以及<strong>线性时间复杂度的排序</strong>就想到了桶排序。桶排序简单来说就是把元素根据大小在一次遍历中放到对应的桶中。之后将每个桶中的元素依次取出组成排序后的数组。可参考<a href="http://data.biancheng.net/view/115.html">桶排序（箱排序）原理及其时间复杂度详解</a>中的图解：</p><blockquote><p>在某个期末考试中，老师要把大家的分数排序，比如有 5 个学生，分别考 5、9、5、1、6 分（满分 10 分），从大到小排序应该是 9、6、5、5、1，大家有没有办法写一段程序随机读取 5 个数，然后对它们排序呢？</p><p>看到这个问题，我们用 5 分钟想一下该怎么办。办法当然很多，这里使用桶排序的思想来处理。</p><p>我们找到 11 个桶，分别编号为 0-10，对应 0-10 分，如</p><p><img src="/images/buckets-1.jpg" alt="img"></p><p>接着我们把这些分数按照桶的编号放入桶中，如</p><p><img src="/images/buckets-2.jpg" alt="img"></p><p>接着我们从最大编号的桶到最小编号的桶依次输出每个桶中的分数，分别是 9、6、5、5、1 了。是不是很轻松地完成排序了呢？这就是桶排序的思想。</p></blockquote><p>但桶排序的问题也较为明显：在资源分布不均匀时会占用大量的空间，他的空间复杂度是O(m)，其中m位桶的个数。</p><p>所以在此题中，我们能不能直接通过桶排序并计算最大的连续空桶数呢？代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maximumGap</span>(<span class="params">self, nums</span>) -&gt; int:</span></span><br><span class="line">    <span class="keyword">if</span> len(nums)&lt;<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="comment"># 初始化桶，桶的个数为数组中最大值</span></span><br><span class="line">    buckets = [<span class="number">0</span>]*(max(nums)+<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 把数字放入对应的桶中</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">        buckets[num]+=<span class="number">1</span></span><br><span class="line">    gap:int = <span class="number">0</span></span><br><span class="line">    max_gap:int = <span class="number">0</span></span><br><span class="line">    init = <span class="literal">False</span></span><br><span class="line">    <span class="comment"># 遍历桶并数出最大连续空桶的数量</span></span><br><span class="line">    <span class="keyword">for</span> bucket <span class="keyword">in</span> buckets:</span><br><span class="line">        gap+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> bucket&gt;<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> init:</span><br><span class="line">                init = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">elif</span> gap &gt; max_gap:</span><br><span class="line">                max_gap = gap</span><br><span class="line">            gap = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> max_gap</span><br></pre></td></tr></table></figure><p>这个很莽的算法时间复杂度为O(m+n)，空间复杂度为O(m)。（你就说是不是线性复杂度吧）</p><p>提交后果不其然在<code>[2,9999999]</code>的用例上超时了。</p><p>要优化这个算法，我们就需要考虑在一个桶中放多个元素，可是如果只是单纯的扩大桶的容量，我们还是需要在每个桶中进行排序，无法降低时间复杂度到线性。看了看LeetCode的讨论贴后，发现引入鸽笼原则（或者叫抽屉原则）可以解决这个问题，这个原则很简单也很符合常识：</p><blockquote><p>在N个鸽笼中放N-m个鸽子，则至少有m个鸽笼是空的。</p><p>在N个鸽笼中放大于N个鸽子，则至少有一个鸽笼中有多个鸽子。</p></blockquote><p>具体到本例中，我们把N个数在桶排序时放入N+1个桶，则会产生至少1个空桶。而由于所有桶的大小是一致的，所以最大间隔一定是在一个或多个连续的空桶左右产生的。例如，我们在处理数组<code>[1,2,10,9]</code>时，我们需要将<code>[1,10]</code>这个区间均匀的分割为N+1，也就是5个区间，区间大小为<code>(10-1)//5+1=2</code>,如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1,3) [3,5) [5,7) [7,9) [9,11)</span><br></pre></td></tr></table></figure><p>这里为了包含最大值，需要为整除后的值+1。之后我们把这四个数放入如上五个桶中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[1,2],[],[],[],[9,10]</span><br></pre></td></tr></table></figure><p>可以看到中间产生了3个空桶，我们只需计算每段空桶前后两个桶中前桶的最大值与后桶的最小值便可知道一个可能为最大间距的值。得到所有空桶左右的间距后取最大间距，就是我们最终需要的答案。</p><h2 id="代码（Python为例）"><a href="#代码（Python为例）" class="headerlink" title="代码（Python为例）"></a>代码（Python为例）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maximumGap</span>(<span class="params">self, nums</span>) -&gt; int:</span></span><br><span class="line">    <span class="keyword">if</span> len(nums)&lt;<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    n:int = len(nums)</span><br><span class="line">    max_num:int = max(nums)</span><br><span class="line">    min_num:int = min(nums)</span><br><span class="line">    <span class="keyword">if</span> max_num==min_num:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="comment"># 计算每个桶的大小</span></span><br><span class="line">    bucket_size:int = ((max_num-min_num)//(n+<span class="number">1</span>))+<span class="number">1</span></span><br><span class="line">    <span class="comment"># 初始化桶列表</span></span><br><span class="line">    buckets = [[] <span class="keyword">for</span> row <span class="keyword">in</span> range(n+<span class="number">1</span>)]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">        <span class="comment"># 找到数字对应的桶</span></span><br><span class="line">        index:int = (num-min_num)//bucket_size</span><br><span class="line">        <span class="comment"># 把数字放入桶中</span></span><br><span class="line">        buckets[index].append(num)</span><br><span class="line">    gap:int = <span class="number">0</span></span><br><span class="line">    max_gap:int = <span class="number">0</span></span><br><span class="line">    prev_bucket = buckets[<span class="number">0</span>]</span><br><span class="line">    gapped_with_empty_bucket = <span class="literal">False</span> </span><br><span class="line">    <span class="comment"># 遍历桶列表判断空桶前后的间距</span></span><br><span class="line">    <span class="keyword">for</span> bucket <span class="keyword">in</span> buckets:</span><br><span class="line">        <span class="comment"># 若当前桶为空桶</span></span><br><span class="line">        <span class="keyword">if</span> len(bucket) == <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 修改状态为中间有空桶</span></span><br><span class="line">            gapped_with_empty_bucket = <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 若当前桶为非空桶</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 若中间有空桶</span></span><br><span class="line">            <span class="keyword">if</span> gapped_with_empty_bucket:</span><br><span class="line">                <span class="comment"># 与上一个非空桶计算间距</span></span><br><span class="line">                gap = min(bucket)-max(prev_bucket)</span><br><span class="line">                <span class="comment"># 更新最大间距</span></span><br><span class="line">                max_gap = gap <span class="keyword">if</span> gap&gt;max_gap <span class="keyword">else</span> max_gap</span><br><span class="line">                <span class="comment"># 修改状态为中间无空桶</span></span><br><span class="line">                gapped_with_empty_bucket = <span class="literal">False</span></span><br><span class="line">            <span class="comment"># 更新上一个非空桶为当前桶</span></span><br><span class="line">            prev_bucket = bucket</span><br><span class="line">    <span class="keyword">return</span> max_gap</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个无序的数组，找出数组在排序之后，相邻元素之间最大的差值。&lt;/p&gt;
&lt;p&gt;如果数组元素个数小于 2，则返回 0。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你可以假设数组中所有元素都是非负整数，且数值在 32 位有符号整数范围内。&lt;/li&gt;
&lt;li&gt;请尝试在线性时间复杂度和空间复杂度的条件下解决此问题。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="blog" scheme="http://jiangyixiong.top/categories/blog/"/>
    
    
      <category term="Algorithm" scheme="http://jiangyixiong.top/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>分布式锁的Redis与Zookeeper实现</title>
    <link href="http://jiangyixiong.top/2020/10/12/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84Redis%E4%B8%8EZooKeeper%E5%AE%9E%E7%8E%B0/"/>
    <id>http://jiangyixiong.top/2020/10/12/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84Redis%E4%B8%8EZooKeeper%E5%AE%9E%E7%8E%B0/</id>
    <published>2020-10-12T09:44:00.000Z</published>
    <updated>2021-05-25T09:10:34.170Z</updated>
    
    <content type="html"><![CDATA[<p>在分布式系统中，会有来自于不同实例的线程访问同一个临界资源，这时我们需要一种分布式的协调技术来对线程进行调度。其中的核心实现为分布式锁。</p><a id="more"></a><h2 id="分布式锁的特性"><a href="#分布式锁的特性" class="headerlink" title="分布式锁的特性"></a>分布式锁的特性</h2><ul><li>在分布式环境下，同一个临界资源\临界操作只能同时被1个机器的1个线程访问\执行。</li><li>高可用的锁获取与锁释放</li><li>高性能的锁获取与锁释放</li><li>可重入性，同一任务可多次获取锁</li><li>具备锁失效机制</li><li>可实现非阻塞锁</li></ul><h2 id="Redis简单实现"><a href="#Redis简单实现" class="headerlink" title="Redis简单实现"></a>Redis简单实现</h2><h4 id="加锁"><a href="#加锁" class="headerlink" title="加锁"></a>加锁</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SETNX lock_id 1</span><br></pre></td></tr></table></figure><p><code>SETNX</code> 命令为“<strong>SET</strong> if <strong>N</strong>ot e<strong>X</strong>ists”的简写。当key不存在时返回1，key存在时返回0。当该key存在值时我们可以认为为对应id的资源加上了锁。在一个线程执行该命令时，如果返回0，则说明该资源已被加锁，获取锁失败。当返回1时，说明资源之前未被加锁，当前线程成功获取了锁。</p><h4 id="释放锁"><a href="#释放锁" class="headerlink" title="释放锁"></a>释放锁</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DEL lock_id</span><br></pre></td></tr></table></figure><p><code>DEL</code> 命令通过删除lock_id来释放锁，从而使其他线程在运行<code>SETNX lock_id</code>时可以获取到锁。</p><h4 id="防止死锁"><a href="#防止死锁" class="headerlink" title="防止死锁"></a>防止死锁</h4><p>如果一个线程在加锁后，还没来得及解锁便崩溃了，就会导致这个锁无人释放从而形成死锁。为了防止这种情况，我们需要给锁设置超时时间。如果简单的使用下方的语句设置超时会产生问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPIRE lock_id 30</span><br></pre></td></tr></table></figure><p>产生问的原因是，<code>SETNX</code>与<code>EXPIRE</code>两次操作之间是非原子性的，也就会导致如果线程在运行<code>SETNX</code>和<code>EXPIRE</code>之间崩溃了，会产生死锁。对此正确的解决方式为使用如下语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET lock_id 1 NX EX 30</span><br></pre></td></tr></table></figure><p>其中<code>NX</code>与<code>EX</code>为Redis在2.6.12版本后引入的<code>SET</code>命令选项，<code>NX</code>类似<code>SETNX</code>，仅在key不存在时使<code>SET</code>生效。<code>EX</code>为设置该key的过期时间。具体的选项可见官方文档<a href="http://www.redis.cn/commands/set.html">SET key value [EX seconds] [PX milliseconds] [NX|XX]</a>。</p><h4 id="防止误删"><a href="#防止误删" class="headerlink" title="防止误删"></a>防止误删</h4><p>在一些情况下可能会导致锁误删，即线程获取的锁被其他线程删除。为了防止这种情况，我们可以将锁的值设定为线程或客户端的id：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET lock_id THREAD_ID NX EX 30</span><br></pre></td></tr></table></figure><p>之后在删除前获取该锁的值，与自身id进行比较，仅在id相同时才删除锁，这样就会涉及执行两条命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET lock_id</span><br><span class="line"># 若id相同：</span><br><span class="line">DEL lock_id</span><br></pre></td></tr></table></figure><p>看到执行两条命令，我们就又发现了问题：这个操作没有原子性，如果在<code>GET</code>命令和<code>DEL</code>命令之间，锁的值发生了变化，那就还会产生误删的情况。为了解决这个问题，官方给出的<a href="https://redis.io/topics/distlock">解决方案</a>是Lua脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EVAL &quot;if redis.call(&#39;get&#39;,KEYS[1]) &#x3D;&#x3D; ARGV[1] then return redis.call(&#39;del&#39;,KEYS[1]) else return 0 end&quot; 1 lock_id THREAD_ID</span><br></pre></td></tr></table></figure><p>其中<code>EVAL</code>第一个参数为Lua语句，第二个参数为个数(此例中为一个key和一个参数)。之后的参数为key和传入Lua的参数。Redis执行Lua脚本具有原子性，执行的Lua如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> redis.call(<span class="string">&quot;get&quot;</span>,KEYS[<span class="number">1</span>]) == ARGV[<span class="number">1</span>] <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">return</span> redis.call(<span class="string">&quot;del&quot;</span>,KEYS[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>至此我们完成了简单的Redis锁实现。</p><h2 id="ZooKeeper分布式锁原理"><a href="#ZooKeeper分布式锁原理" class="headerlink" title="ZooKeeper分布式锁原理"></a>ZooKeeper分布式锁原理</h2><h4 id="ZooKeeper的四种节点"><a href="#ZooKeeper的四种节点" class="headerlink" title="ZooKeeper的四种节点"></a>ZooKeeper的四种节点</h4><ul><li>持久节点（PERSISTENT）默认的节点类型。创建节点的客户端与 Zookeeper 断开连接后，该节点依旧存在。</li><li>持久节点顺序节点（PERSISTENT_SEQUENTIAL）所谓顺序节点，就是在创建节点时，Zookeeper 根据创建的时间顺序给该节点名称进行编号。</li><li>临时节点（EPHEMERAL）和持久节点相反，当创建节点的客户端与 Zookeeper 断开连接后，临时节点会被删除。</li><li>临时顺序节点（EPHEMERAL_SEQUENTIAL）顾名思义，临时顺序节点结合和临时节点和顺序节点的特点：在创建节点时，Zookeeper 根据创建的时间顺序给该节点名称进行编号；当创建节点的客户端与 Zookeeper 断开连接后，临时节点会被删除。</li></ul><h4 id="加锁-1"><a href="#加锁-1" class="headerlink" title="加锁"></a>加锁</h4><p>首先，在 Zookeeper 当中创建一个持久节点 。当第一个客户端想要获得锁时，需要在这个节点下面创建一个<strong>临时顺序节点</strong> Lock1。</p><p>之后，Client1 查找 该节点下面所有的临时顺序节点并排序，判断自己所创建的节点 Lock1 是不是顺序最靠前的一个。如果是第一个节点，则成功获得锁。</p><p>Client2 查找下面所有的临时顺序节点并排序，判断自己所创建的节点 Lock2 是不是顺序最靠前的一个，结果发现节点 Lock2 并不是最小的。于是，Client2 向排序仅比它靠前的节点 Lock1 注册 Watcher，用于监听 Lock1 节点是否存在。这意味着 Client2 抢锁失败，进入了等待状态。这便形成了一个等待队列</p><h4 id="解锁"><a href="#解锁" class="headerlink" title="解锁"></a>解锁</h4><p>当任务完成时，Client1 会显示调用删除节点 Lock1 的指令。由于 Client2 一直监听着 Lock1 的存在状态，当 Lock1 节点被删除，Client2 会立刻收到通知。这时候 Client2 会再次查询 父节点下面的所有节点，确认自己创建的节点 Lock2 是不是目前最小的节点。如果是最小，则 Client2 顺理成章获得了锁。</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZkLockImpl</span> <span class="keyword">implements</span> <span class="title">ZkLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(ZkLock.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String lockPath;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ZkClient zkClient;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ThreadLocal&lt;String&gt; curNode = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ThreadLocal&lt;String&gt; preNode = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructor for basic ZkLock</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servers Servers list for zookeeper, see &#123;<span class="doctag">@link</span> ZkClient#ZkClient(java.lang.String, int, int)&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sessionTimeout Session Timeout for zookeeper, see &#123;<span class="doctag">@link</span> ZkClient#ZkClient(java.lang.String, int, int)&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connectionTimeout Connection Timeout for zookeeper, see &#123;<span class="doctag">@link</span> ZkClient#ZkClient(java.lang.String, int, int)&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockPath the path of this lock in zookeeper</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZkLockImpl</span><span class="params">(String servers, <span class="keyword">int</span> sessionTimeout, <span class="keyword">int</span> connectionTimeout, String lockPath)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lockPath = lockPath;</span><br><span class="line">        <span class="keyword">this</span>.zkClient = <span class="keyword">new</span> ZkClient(servers, sessionTimeout, connectionTimeout);</span><br><span class="line">        <span class="keyword">if</span>(!zkClient.exists(lockPath))&#123;</span><br><span class="line">            zkClient.createPersistent(lockPath);</span><br><span class="line">            LOG.info(<span class="string">&quot;Connected to [&#123;&#125;], lock path:[&#123;&#125;] created&quot;</span>,servers,lockPath);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            LOG.info(<span class="string">&quot;Connected to [&#123;&#125;], lock path:[&#123;&#125;] existed&quot;</span>,servers,lockPath);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Try if the thread occupied lock currently.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Ture if thread occupied the lock</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; lockQueue = zkClient.getChildren(lockPath);</span><br><span class="line">        Collections.sort(lockQueue);</span><br><span class="line">        <span class="keyword">if</span>(lockQueue.size()&gt;<span class="number">0</span>&amp;&amp;(lockPath+<span class="string">&quot;/&quot;</span>+lockQueue.get(<span class="number">0</span>)).equals(curNode.get()))&#123;</span><br><span class="line">            LOG.debug(<span class="string">&quot;Lock [&#123;&#125;] acquired&quot;</span>,lockPath);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> index = lockQueue.indexOf(curNode.get().substring(lockPath.length()+<span class="number">1</span>));</span><br><span class="line">            preNode.set(lockPath+<span class="string">&quot;/&quot;</span>+lockQueue.get(index-<span class="number">1</span>));</span><br><span class="line">            LOG.debug(<span class="string">&quot;Lock [&#123;&#125;] is occupied, set preNode to [&#123;&#125;]&quot;</span>,lockPath,preNode.get());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        IZkDataListener listener = <span class="keyword">new</span> IZkDataListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDataChange</span><span class="params">(String dataPath, Object data)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDataDeleted</span><span class="params">(String dataPath)</span> </span>&#123;</span><br><span class="line">                LOG.debug(<span class="string">&quot;Node [&#123;&#125;] has been deleted&quot;</span>,dataPath);</span><br><span class="line">                latch.countDown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span>==curNode.get())&#123;</span><br><span class="line">            curNode.set(zkClient.createEphemeralSequential(lockPath+<span class="string">&quot;/&quot;</span>,<span class="string">&quot;Lock&quot;</span>));</span><br><span class="line">            LOG.debug(<span class="string">&quot;curNode [&#123;&#125;] has been created&quot;</span>,curNode.get());</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LockException(<span class="string">&quot;ZkLock is not reentrant&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!tryLock()&amp;&amp;zkClient.exists(preNode.get()))&#123;</span><br><span class="line">            zkClient.subscribeDataChanges(preNode.get(),listener);</span><br><span class="line">            <span class="keyword">while</span>(zkClient.exists(preNode.get())&amp;&amp;!tryLock())&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    LOG.debug(<span class="string">&quot;Thread blocked in lock [&#123;&#125;]&quot;</span>,lockPath);</span><br><span class="line">                    latch.await();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    LOG.error(e.getMessage());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            zkClient.unsubscribeDataChanges(preNode.get(),listener);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">releaseLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span>!=curNode.get()&amp;&amp;zkClient.exists(curNode.get())&amp;&amp;tryLock())&#123;</span><br><span class="line">            <span class="keyword">if</span>(zkClient.delete(curNode.get()))&#123;</span><br><span class="line">                LOG.debug(<span class="string">&quot;Lock [&#123;&#125;] released, Node [&#123;&#125;] deleted&quot;</span>,lockPath,curNode.get());</span><br><span class="line">                curNode.remove();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        LOG.error(<span class="string">&quot;Illegally lock release&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>项目见我的<a href="https://github.com/GaryXiongxiong/ZkLock">GitHub</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="http://www.imodou.com.cn/article/67">http://www.imodou.com.cn/article/67</a></p><p><a href="https://www.funtl.com/zh/apache-dubbo-zookeeper/Zookeeper-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81.html#zookeeper-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E5%8E%9F%E7%90%86">https://www.funtl.com/zh/apache-dubbo-zookeeper/Zookeeper-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81.html#zookeeper-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E5%8E%9F%E7%90%86</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在分布式系统中，会有来自于不同实例的线程访问同一个临界资源，这时我们需要一种分布式的协调技术来对线程进行调度。其中的核心实现为分布式锁。&lt;/p&gt;
    
    </summary>
    
    
      <category term="blog" scheme="http://jiangyixiong.top/categories/blog/"/>
    
    
      <category term="分布式" scheme="http://jiangyixiong.top/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JWT原理与使用场景示例</title>
    <link href="http://jiangyixiong.top/2020/09/22/JWT%E5%8E%9F%E7%90%86%E4%B8%8E%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%E7%A4%BA%E4%BE%8B/"/>
    <id>http://jiangyixiong.top/2020/09/22/JWT%E5%8E%9F%E7%90%86%E4%B8%8E%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%E7%A4%BA%E4%BE%8B/</id>
    <published>2020-09-22T15:09:15.000Z</published>
    <updated>2021-05-25T09:10:34.170Z</updated>
    
    <content type="html"><![CDATA[<p>JWT全称 JSON Web Token，是一种紧凑的，URL安全的请求表示方式(定义见<a href="https://tools.ietf.org/html/rfc7519">RFC7519</a>)。</p><a id="more"></a><h2 id="JWT的组成原理"><a href="#JWT的组成原理" class="headerlink" title="JWT的组成原理"></a>JWT的组成原理</h2><p>一组JWT包含三个部分：HEADER，PAYLOAD和SIGNATURE，之间由<code>.</code>分割，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c</span><br></pre></td></tr></table></figure><p>在讲这三个部分如何生成之前，有三个概念需要明确：编码、签名、加密：</p><h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4><p>编码是指将内容通过一定的算法将内容转换为更方便传输的形式。我们在开发中较为常见的是Base编码。编码的特征是可以进行解码，<strong>也就是说经过编码的数据任何人都可以通过相同的算法进行解码并获取到明文</strong>。所以所谓“Base64加密”等说法都是不准确的。</p><h4 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h4><p>签名是通过哈希算法生成特征码以防止内容信息被篡改，在我们日常开发中很常见到，如MD5，SHA等等。我们知道哈希算法的特点是正向快，逆向困难。所以<strong>签名通常是不可逆的</strong>。通过核对签名是否一致就可基本判断出原始内容是否有被修改。</p><h4 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h4><p>说完了前两种常被误称为“加密”的算法，再说说什么才是加密。严格来说，加密是通过特定算法，配合密钥使内容变为不可读的密文。之后密文可通过特定的方法配合密钥解密为明文。加密可分为对称加密（如AES）与非对称加密（RSA）。</p><h4 id="JWT的原理"><a href="#JWT的原理" class="headerlink" title="JWT的原理"></a>JWT的原理</h4><p>说完了3个概念，我们来看看JWT的生成原理。从JWT的定义中可知，JWT的三部分组成来源为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sign = HMACSHA256(base64.encode(header) + <span class="string">&#x27;.&#x27;</span> + base64.encode(payload), secret)</span><br><span class="line"><span class="keyword">const</span> jwt = base64.encode(header) + <span class="string">&#x27;.&#x27;</span> + base64.encode(payload) + <span class="string">&#x27;.&#x27;</span> + sign</span><br></pre></td></tr></table></figure><p>其中JWT的HEADER与PAYLOAD为明文的BASE64<strong>编码</strong>。SIGNATURE为前两者拼接后配合密钥生成的<strong>签名</strong>。这个过程中不涉及加密，我们可以轻松的通过JWT解码得到HEADER与PAYLOAD的明文。故我们不应把JWT当作加密手段来传输敏感信息。而SIGNATURE为前两者信息的签名，由于签名是不可逆的，我们不可能通过签名得到HEADER与PAYLOAD，只能用SIGNATURE与密钥来校验HEADER与PAYLOAD是否被篡改。</p><h4 id="JWT的用途"><a href="#JWT的用途" class="headerlink" title="JWT的用途"></a>JWT的用途</h4><p>知道了JWT的用途，那他的用途也就很明确了。由于第三方不能再没有密钥的情况下篡改HEADER与PAYLOAD，那么JWT可以作为存储用户信息的TOKEN在用户鉴权时颁发给用户。之后用户可以在请求中带上该TOKEN给服务端来验明正身。</p><h2 id="JWT的使用场景"><a href="#JWT的使用场景" class="headerlink" title="JWT的使用场景"></a>JWT的使用场景</h2><h4 id="发送给用户的重置密码与激活账户等链接"><a href="#发送给用户的重置密码与激活账户等链接" class="headerlink" title="发送给用户的重置密码与激活账户等链接"></a>发送给用户的重置密码与激活账户等链接</h4><p>在通过邮箱重置密码时，应用通常会发给我们一个地址，如<code>http://jiangyixiong.top/reset_password?uid=xxxx</code>，在这里如果用户的身份id以明文放在链接中，用户就很可能可以通过修改地址中的uid参数来越权修改他人账户信息。在这里我们可以以uid等信息作为PAYLOAD，服务端以密钥生成JWT，并放在地址参数中。用户虽然依旧可以通过Base64解码获得PAYLOAD中的参数，但无法修改。因为一旦参数被修改，将无法通过服务端的签名校验。由于客户端没有生成JWT的密钥，也无法伪造新的签名。</p><h4 id="作为REST-API的鉴权TOKEN"><a href="#作为REST-API的鉴权TOKEN" class="headerlink" title="作为REST API的鉴权TOKEN"></a>作为REST API的鉴权TOKEN</h4><p>在需要权限控制的REST API中，可以要求调用方在调用时提供鉴权时颁发的JWT，该JWT的PAYLOAD中会包含调用方的角色信息，权限信息，该JWT的过期时间等。服务端接收到请求后可使用密钥校验Token的有效性以确定请求发起方的身份。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://jishuin.proginn.com/p/763bfbd2d4b6">https://jishuin.proginn.com/p/763bfbd2d4b6</a></p><p><a href="https://blog.csdn.net/qq_28165595/article/details/80214994">https://blog.csdn.net/qq_28165595/article/details/80214994</a></p><p><a href="https://blog.csdn.net/achenyuan/article/details/80829401">https://blog.csdn.net/achenyuan/article/details/80829401</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JWT全称 JSON Web Token，是一种紧凑的，URL安全的请求表示方式(定义见&lt;a href=&quot;https://tools.ietf.org/html/rfc7519&quot;&gt;RFC7519&lt;/a&gt;)。&lt;/p&gt;
    
    </summary>
    
    
      <category term="blog" scheme="http://jiangyixiong.top/categories/blog/"/>
    
    
      <category term="安全" scheme="http://jiangyixiong.top/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>跨域请求与常见解决方式</title>
    <link href="http://jiangyixiong.top/2020/09/21/%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E4%B8%8E%E5%B8%B8%E8%A7%81%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F/"/>
    <id>http://jiangyixiong.top/2020/09/21/%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E4%B8%8E%E5%B8%B8%E8%A7%81%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F/</id>
    <published>2020-09-21T10:57:40.000Z</published>
    <updated>2021-05-25T09:10:34.170Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="/2020/09/19/%E5%B8%B8%E8%A7%81%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93-1/">【常见安全测试项目总结-1】</a>这篇文章中，有提到通过CSRF攻击伪造用户请求。在学习的时候有想到既然有浏览器的同源策略，为什么还会有CSRF攻击呢？在我的记忆中，浏览器同源策略会阻止向非同源地址发送AJAX请求，在这种情况下，恶意网站伪造的用户请求是无法发送到目标站点的呀？经过进一步学习后发现：在同源策略下，浏览器发现跨域请求时，<strong>请求能发出去，服务端能收到请求并正常返回结果，只是结果被浏览器拦截了。</strong>看到这里发现自己对于跨域问题的理解还是有些肤浅，故又看了些文章写下了这篇笔记。</p><a id="more"></a><h2 id="什么是同源策略"><a href="#什么是同源策略" class="headerlink" title="什么是同源策略"></a>什么是同源策略</h2><h4 id="同源"><a href="#同源" class="headerlink" title="同源"></a>同源</h4><p>同源指目标的<strong>协议</strong>，<strong>域名</strong>，<strong>子域名</strong>，<strong>端口</strong> 均为一致，即为同源。</p><h4 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h4><p>同源策略对于非同源、跨域的请求设置了各种限制。这种限制并不能简单的理解为禁止获取非同源的资源（<code>&lt;img&gt;</code>,<code>&lt;link&gt;</code>,<code>&lt;script&gt;</code>标签都可以请求到非同源内容），也不能理解为禁止跨域请求（因为AJAX确实发出去了，只是服务端的响应被屏蔽了，我就是掉进了这个误区中）。准确的说，同源策略的限制如下：</p><blockquote><p>限制获取cookies、LocalStorage等存储</p><p>限制DOM节点</p><p>限制AJAX的请求结果获取</p></blockquote><p>实例使用时，我遇到的较为常见的触发这三条限制的场景为：</p><ul><li>通过AJAX调用跨域API</li><li>在iframe中试图修改外界DOM</li></ul><h2 id="跨域可用方案"><a href="#跨域可用方案" class="headerlink" title="跨域可用方案"></a>跨域可用方案</h2><p>那么当我们的需求遇到了同源策略的限制，应该如何解决呢？这里转述了下<a href="https://juejin.im/post/6844903767226351623">大佬</a>总结的一些跨域解决方案：</p><h4 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h4><p>JSONP的原理是利用<code>&lt;script&gt;</code>标签没有同源限制的特性，通过<code>&lt;script&gt;</code>标签获取服务端动态生成的JSON数据。举例如下：</p><p>后端将返回的JSON作为参数放入一个与前端约定好的回调方法中。如约定回调方法名为callback，则后端返回以下内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;callback(&quot;</span>+JSONStr+<span class="string">&quot;)&quot;</span></span><br></pre></td></tr></table></figure><p>前端则通过向页面写入<code>&lt;script&gt;</code>标签的方式来向后端地址发送get请求：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">&#123; url, params, callback &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> script = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">    <span class="built_in">window</span>[callback] = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">      resolve(data)</span><br><span class="line">      <span class="built_in">document</span>.body.removeChild(script)</span><br><span class="line">    &#125;</span><br><span class="line">    params = &#123; ...params, callback &#125; <span class="comment">// wd=b&amp;callback=show</span></span><br><span class="line">    <span class="keyword">let</span> arrs = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> params) &#123;</span><br><span class="line">      arrs.push(<span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;params[key]&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    script.src = <span class="string">`<span class="subst">$&#123;url&#125;</span>?<span class="subst">$&#123;arrs.join(<span class="string">&#x27;&amp;&#x27;</span>)&#125;</span>`</span></span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(script)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jsonp(&#123;</span><br><span class="line">  url: <span class="string">&#x27;http://localhost:3000/say&#x27;</span>,</span><br><span class="line">  params: &#123; <span class="attr">wd</span>: <span class="string">&#x27;Iloveyou&#x27;</span> &#125;,</span><br><span class="line">  callback: <span class="string">&#x27;callback&#x27;</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>本质上是向页面中引入了<code>callback(JSONStr)</code>这句函数调用，调用我们在前端中预先定义好的callback函数，而数据作为参数传入了前端。</p><p>以上的调用方式较为麻烦，jQuery则为我们提供了封装好的JSONP调用方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">url:<span class="string">&quot;http://crossdomain.com/jsonServerResponse&quot;</span>,</span><br><span class="line">dataType:<span class="string">&quot;jsonp&quot;</span>,</span><br><span class="line">type:<span class="string">&quot;get&quot;</span>,</span><br><span class="line">jsonpCallback:<span class="string">&quot;show&quot;</span>,</span><br><span class="line">jsonp:<span class="string">&quot;callback&quot;</span>,</span><br><span class="line">success:<span class="function"><span class="keyword">function</span> (<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data);&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h4><p>CORS需要浏览器与后端共同支持。浏览器会自动进行CORS通信，而后端则需要配置。</p><p>后端需要通过设置Access-Control-Allow-Origin来开启CORS。这个属性用于设置那些域名可以访问该资源。</p><p>前端在通过CORS发送跨域请求时，分为简单请求与发杂请求两种情况。简单请求指方法为<code>GET</code> / <code>post</code> /  <code>HEAD</code>之一，且Content-Type为<code>test/plain</code> / <code>multipart/form-data</code> /  <code>application/x-www-form-urlencoded</code>之一。其余的请求为复杂请求，复杂请求在通信前会增加一起http请求，来确定服务端是否允许跨域请求。</p><h4 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h4><p>既然我们知道同源策略限制的是非同源的请求，那么只要我们通过Nginx等支持反向代理的服务器将我们需要的地址代理到同一域名端口下，非同源请求自然就变成了同源请求。</p><p>我们需要做的是反向代理目标接口，并且修改cookie中的domain信息，以供当前域写入cookie，实现跨域带cookie请求。示例Nginx配置如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// proxy服务器</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen       81;</span><br><span class="line">    server_name  www.domain1.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass   http://www.domain2.com:8080;  #反向代理</span><br><span class="line">        proxy_cookie_domain www.domain2.com www.domain1.com; #修改cookie里域名</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line"></span><br><span class="line">        # 当用webpack-dev-server等中间件代理接口访问nignx时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用</span><br><span class="line">        add_header Access-Control-Allow-Origin http://www.domain1.com; </span><br><span class="line">        #当前端只跨域不带cookie时，可为*</span><br><span class="line">        add_header Access-Control-Allow-Credentials true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上三种是最主流的解决跨域访问的方案了，其余还有一些方法，个人觉得不是很常用，感兴趣的朋友可以从文末的引用中看下大佬的原文。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://juejin.im/post/6844903767226351623">https://juejin.im/post/6844903767226351623</a></p><p><a href="https://segmentfault.com/a/1190000020962174">https://segmentfault.com/a/1190000020962174</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;/2020/09/19/%E5%B8%B8%E8%A7%81%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93-1/&quot;&gt;【常见安全测试项目总结-1】&lt;/a&gt;这篇文章中，有提到通过CSRF攻击伪造用户请求。在学习的时候有想到既然有浏览器的同源策略，为什么还会有CSRF攻击呢？在我的记忆中，浏览器同源策略会阻止向非同源地址发送AJAX请求，在这种情况下，恶意网站伪造的用户请求是无法发送到目标站点的呀？经过进一步学习后发现：在同源策略下，浏览器发现跨域请求时，&lt;strong&gt;请求能发出去，服务端能收到请求并正常返回结果，只是结果被浏览器拦截了。&lt;/strong&gt;看到这里发现自己对于跨域问题的理解还是有些肤浅，故又看了些文章写下了这篇笔记。&lt;/p&gt;
    
    </summary>
    
    
      <category term="blog" scheme="http://jiangyixiong.top/categories/blog/"/>
    
    
      <category term="安全" scheme="http://jiangyixiong.top/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode笔记 二叉树的序列化与反序列化</title>
    <link href="http://jiangyixiong.top/2020/09/19/LeetCode%E7%AC%94%E8%AE%B0-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://jiangyixiong.top/2020/09/19/LeetCode%E7%AC%94%E8%AE%B0-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2020-09-19T15:16:24.000Z</published>
    <updated>2021-05-25T09:10:34.170Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>序列化是将一个数据结构或者对象转换为连续的比特位的操作，进而可以将转换后的数据存储在一个文件或者内存中，同时也可以通过网络传输到另一个计算机环境，采取相反方式重构得到原数据。</p><p>请设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 / 反序列化算法执行逻辑，你只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。</p><p>示例: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">你可以将以下二叉树：</span><br><span class="line"></span><br><span class="line">    1</span><br><span class="line">   &#x2F; \</span><br><span class="line">  2   3</span><br><span class="line">     &#x2F; \</span><br><span class="line">    4   5</span><br><span class="line"></span><br><span class="line">序列化为 &quot;[1,2,3,null,null,4,5]&quot;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree">https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>大体思路为BFS，不过过程中需要处理字节点为null的情况。所以突发奇想引入Java中的Optional类来简化算法</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Codec</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">serialize</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span>==root)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;[]&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Queue&lt;Optional&lt;TreeNode&gt;&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">        queue.offer(Optional.of(root));</span><br><span class="line">        <span class="keyword">int</span> nullCounter = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            Optional&lt;TreeNode&gt; curNode = queue.poll();</span><br><span class="line">            <span class="keyword">if</span>(curNode.isEmpty())&#123;</span><br><span class="line">                nullCounter--;</span><br><span class="line">                sb.append(<span class="string">&quot;null,&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                Optional&lt;TreeNode&gt; left = Optional.ofNullable(curNode.get().left);</span><br><span class="line">                Optional&lt;TreeNode&gt; right = Optional.ofNullable(curNode.get().right);</span><br><span class="line">                <span class="keyword">if</span>(left.isEmpty())&#123;</span><br><span class="line">                    nullCounter++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(right.isEmpty())&#123;</span><br><span class="line">                    nullCounter++;</span><br><span class="line">                &#125;</span><br><span class="line">                queue.offer(left);</span><br><span class="line">                queue.offer(right);</span><br><span class="line">                sb.append(curNode.get().val+<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nullCounter==queue.size())&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sb.delete(sb.length()-<span class="number">1</span>,sb.length());</span><br><span class="line">        sb.append(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">deserialize</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        data = data.replace(<span class="string">&quot;[&quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;]&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        LinkedList&lt;String&gt; elements = <span class="keyword">new</span> LinkedList&lt;&gt;(Arrays.asList(data.split(<span class="string">&quot;,&quot;</span>)));</span><br><span class="line">        Queue&lt;Optional&lt;TreeNode&gt;&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        String rootElement = elements.pollFirst();</span><br><span class="line">        <span class="keyword">if</span>(rootElement==<span class="keyword">null</span>||<span class="string">&quot;null&quot;</span>.equals(rootElement)||<span class="string">&quot;&quot;</span>.equals(rootElement))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(Integer.parseInt(rootElement));</span><br><span class="line">        queue.offer(Optional.ofNullable(root));</span><br><span class="line">        <span class="keyword">while</span>(!elements.isEmpty()&amp;&amp;!queue.isEmpty())&#123;</span><br><span class="line">            Optional&lt;TreeNode&gt; curNode = queue.poll();</span><br><span class="line">            <span class="keyword">if</span>(!curNode.isEmpty())&#123;</span><br><span class="line">                String left = elements.poll();</span><br><span class="line">                String right = elements.poll();</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">null</span>!=left&amp;&amp;!<span class="string">&quot;null&quot;</span>.equals(left))&#123;</span><br><span class="line">                    curNode.get().left = <span class="keyword">new</span> TreeNode(Integer.parseInt(left));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    curNode.get().left = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">null</span>!=right&amp;&amp;!<span class="string">&quot;null&quot;</span>.equals(right))&#123;</span><br><span class="line">                    curNode.get().right = <span class="keyword">new</span> TreeNode(Integer.parseInt(right));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    curNode.get().right = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                queue.offer(Optional.ofNullable(curNode.get().left));</span><br><span class="line">                queue.offer(Optional.ofNullable(curNode.get().right));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Your Codec object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment">// Codec codec = new Codec();</span></span><br><span class="line"><span class="comment">// codec.deserialize(codec.serialize(root));</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;序列化是将一个数据结构或者对象转换为连续的比特位的操作，进而可以将转换后的数据存储在一个文件或者内存中，同时也可以通过网络传输到另一个计算机
      
    
    </summary>
    
    
      <category term="blog" scheme="http://jiangyixiong.top/categories/blog/"/>
    
    
      <category term="Algorithm" scheme="http://jiangyixiong.top/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>常见安全测试项目总结 - 1</title>
    <link href="http://jiangyixiong.top/2020/09/19/%E5%B8%B8%E8%A7%81%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93-1/"/>
    <id>http://jiangyixiong.top/2020/09/19/%E5%B8%B8%E8%A7%81%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93-1/</id>
    <published>2020-09-19T14:26:00.000Z</published>
    <updated>2021-05-25T09:10:34.170Z</updated>
    
    <content type="html"><![CDATA[<p>最近工作中接触到了一家安全公司出具的安全扫描报告，感觉其中所列的安全检查事项与常见漏洞比较齐全，故记录下以供之后学习。</p><a id="more"></a><h2 id="SQL注入攻击"><a href="#SQL注入攻击" class="headerlink" title="SQL注入攻击"></a>SQL注入攻击</h2><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><blockquote><p>SQL注入攻击主要是由于程序员在开发过程中没有对客户端所传输到服务器端的参数进行严格的安全检查，同时SQL语句的执行引用了该参数，并且SQL语句采用字符串拼接的方式执行时，攻击者将可能在参数中插入恶意的SQL查询语句，导致服务器执行了该恶意SQL语句。SQL注入漏洞主要影响是攻击者可利用该漏洞窃取数据库中的任意内容，在某些场景下，攻击者将有可能获得数据库服务器的完全控制权限。</p></blockquote><h4 id="典型示例："><a href="#典型示例：" class="headerlink" title="典型示例："></a>典型示例：</h4><p>如果在代码中直接拼接SQL，则可能产生此类漏洞。例如，我们接收一个用户输入的产品名称并从数据库中取出相关产品返回。如果我们使用拼接字符串：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String SQLQuery = <span class="string">&quot;SELECT * FROM product WHERE product_name =&quot;</span> + userInput + <span class="string">&quot;;&quot;</span></span><br></pre></td></tr></table></figure><p>这时如果用户输入为<code>&#39;test&#39;;DROP table product--</code>，那么最终拼接成的字符串将成为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> product_name = <span class="string">&#x27;test&#x27;</span>; <span class="keyword">DROP</span> <span class="keyword">table</span> product <span class="comment">--;</span></span><br></pre></td></tr></table></figure><p>或者，攻击者可以通过输入追加条件，如<code>&#39;test&#39; OR 1=1</code>拉取整张product表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> product_name = <span class="string">&#x27;test&#x27;</span> <span class="keyword">OR</span> <span class="number">1</span>=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="CSRF跨站伪造请求"><a href="#CSRF跨站伪造请求" class="headerlink" title="CSRF跨站伪造请求"></a>CSRF跨站伪造请求</h2><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><blockquote><p> CSRF（Cross-Site Request Forgery，跨站点伪造请求）是一种网络攻击方式，该攻击可以在用户毫不知情的情况下以用户自身的名义伪造请求发送给受攻击站点，从而在未授权的情况下执行在权限保护之下的操作。具体来讲，可以这样理解CSRF攻击：攻击者盗用了你的身份，以你的名义发送恶意请求，对服务器来说这个请求是完全合法的，但是却完成了攻击者所期望的一个操作，比如以你的名义发送邮件、发消息，盗取你的账号，添加系统管理员，甚至于购买商品、虚拟货币转账等。  </p></blockquote><h4 id="典型示例"><a href="#典型示例" class="headerlink" title="典型示例"></a>典型示例</h4><p>银行网站 A，它以 GET 请求来完成银行转账的操作，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.mybank.com&#x2F;Transfer.php?toBankId&#x3D;11&amp;money&#x3D;1000</span><br></pre></td></tr></table></figure><p>危险网站 B，它里面有一段 HTML 的代码如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">http://www.mybank.com/Transfer.php?toBankId</span>=<span class="string">11&amp;money</span>=<span class="string">1000</span>&gt;</span></span><br></pre></td></tr></table></figure><p>首先，你登录了银行网站 A ，然后访问危险网站 B ，噢，这时你会发现你的银行账户少了 1000 块…</p><h2 id="XSS跨站脚本攻击"><a href="#XSS跨站脚本攻击" class="headerlink" title="XSS跨站脚本攻击"></a>XSS跨站脚本攻击</h2><h4 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h4><blockquote><p>跨站脚本攻击(Cross Site Scripting)，为不和层叠样式表(Cascading  Style Sheets, CSS)的缩写混淆，故将跨站脚本攻击缩写为XSS。恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。在不同场景下，XSS有相应不同的表现形式，主要分为反射型、存储型以及DOM型的跨站脚本攻击，所造成的影响主要是窃取用户登录凭证（Cookies）、挂马攻击、页面访问挟持等。  </p></blockquote><h4 id="典型示例-1"><a href="#典型示例-1" class="headerlink" title="典型示例"></a>典型示例</h4><p>在一些留言或者允许用户输入富文本并展示在页面上的地方，如果不做关键html标签的拦截，用户将可以通过输入<code>&lt;script&gt;</code>标签来向页面注入脚本。这些脚本可以拿到cookie、代用户发出请求、篡改页面内容，从而达成攻击效果。</p><h2 id="SSRF-服务端请求伪造"><a href="#SSRF-服务端请求伪造" class="headerlink" title="SSRF 服务端请求伪造"></a>SSRF 服务端请求伪造</h2><h4 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h4><blockquote><p>SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成并由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）<br>SSRF 形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。比如从指定URL地址获取网页文本内容，加载指定地址的图片，下载等等。最终将可能导致，攻击者可通过外网服务器端利用该漏洞访问内网服务器端的资源。</p></blockquote><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>如某些网站提供网页转码、图片待下载、在线翻译等功能，如果存在SSRF漏洞则可以通过篡改请求地址获取服务器本地文件或请求内网资源，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.xingkonglangzi.com&#x2F;ssrf.php?url&#x3D;file&#x2F;&#x2F;&#x2F;c.&#x2F;windows&#x2F;win.ini </span><br></pre></td></tr></table></figure><h2 id="任意文件上传"><a href="#任意文件上传" class="headerlink" title="任意文件上传"></a>任意文件上传</h2><h4 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h4><blockquote><p>任意文件上传漏洞主要是由于程序员在开发文件上传功能时，没有考虑对文件格式后缀的合法性进行校验或只考虑在应用前端（Web浏览器端）通过javascript进行后缀校验，攻击者可上传一个包含恶意代码的动态脚本（如jsp、asp、php、aspx文件后缀）到服务器上，攻击者访问该脚本时服务器将对包含恶意代码的动态脚本解析，最终执行相应的恶意代码。该漏洞最终将可能直接影响应用系统的服务器安全，攻击者可通过所上传的脚本完全控制服务器。  </p></blockquote><h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><p>当网站提供文件上传服务且未限制文件类型，而上传的目录又恰好有脚本执行权限，那么攻击者就可以通过编写恶意脚本并上传执行来完成攻击</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> <span class="keyword">import</span>=<span class="string">&quot;java.io.File&quot;</span>%&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=utf-8&quot;</span> pageEncoding=<span class="string">&quot;utf-8&quot;</span>%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    String root = request.getServletContext().getRealPath(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    out.write(<span class="string">&quot;系统部署绝对路径:&quot;</span>+root);</span><br><span class="line">    File file = <span class="keyword">new</span> File(root+<span class="string">&quot;/index.jsp&quot;</span>);</span><br><span class="line">    file.delete();</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><blockquote><p><a href="https://www.jianshu.com/p/64a413ada155">https://www.jianshu.com/p/64a413ada155</a></p><p><a href="https://blog.csdn.net/tanzhen1991910/article/details/53260446">https://blog.csdn.net/tanzhen1991910/article/details/53260446</a></p><p><a href="https://websec.readthedocs.io/zh/latest/vuln/ssrf.html">https://websec.readthedocs.io/zh/latest/vuln/ssrf.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近工作中接触到了一家安全公司出具的安全扫描报告，感觉其中所列的安全检查事项与常见漏洞比较齐全，故记录下以供之后学习。&lt;/p&gt;
    
    </summary>
    
    
      <category term="blog" scheme="http://jiangyixiong.top/categories/blog/"/>
    
    
      <category term="安全" scheme="http://jiangyixiong.top/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 读取配置字符串中转义字符的小坑</title>
    <link href="http://jiangyixiong.top/2020/09/09/Spring-Boot-%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6%E7%9A%84%E5%B0%8F%E5%9D%91/"/>
    <id>http://jiangyixiong.top/2020/09/09/Spring-Boot-%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6%E7%9A%84%E5%B0%8F%E5%9D%91/</id>
    <published>2020-09-09T19:30:03.000Z</published>
    <updated>2021-05-25T09:10:34.170Z</updated>
    
    <content type="html"><![CDATA[<p>今天遇到一个问题，从配置中读取的字符串内容中的<code>\n</code>不换行，类似如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">wechat:</span></span><br><span class="line">    <span class="attr">message:</span></span><br><span class="line">        <span class="attr">error:</span> <span class="string">出现如下错误：\n</span> <span class="number">1</span><span class="string">.错误1</span> <span class="string">\n</span> <span class="number">2</span><span class="string">.错误2</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;wechat.message.error&#125;&quot;)</span></span><br><span class="line">String errorMessage;</span><br></pre></td></tr></table></figure><p>得到的<code>errorMessage</code>的值为<code>&quot;出现如下错误：\n 1.错误1 \n 2.错误2&quot;</code>其中<code>\n</code>作为字符显示，并不能换行。一开始以为是View曾解析的问题，折腾半天后发现，在Spring Boot读取配置时，会将配置字符串中的<code>\n</code>作为字符读入，等价于<code>\\n</code>。</p><p>解决该问题也很简单，在配置文件中用引号包裹包含转义字符的字符串即可：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">wechat:</span></span><br><span class="line">    <span class="attr">message:</span></span><br><span class="line">        <span class="attr">error:</span> <span class="string">&quot;出现如下错误：\n 1.错误1 \n 2.错误2&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天遇到一个问题，从配置中读取的字符串内容中的&lt;code&gt;\n&lt;/code&gt;不换行，类似如下：&lt;/p&gt;
&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1
      
    
    </summary>
    
    
      <category term="blog" scheme="http://jiangyixiong.top/categories/blog/"/>
    
    
      <category term="Spring Boot" scheme="http://jiangyixiong.top/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Elastic Search学习笔记一 - Docker安装 Elastic Search 并快速开始</title>
    <link href="http://jiangyixiong.top/2020/09/08/Elastic%20Search%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80-Docker%E5%AE%89%E8%A3%85Elastic-Search%E5%B9%B6%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/"/>
    <id>http://jiangyixiong.top/2020/09/08/Elastic%20Search%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80-Docker%E5%AE%89%E8%A3%85Elastic-Search%E5%B9%B6%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/</id>
    <published>2020-09-08T16:59:34.000Z</published>
    <updated>2021-05-25T09:10:34.166Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker-安装-Elastic-Search"><a href="#Docker-安装-Elastic-Search" class="headerlink" title="Docker 安装 Elastic Search"></a>Docker 安装 Elastic Search</h2><h4 id="编写Docker-compose-yml"><a href="#编写Docker-compose-yml" class="headerlink" title="编写Docker-compose.yml"></a>编写<code>Docker-compose.yml</code></h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">es:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.elastic.co/elasticsearch/elasticsearch:7.9.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">es</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9200:9200&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9300:9300&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">discovery.type=single-node</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ES_JAVA_OPTS=-Xms256m</span> <span class="string">-Xmx512m</span></span><br><span class="line">  <span class="attr">kibana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">kibana:7.9.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kibana</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5601:5601&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ELASTICSEARCH_HOSTS=http://es:9200</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">es</span></span><br></pre></td></tr></table></figure><h4 id="运行docker-compose"><a href="#运行docker-compose" class="headerlink" title="运行docker-compose"></a>运行docker-compose</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><h4 id="验证Kibana与Elastic-Search"><a href="#验证Kibana与Elastic-Search" class="headerlink" title="验证Kibana与Elastic Search"></a>验证Kibana与Elastic Search</h4><ol><li><p>前往 docker宿主机地址:5601，打开Kibana环境</p></li><li><p>点击左下 Dev Tools</p></li><li><p>运行<code>GET _cluster/health</code></p></li><li><p>确认ES健康信息</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;cluster_name&quot;</span> : <span class="string">&quot;docker-cluster&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;status&quot;</span> : <span class="string">&quot;green&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;number_of_nodes&quot;</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;number_of_data_nodes&quot;</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;active_primary_shards&quot;</span> : <span class="number">6</span>,</span><br><span class="line">  <span class="attr">&quot;active_shards&quot;</span> : <span class="number">6</span>,</span><br><span class="line">  <span class="attr">&quot;relocating_shards&quot;</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;initializing_shards&quot;</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;unassigned_shards&quot;</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;delayed_unassigned_shards&quot;</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;number_of_pending_tasks&quot;</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;number_of_in_flight_fetch&quot;</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;task_max_waiting_in_queue_millis&quot;</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;active_shards_percent_as_number&quot;</span> : <span class="number">100.0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="基本Query"><a href="#基本Query" class="headerlink" title="基本Query"></a>基本Query</h2><h4 id="插入-更新文档"><a href="#插入-更新文档" class="headerlink" title="插入/更新文档"></a>插入/更新文档</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">PUT /megacorp/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;first_name&quot;</span> : <span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;last_name&quot;</span> :  <span class="string">&quot;Smith&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span> :        <span class="number">25</span>,</span><br><span class="line">    <span class="attr">&quot;about&quot;</span> :      <span class="string">&quot;I love to go rock climbing&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;interests&quot;</span>: [ <span class="string">&quot;sports&quot;</span>, <span class="string">&quot;music&quot;</span> ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT /megacorp/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;first_name&quot;</span> :  <span class="string">&quot;Jane&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;last_name&quot;</span> :   <span class="string">&quot;Smith&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span> :         <span class="number">32</span>,</span><br><span class="line">    <span class="attr">&quot;about&quot;</span> :       <span class="string">&quot;I like to collect rock albums&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;interests&quot;</span>:  [ <span class="string">&quot;music&quot;</span> ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT /megacorp/_doc/3</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;first_name&quot;</span> :  <span class="string">&quot;Douglas&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;last_name&quot;</span> :   <span class="string">&quot;Fir&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span> :         <span class="number">35</span>,</span><br><span class="line">    <span class="attr">&quot;about&quot;</span>:        <span class="string">&quot;I like to build cabinets&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;interests&quot;</span>:  [ <span class="string">&quot;forestry&quot;</span> ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT /megacorp/_doc/4</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;first_name&quot;</span> :  <span class="string">&quot;Gary&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;last_name&quot;</span> :   <span class="string">&quot;Jiang&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span> :         <span class="number">26</span>,</span><br><span class="line">    <span class="attr">&quot;about&quot;</span>:        <span class="string">&quot;I like Coding&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;interests&quot;</span>:  [ <span class="string">&quot;coding&quot;</span> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="根据id获取文档"><a href="#根据id获取文档" class="headerlink" title="根据id获取文档"></a>根据id获取文档</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /megacorp/_doc/1</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;megacorp&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_version&quot;</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span> : <span class="number">6</span>,</span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;found&quot;</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;first_name&quot;</span> : <span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;last_name&quot;</span> : <span class="string">&quot;Smith&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span> : <span class="number">25</span>,</span><br><span class="line">    <span class="attr">&quot;about&quot;</span> : <span class="string">&quot;I love to go rock climbing&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;interests&quot;</span> : [</span><br><span class="line">      <span class="string">&quot;sports&quot;</span>,</span><br><span class="line">      <span class="string">&quot;music&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="轻量搜索"><a href="#轻量搜索" class="headerlink" title="轻量搜索"></a>轻量搜索</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /megacorp/_search?q=last_name:Smith</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;took&quot;</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : &#123;</span><br><span class="line">      <span class="attr">&quot;value&quot;</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> : <span class="string">&quot;eq&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> : <span class="number">0.44183272</span>,</span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;megacorp&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;employee&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;2&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">0.44183272</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;first_name&quot;</span> : <span class="string">&quot;Jane&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;last_name&quot;</span> : <span class="string">&quot;Smith&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;age&quot;</span> : <span class="number">32</span>,</span><br><span class="line">          <span class="attr">&quot;about&quot;</span> : <span class="string">&quot;I like to collect rock albums&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;interests&quot;</span> : [</span><br><span class="line">            <span class="string">&quot;music&quot;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;megacorp&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;employee&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">0.44183272</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;first_name&quot;</span> : <span class="string">&quot;John&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;last_name&quot;</span> : <span class="string">&quot;Smith&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;age&quot;</span> : <span class="number">25</span>,</span><br><span class="line">          <span class="attr">&quot;about&quot;</span> : <span class="string">&quot;I love to go rock climbing&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;interests&quot;</span> : [</span><br><span class="line">            <span class="string">&quot;sports&quot;</span>,</span><br><span class="line">            <span class="string">&quot;music&quot;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查询表达式搜索"><a href="#查询表达式搜索" class="headerlink" title="查询表达式搜索"></a>查询表达式搜索</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /megacorp/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;last_name&quot;</span>: <span class="string">&quot;Smith&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;took&quot;</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : &#123;</span><br><span class="line">      <span class="attr">&quot;value&quot;</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> : <span class="string">&quot;eq&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> : <span class="number">0.44183272</span>,</span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;megacorp&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;employee&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;2&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">0.44183272</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;first_name&quot;</span> : <span class="string">&quot;Jane&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;last_name&quot;</span> : <span class="string">&quot;Smith&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;age&quot;</span> : <span class="number">32</span>,</span><br><span class="line">          <span class="attr">&quot;about&quot;</span> : <span class="string">&quot;I like to collect rock albums&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;interests&quot;</span> : [</span><br><span class="line">            <span class="string">&quot;music&quot;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;megacorp&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;employee&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">0.44183272</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;first_name&quot;</span> : <span class="string">&quot;John&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;last_name&quot;</span> : <span class="string">&quot;Smith&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;age&quot;</span> : <span class="number">25</span>,</span><br><span class="line">          <span class="attr">&quot;about&quot;</span> : <span class="string">&quot;I love to go rock climbing&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;interests&quot;</span> : [</span><br><span class="line">            <span class="string">&quot;sports&quot;</span>,</span><br><span class="line">            <span class="string">&quot;music&quot;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">GET /megacorp/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;must&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;last_name&quot;</span>: <span class="string">&quot;Smith&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;filter&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;range&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;age&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;gt&quot;</span>: <span class="number">30</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;took&quot;</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : &#123;</span><br><span class="line">      <span class="attr">&quot;value&quot;</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> : <span class="string">&quot;eq&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> : <span class="number">0.44183272</span>,</span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;megacorp&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;employee&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;2&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">0.44183272</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;first_name&quot;</span> : <span class="string">&quot;Jane&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;last_name&quot;</span> : <span class="string">&quot;Smith&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;age&quot;</span> : <span class="number">32</span>,</span><br><span class="line">          <span class="attr">&quot;about&quot;</span> : <span class="string">&quot;I like to collect rock albums&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;interests&quot;</span> : [</span><br><span class="line">            <span class="string">&quot;music&quot;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="全文搜索"><a href="#全文搜索" class="headerlink" title="全文搜索"></a>全文搜索</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /megacorp/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;about&quot;</span>: <span class="string">&quot;rock climbing&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;took&quot;</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : &#123;</span><br><span class="line">      <span class="attr">&quot;value&quot;</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> : <span class="string">&quot;eq&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> : <span class="number">1.0797646</span>,</span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;megacorp&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;employee&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">1.0797646</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;first_name&quot;</span> : <span class="string">&quot;John&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;last_name&quot;</span> : <span class="string">&quot;Smith&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;age&quot;</span> : <span class="number">25</span>,</span><br><span class="line">          <span class="attr">&quot;about&quot;</span> : <span class="string">&quot;I love to go rock climbing&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;interests&quot;</span> : [</span><br><span class="line">            <span class="string">&quot;sports&quot;</span>,</span><br><span class="line">            <span class="string">&quot;music&quot;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;megacorp&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;employee&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;2&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">0.42033815</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;first_name&quot;</span> : <span class="string">&quot;Jane&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;last_name&quot;</span> : <span class="string">&quot;Smith&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;age&quot;</span> : <span class="number">32</span>,</span><br><span class="line">          <span class="attr">&quot;about&quot;</span> : <span class="string">&quot;I like to collect rock albums&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;interests&quot;</span> : [</span><br><span class="line">            <span class="string">&quot;music&quot;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="短语搜索"><a href="#短语搜索" class="headerlink" title="短语搜索"></a>短语搜索</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /megacorp/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match_phrase&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;about&quot;</span>: <span class="string">&quot;rock climbing&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;took&quot;</span> : <span class="number">37</span>,</span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : &#123;</span><br><span class="line">      <span class="attr">&quot;value&quot;</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> : <span class="string">&quot;eq&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> : <span class="number">1.0797647</span>,</span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;megacorp&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;employee&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">1.0797647</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;first_name&quot;</span> : <span class="string">&quot;John&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;last_name&quot;</span> : <span class="string">&quot;Smith&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;age&quot;</span> : <span class="number">25</span>,</span><br><span class="line">          <span class="attr">&quot;about&quot;</span> : <span class="string">&quot;I love to go rock climbing&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;interests&quot;</span> : [</span><br><span class="line">            <span class="string">&quot;sports&quot;</span>,</span><br><span class="line">            <span class="string">&quot;music&quot;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Docker-安装-Elastic-Search&quot;&gt;&lt;a href=&quot;#Docker-安装-Elastic-Search&quot; class=&quot;headerlink&quot; title=&quot;Docker 安装 Elastic Search&quot;&gt;&lt;/a&gt;Docker 安装 Elas
      
    
    </summary>
    
    
      <category term="blog" scheme="http://jiangyixiong.top/categories/blog/"/>
    
    
      <category term="Elastic Search" scheme="http://jiangyixiong.top/tags/Elastic-Search/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Stream 配合Kafka 基础使用demo</title>
    <link href="http://jiangyixiong.top/2020/09/08/Spring-Cloud-Stream-%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8demo/"/>
    <id>http://jiangyixiong.top/2020/09/08/Spring-Cloud-Stream-%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8demo/</id>
    <published>2020-09-08T11:08:39.000Z</published>
    <updated>2021-05-25T09:10:34.170Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介与概念"><a href="#简介与概念" class="headerlink" title="简介与概念"></a>简介与概念</h2><p>Spring Cloud Stream 是一个用于构建消息驱动微服务的框架。Spring Cloud Stream 基于 Spring Boot，整合消息中间件（Kafka或RabbitMQ） 构建可独立运行，生产级的Spring应用。</p><h4 id="应用模型"><a href="#应用模型" class="headerlink" title="应用模型"></a>应用模型</h4><p>一个<strong>Spring Cloud Stream</strong>应用程序依赖于于独立的消息中间件。应用通过<strong>Spring Cloud Stream</strong>注入的输入和输出<em>通道</em>与外部世界通信。通道通过专用的<em>Binder</em>实现与外部代理连接。这种模型屏蔽了消息中间件的使用差异，我们只需掌握Spring Cloud Stream的使用就可以方便的构建消息驱动的微服务应用。</p><p><img src="/images/spring-cloud-stream-model.png" alt="Spring Cloud Stream引用模型"></p><h4 id="Binder"><a href="#Binder" class="headerlink" title="Binder"></a>Binder</h4><p>Binder 是 Spring Cloud Stream 的一个抽象概念，是应用与消息中间件之间的粘合剂。目前 Spring Cloud Stream 实现了 Kafka 和 Rabbit MQ 的binder。</p><p>通过 binder ，可以很方便的连接中间件，可以动态的改变消息的<br> destinations（对应于 Kafka 的topic，Rabbit MQ 的 exchanges），这些都可以通过<code>spring.cloud.stream.binder</code>进行配置。</p><h4 id="发布订阅模型"><a href="#发布订阅模型" class="headerlink" title="发布订阅模型"></a>发布订阅模型</h4><p>Spring Cloud Stream 使用了经典的发布/订阅模式。发布者将消息发布到指定的Topic中，订阅者通过订阅该Topic来消费消息。</p><h4 id="Consumer-Group"><a href="#Consumer-Group" class="headerlink" title="Consumer Group"></a>Consumer Group</h4><p>类似于Kafka中消费者组的概念，每个binding可以指定一个group，一条消息只会被同一个group中的一个binding消费。可以被用来防止重复消费。可以于<code>spring.cloud.stream.bindings.&lt;channelName&gt;.group</code>中定义。</p><h2 id="搭建Kafka与Zookeeper"><a href="#搭建Kafka与Zookeeper" class="headerlink" title="搭建Kafka与Zookeeper"></a>搭建Kafka与Zookeeper</h2><p>为了在本地构建我们的第一个Spring Cloud Stream应用，我们需要先行搭建其依赖的Kafka。Kafka又需要用到Zookeeper。这里使用Docker Compose来快速搭建Kafka与Zookeeper。</p><h4 id="编写-Docker-compose-yml"><a href="#编写-Docker-compose-yml" class="headerlink" title="编写 Docker-compose.yml"></a>编写 <code>Docker-compose.yml</code></h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">kafka:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">wurstmeister/kafka</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kafka-streamlistener</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9092:9092&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_ADVERTISED_HOST_NAME=192.168.99.100</span> <span class="comment">#这里写docker宿主机地址。此例为在windows Docker Quickstart中运行，故地址为docker所在虚拟机的地址。</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_ADVERTISED_PORT=9092</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">zookeeper</span></span><br><span class="line">  <span class="attr">zookeeper:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">wurstmeister/zookeeper</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;2181:2181&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_ADVERTISED_HOST_NAME=zookeeper</span></span><br><span class="line">  <span class="attr">kafka-manager:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">sheepkiller/kafka-manager</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9000</span><span class="string">:9000</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">ZK_HOSTS:</span> <span class="string">zookeeper:2181</span></span><br><span class="line">      <span class="attr">KAFKA_BROKERS:</span> <span class="string">kafka:9092</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="启动配置好的Docker-compose"><a href="#启动配置好的Docker-compose" class="headerlink" title="启动配置好的Docker-compose"></a>启动配置好的Docker-compose</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>之后前往 <code>http://192.168.99.100:9000</code>验证 Kafka 运行情况</p><h2 id="构建-Spring-Cloud-Stream-应用"><a href="#构建-Spring-Cloud-Stream-应用" class="headerlink" title="构建 Spring Cloud Stream 应用"></a>构建 Spring Cloud Stream 应用</h2><p>本例中，我们将构建两个微服务，<code>Producer</code>开放Restful接口，并将接口请求发布至消息队列。<code>Sample</code>订阅队列并打印其中的消息。</p><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><p>首先在两个项目中引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-stream-test-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="在-Spring-Boot-中配置-Spring-Cloud-Stream-的-binder-与-bindings"><a href="#在-Spring-Boot-中配置-Spring-Cloud-Stream-的-binder-与-bindings" class="headerlink" title="在 Spring Boot 中配置 Spring Cloud Stream 的 binder 与 bindings"></a>在 Spring Boot 中配置 Spring Cloud Stream 的 binder 与 bindings</h4><p>Consumer的<code>application.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">kafka:</span></span><br><span class="line">        <span class="attr">binder:</span></span><br><span class="line">          <span class="comment"># Kafka节点地址列表</span></span><br><span class="line">          <span class="attr">brokers:</span> <span class="number">192.168</span><span class="number">.99</span><span class="number">.100</span><span class="string">:9092</span></span><br><span class="line">      <span class="attr">default-binder:</span> <span class="string">kafka</span></span><br><span class="line">      <span class="attr">bindings:</span></span><br><span class="line">        <span class="comment"># 设置binding</span></span><br><span class="line">        <span class="attr">msg_output:</span></span><br><span class="line">          <span class="comment"># 对应kafka的topic名称</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">msg</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">kafka</span></span><br><span class="line">        <span class="comment"># 可以设置多个binding，对应不同或相同的destination，如果destination相同且未设置group，将会重复消费对应destination中的消息。若group相同将会采用竞争策略，只有一个binding可以消费消息</span></span><br><span class="line">        <span class="attr">error_output:</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">error</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">kafka</span></span><br></pre></td></tr></table></figure><p>Consumer的<code>application.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">kafka:</span></span><br><span class="line">        <span class="attr">binder:</span></span><br><span class="line">          <span class="attr">brokers:</span> <span class="number">192.168</span><span class="number">.99</span><span class="number">.100</span><span class="string">:9092</span></span><br><span class="line">      <span class="attr">default-binder:</span> <span class="string">kafka</span></span><br><span class="line">      <span class="attr">bindings:</span></span><br><span class="line">        <span class="attr">msg_input:</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">msg</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">kafka</span></span><br><span class="line">        <span class="attr">error_input:</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">error</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">kafka</span></span><br></pre></td></tr></table></figure><h4 id="Producer编写"><a href="#Producer编写" class="headerlink" title="Producer编写"></a><code>Producer</code>编写</h4><p>定义binding接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义通道名称</span></span><br><span class="line">    String OUTPUT_CHANNEL =<span class="string">&quot;msg_output&quot;</span>;</span><br><span class="line">    String ERROR_CHANNEL =<span class="string">&quot;error_output&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过Output注解定义输出通道</span></span><br><span class="line">    <span class="meta">@Output(Producer.OUTPUT_CHANNEL)</span></span><br><span class="line">    <span class="function">MessageChannel <span class="title">messageOutput</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Output(Producer.ERROR_CHANNEL)</span></span><br><span class="line">    <span class="function">MessageChannel <span class="title">errorOutput</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开启<code>binding</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableBinding(Producer.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamproducerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(StreamproducerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义Controller接收请求并置入消息队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    Producer producer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/msg/&#123;key&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendMsg</span><span class="params">(<span class="meta">@PathVariable</span> String key, <span class="meta">@RequestBody</span> Object msg)</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; payload = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        payload.put(key,msg);</span><br><span class="line">        <span class="comment">//将负载送入通道</span></span><br><span class="line">        producer.messageOutput().send(MessageBuilder.withPayload(payload).build());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;sent&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/error/&#123;key&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendErr</span><span class="params">(<span class="meta">@PathVariable</span> String key, <span class="meta">@RequestBody</span> Object err)</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; payload = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        payload.put(key,err);</span><br><span class="line">        producer.errorOutput().send(MessageBuilder.withPayload(payload).build());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;sent&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Consumer编写"><a href="#Consumer编写" class="headerlink" title="Consumer编写"></a><code>Consumer</code>编写</h4><p>定义binding接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    String INPUT_CHANNEL =<span class="string">&quot;msg_input&quot;</span>;</span><br><span class="line">    String ERROR_CHANNEL =<span class="string">&quot;error_input&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Input(Consumer.INPUT_CHANNEL)</span></span><br><span class="line">    <span class="function">SubscribableChannel <span class="title">messageInput</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Input(Consumer.ERROR_CHANNEL)</span></span><br><span class="line">    <span class="function">SubscribableChannel <span class="title">errorInput</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>@StreamListener</code>注解消费消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableBinding(Consumer.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@StreamListener(Consumer.INPUT_CHANNEL)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInput</span><span class="params">(Map&lt;String,Object&gt; msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[msg]: &quot;</span>+msg.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@StreamListener(Consumer.ERROR_CHANNEL)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getError</span><span class="params">(Map&lt;String,Object&gt; error)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[err]: &quot;</span>+error.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p>Producer请求</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;msg&quot;</span>:<span class="string">&quot;hello&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;uid&quot;</span>:<span class="string">&quot;3319&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;error&quot;</span>:<span class="string">&quot;ERROR&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;uid&quot;</span>:<span class="string">&quot;2113&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Consumer输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[msg]: &#123;msg1&#x3D;&#123;msg&#x3D;hello, uid&#x3D;3319&#125;&#125;</span><br><span class="line">[err]: &#123;error1&#x3D;&#123;error&#x3D;ERROR, uid&#x3D;2113&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><ul><li><a href="https://blog.csdn.net/qq_32734365/article/details/81413218">Spring Cloud Stream中文指导手册</a></li><li><a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-stream/3.0.6.RELEASE/reference/html/spring-cloud-stream.html#_quick_start">Spring Cloud Stream - Quick Start</a></li><li><a href="https://www.jianshu.com/p/fb7d11c7f798">使用 Spring Cloud Stream 构建消息驱动微服务</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介与概念&quot;&gt;&lt;a href=&quot;#简介与概念&quot; class=&quot;headerlink&quot; title=&quot;简介与概念&quot;&gt;&lt;/a&gt;简介与概念&lt;/h2&gt;&lt;p&gt;Spring Cloud Stream 是一个用于构建消息驱动微服务的框架。Spring Cloud Stream 
      
    
    </summary>
    
    
      <category term="blog" scheme="http://jiangyixiong.top/categories/blog/"/>
    
    
      <category term="Kafka" scheme="http://jiangyixiong.top/tags/Kafka/"/>
    
      <category term="Spring Cloud" scheme="http://jiangyixiong.top/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud OpenFeign 快速上手</title>
    <link href="http://jiangyixiong.top/2020/09/07/Spring-Cloud-OpenFeign-%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/"/>
    <id>http://jiangyixiong.top/2020/09/07/Spring-Cloud-OpenFeign-%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</id>
    <published>2020-09-07T10:20:04.000Z</published>
    <updated>2021-05-25T09:10:34.170Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Feign是什么"><a href="#Feign是什么" class="headerlink" title="Feign是什么"></a>Feign是什么</h2><p>Feign是一个声明式的web服务客户端。他允许开发者通过注解与接口实现简单快捷的http客户端创建。Spring Cloud OpenFeign在Feign的基础上加入了对SpringMVC注解的支持</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h4 id="引入Maven依赖"><a href="#引入Maven依赖" class="headerlink" title="引入Maven依赖"></a>引入Maven依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="启用Feign的客户端功能"><a href="#启用Feign的客户端功能" class="headerlink" title="启用Feign的客户端功能"></a>启用Feign的客户端功能</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//在启动类上添加注解@EnableFeignClients</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="声明需要的客户端接口"><a href="#声明需要的客户端接口" class="headerlink" title="声明需要的客户端接口"></a>声明需要的客户端接口</h4><p>例如我们需要一个用于<code>stores</code>服务中<code>/stores</code>接口的客户端，那我们可以声明如下的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(&quot;stores&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StoreClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(method = RequestMethod.GET, value = &quot;/stores&quot;)</span></span><br><span class="line">    <span class="function">List&lt;Store&gt; <span class="title">getStores</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(method = RequestMethod.GET, value = &quot;/stores&quot;)</span></span><br><span class="line">    <span class="function">Page&lt;Store&gt; <span class="title">getStores</span><span class="params">(Pageable pageable)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(method = RequestMethod.POST, value = &quot;/stores/&#123;storeId&#125;&quot;, consumes = &quot;application/json&quot;)</span></span><br><span class="line">    <span class="function">Store <span class="title">update</span><span class="params">(<span class="meta">@PathVariable(&quot;storeId&quot;)</span> Long storeId, Store store)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后我们接可以通过简单的自动注入获取到StoreClient的服务，并调用其中的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line">StoreClient storeService;</span><br><span class="line"></span><br><span class="line">List&lt;Store&gt; = storeService.getStores();</span><br></pre></td></tr></table></figure><p><code>getStroes()</code>方法实际上是向<code>stores/sotres</code>接口发送GET请求，并将请求结果映射成<code>List&lt;Store&gt;</code>返回，正如我们在<code>StoreClient</code>接口中声明的。</p><h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><h4 id="SpringMVC相关注解"><a href="#SpringMVC相关注解" class="headerlink" title="SpringMVC相关注解"></a>SpringMVC相关注解</h4><p>从快速开始的例子中可以看到，OpenFeign支持SpringMVC风格的注解，包括<code>GetMapping</code>,<code>PostMapping</code>,<code>RequestMapping</code>等等。需要注意的是，这里的注解对应的是服务端的接口信息。例如在快速开始中的<code> @RequestMapping(method = RequestMethod.POST, value = &quot;/stores/&#123;storeId&#125;&quot;, consumes = &quot;application/json&quot;)</code> 其中的consumes不是我们这个方法消费参数的格式，而是服务端消费请求的方式，即我们的客户端发送请求的方式。</p><h4 id="FeignClient注解"><a href="#FeignClient注解" class="headerlink" title="@FeignClient注解"></a>@FeignClient注解</h4><p><code>FeignClient</code>注解是Feign中最常用的注解，可作用于接口上，用来声明此接口是一个Feign客户端，并声明该客户端调用服务的名称或url。该注解包含以下参数：</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td><code>value</code> / <code>name</code></td><td>客户端的名称。不管是否提供<code>url</code>都必须明确该属性。如果项目使用了Ribbon，name属性会作为微服务的名称，用于服务发现。</td></tr><tr><td><code>qualifier</code></td><td>定义客户端的qualifier值，对应<code>@Qualifier</code>注入方法。</td></tr><tr><td><code>url</code></td><td>配置调用服务的绝对地址</td></tr><tr><td><code>decode404</code></td><td>boolean值，当调用请求404的时候，如果该参数为true，就会执行配置的Decoder进行解码。如果该参数为false直接抛出异常。</td></tr><tr><td><code>configuration</code></td><td>指定Feign的配置类。可参考<code>org.springframework.cloud.netflix.feign.FeignClientsConfiguration</code>。</td></tr><tr><td><code>fallback</code></td><td>定义fallback类，执zhi行熔断或请求失败后的容错处理。这种做法无法知道熔断的异常信息。样例实现见下文。</td></tr><tr><td><code>fallbackFactory</code></td><td>定义fallbackFactor类，执zhi行熔断或请求失败后的容错处理，可以知道熔断的异常信息。样例实现见下文。</td></tr><tr><td><code>path</code></td><td>客户端访问接口地址的前缀。</td></tr><tr><td><code>primary</code></td><td>对应<code>Primary</code>注解，标注该bean为高注入优先级。</td></tr></tbody></table><h4 id="fallback类"><a href="#fallback类" class="headerlink" title="fallback类"></a>fallback类</h4><p>该类用于<code>fallback</code>参数，需实现对应的feignClient接口，例如对于此client：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;optimization-user&quot;, fallback = UserRemoteClientFallback.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRemoteClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/get&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span><span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>fallback类可写为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRemoteClientFallback</span> <span class="keyword">implements</span> <span class="title">UserRemoteClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="number">0</span>, <span class="string">&quot;默认fallback&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="fallbackFactory类"><a href="#fallbackFactory类" class="headerlink" title="fallbackFactory类"></a>fallbackFactory类</h4><p>fallbackFactory不同于fallback，它通过工厂模式生产一个实现了客户端接口的匿名内部类，并通过该工厂将熔断的异常信息传入该匿名内部类中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;optimization-user&quot;, fallbackFactory = UserRemoteClientFallbackFactory.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRemoteClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/get&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span><span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>fallbackFactory类定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRemoteClientFallbackFactory</span> <span class="keyword">implements</span> <span class="title">FallbackFactory</span>&lt;<span class="title">UserRemoteClient</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(UserRemoteClientFallbackFactory.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserRemoteClient <span class="title">create</span><span class="params">(Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserRemoteClient() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">                logger.error(<span class="string">&quot;UserRemoteClient.getUser异常&quot;</span>, cause);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="number">0</span>, <span class="string">&quot;默认&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h2><blockquote><ul><li><a href="https://github.com/spring-cloud/spring-cloud-openfeign/blob/master/docs/src/main/asciidoc/spring-cloud-openfeign.adoc">Spring Cloud OpenFeign 官方文档</a></li><li><a href="https://www.cnblogs.com/yinjihuan/p/12159986.html">那天晚上和@FeignClient注解的深度交流 from 猿天地</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Feign是什么&quot;&gt;&lt;a href=&quot;#Feign是什么&quot; class=&quot;headerlink&quot; title=&quot;Feign是什么&quot;&gt;&lt;/a&gt;Feign是什么&lt;/h2&gt;&lt;p&gt;Feign是一个声明式的web服务客户端。他允许开发者通过注解与接口实现简单快捷的http客
      
    
    </summary>
    
    
      <category term="blog" scheme="http://jiangyixiong.top/categories/blog/"/>
    
    
      <category term="Spring Cloud" scheme="http://jiangyixiong.top/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Kafka 消费者篇</title>
    <link href="http://jiangyixiong.top/2020/09/03/Kafka-%E6%B6%88%E8%B4%B9%E8%80%85%E7%AF%87/"/>
    <id>http://jiangyixiong.top/2020/09/03/Kafka-%E6%B6%88%E8%B4%B9%E8%80%85%E7%AF%87/</id>
    <published>2020-09-03T19:49:10.000Z</published>
    <updated>2021-05-25T09:10:34.170Z</updated>
    
    <content type="html"><![CDATA[<h2 id="消费者与消费者组"><a href="#消费者与消费者组" class="headerlink" title="消费者与消费者组"></a>消费者与消费者组</h2><p>消费者组是若干个消费者组成的集合，一个消费者组包含以下特性：</p><ul><li>一个消费者组可以有一个或多个消费者实例</li><li>消费者组名（GroupId）通常由一个一个字符串表示，有唯一性。</li><li>当一个消费者组订阅了主题，那么该主题中的每个分区职能分配给否一个消费者组中的某一个消费者程序</li></ul><p>一个分区对应一个消费者，一个消费者可以负责多个分区。消费者数量尽量不要超过话题的分区数，否则多出的消费者将处于空闲状态。</p><p><img src="/images/kafka-consumer.png" alt="image-20200904103005821"></p><h2 id="使用脚本控制消费者"><a href="#使用脚本控制消费者" class="headerlink" title="使用脚本控制消费者"></a>使用脚本控制消费者</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kafka-console-consumer.sh --broker-list broker_name:port --topic topic_name</span><br></pre></td></tr></table></figure><h2 id="使用消费者API"><a href="#使用消费者API" class="headerlink" title="使用消费者API"></a>使用消费者API</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.KafkaConsumer;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.ConsumerRecords;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaConsumerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建并写入客户端配置</span></span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//Kafka 集群地址合集</span></span><br><span class="line">        props.put(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;localhost:9092&quot;</span>);</span><br><span class="line">        <span class="comment">//Kafka 消费者组id</span></span><br><span class="line">        props.put(<span class="string">&quot;group.id&quot;</span>, <span class="string">&quot;CountryCounter&quot;</span>);</span><br><span class="line">        <span class="comment">//反序列化器</span></span><br><span class="line">        props.put(<span class="string">&quot;key.deserializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serializaiton.StrignDeserializer&quot;</span>);</span><br><span class="line">        props.put(<span class="string">&quot;value.deserializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serializaiton.StrignDeserializer&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//根据配置创建consumer</span></span><br><span class="line">           KafkaConsumer&lt;String, String&gt; consumer = <span class="keyword">new</span> KafkaConsumer&lt;String, String&gt;(props);</span><br><span class="line">        <span class="comment">//订阅topic</span></span><br><span class="line">           consumer.subscribe(Collections.singletonList(<span class="string">&quot;test&quot;</span>));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="comment">// 100 是超时时间（ms），在该时间内 poll 会等待服务器返回数据</span></span><br><span class="line">                ConsumerReccords&lt;String, String&gt; records = consumer.poll(<span class="number">100</span>); </span><br><span class="line">                </span><br><span class="line">                <span class="comment">// poll 返回一个记录列表。</span></span><br><span class="line">                <span class="comment">// 每条记录都包含了记录所属主题的信息、记录所在分区的信息、记录在分区里的偏移量，以及记录的键值对。</span></span><br><span class="line">                <span class="keyword">for</span> (ConsumerReccord&lt;String, String&gt; record : records) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;topic=%s, partition=%s, offset=%d, key=%s, value=%s&quot;</span>,</span><br><span class="line">                        record.topic(), record.partition(), record.offset(), </span><br><span class="line">                        record.key(), record.value());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭消费者,网络连接和 socket 也会随之关闭，并立即触发一次再均衡</span></span><br><span class="line">            consumer.close();</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>KafkaConsumer是非多线程并发安全的：如果多个线程公用一个KafkaConsumer实例，则抛出异常错误信息。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;消费者与消费者组&quot;&gt;&lt;a href=&quot;#消费者与消费者组&quot; class=&quot;headerlink&quot; title=&quot;消费者与消费者组&quot;&gt;&lt;/a&gt;消费者与消费者组&lt;/h2&gt;&lt;p&gt;消费者组是若干个消费者组成的集合，一个消费者组包含以下特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个
      
    
    </summary>
    
    
      <category term="blog" scheme="http://jiangyixiong.top/categories/blog/"/>
    
    
      <category term="Kafka" scheme="http://jiangyixiong.top/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Kafka 生产者篇</title>
    <link href="http://jiangyixiong.top/2020/09/02/Kafka-%E7%94%9F%E4%BA%A7%E8%80%85%E7%AF%87/"/>
    <id>http://jiangyixiong.top/2020/09/02/Kafka-%E7%94%9F%E4%BA%A7%E8%80%85%E7%AF%87/</id>
    <published>2020-09-02T15:06:35.000Z</published>
    <updated>2021-05-25T09:10:34.170Z</updated>
    
    <content type="html"><![CDATA[<p>生产者在业务中实时读取原始数据进行业务逻辑处理，然后调用Kafka的生产者接口将处理后的消息记录写入到Kafa集群中。</p><p><img src="/images/kafka-producer-process.png" alt="kafka-producer-process"></p><h2 id="使用脚本操作生产者"><a href="#使用脚本操作生产者" class="headerlink" title="使用脚本操作生产者"></a>使用脚本操作生产者</h2><h4 id="生产者发布消息"><a href="#生产者发布消息" class="headerlink" title="生产者发布消息"></a>生产者发布消息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kafka-console-producer.sh --broker-list broker_name:port --topic topic_name</span><br></pre></td></tr></table></figure><h4 id="消费者查看消息"><a href="#消费者查看消息" class="headerlink" title="消费者查看消息"></a>消费者查看消息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kafka-console-consumer.sh --broker-list broker_name:port --topic topic_name</span><br></pre></td></tr></table></figure><h2 id="使用Java-API操作生产者"><a href="#使用Java-API操作生产者" class="headerlink" title="使用Java API操作生产者"></a>使用Java API操作生产者</h2><h4 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kafka-clients<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="使用生产者API"><a href="#使用生产者API" class="headerlink" title="使用生产者API"></a>使用生产者API</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.KafkaProducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.Producer;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.ProducerRecord;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaProducerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建并写入客户端配置</span></span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//Kafka 集群地址合集</span></span><br><span class="line">        props.put(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;localhost:9092&quot;</span>);</span><br><span class="line">        <span class="comment">//对kafka节点应答的要求，0为不要求应答，1为需要一个节点应答，all为需要全部节点应答</span></span><br><span class="line">        props.put(<span class="string">&quot;acks&quot;</span>, <span class="string">&quot;all&quot;</span>);</span><br><span class="line">        <span class="comment">//发送失败重试次数</span></span><br><span class="line">        props.put(<span class="string">&quot;retries&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">//批处理量，减少请求次数</span></span><br><span class="line">        props.put(<span class="string">&quot;batch.size&quot;</span>, <span class="number">16384</span>);</span><br><span class="line">        <span class="comment">//增加延时，减少请求次数</span></span><br><span class="line">        props.put(<span class="string">&quot;linger.ms&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//Producer可缓存数据的大小</span></span><br><span class="line">        props.put(<span class="string">&quot;buffer.memory&quot;</span>, <span class="number">33554432</span>);</span><br><span class="line">        <span class="comment">//key与value的序列化方式，用于实现Serializer接口</span></span><br><span class="line">        props.put(<span class="string">&quot;key.serializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class="line">        props.put(<span class="string">&quot;value.serializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//根据配置创建producer</span></span><br><span class="line">        Producer&lt;String, String&gt; producer = <span class="keyword">new</span> KafkaProducer&lt;String, String&gt;(props);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//创建并发送record</span></span><br><span class="line">            producer.send(<span class="keyword">new</span> ProducerRecord&lt;String, String&gt;(<span class="string">&quot;my-topic&quot;</span>, Integer.toString(i), Integer.toString(i))); <span class="comment">//topic, key, value</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        producer.close();<span class="comment">//关闭producer</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多线程调用生产者API"><a href="#多线程调用生产者API" class="headerlink" title="多线程调用生产者API"></a>多线程调用生产者API</h4><p>由于Kafka的生产者对象是线程安全的，可以由多个线程调用Kafka生产者对象。</p><p>创建生产线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> kafka.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.KafkaProducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.ProducerRecord;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产者线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> KafkaProducer&lt;String, String&gt; producer = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> ProducerRecord&lt;String, String&gt; record = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProducerThread</span><span class="params">(KafkaProducer&lt;String, String&gt; producer, ProducerRecord&lt;String, String&gt; record)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.producer = producer;</span><br><span class="line">        <span class="keyword">this</span>.record = record;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        producer.send(record, (metadata, e) -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != metadata) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;消息发送成功 ：&quot;</span>+String.format(<span class="string">&quot;offset: %s, partition:%s, topic:%s  timestamp:%s&quot;</span>, metadata.offset(), metadata.partition(), metadata.topic(), metadata.timestamp()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多个线程通过同一个Producer对象发送消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> kafka.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> kafka.OrderMessage;</span><br><span class="line"><span class="keyword">import</span> kafka.partition.PartitionUtil;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.ProducerConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程池生产者</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> tangj</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/7/29 20:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> String topic = <span class="string">&quot;test&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> KafkaProducer&lt;String, String&gt; producer = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 核心池大小</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> corePoolSize = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最大值</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> maximumPoolSize = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无任务时存活时间</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">long</span> keepAliveTime = <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 时间单位</span></span><br><span class="line">    <span class="keyword">static</span> TimeUnit timeUnit = TimeUnit.SECONDS;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 阻塞队列</span></span><br><span class="line">    <span class="keyword">static</span> BlockingQueue blockingQueue = <span class="keyword">new</span> LinkedBlockingQueue();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 线程池</span></span><br><span class="line">    <span class="keyword">static</span> ExecutorService service = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 配置项</span></span><br><span class="line">        properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">&quot;localhost:9092&quot;</span>);</span><br><span class="line">        properties.put(ProducerConfig.PARTITIONER_CLASS_CONFIG, PartitionUtil.class.getName());</span><br><span class="line">        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, <span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class="line">        properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, <span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class="line">        producer = <span class="keyword">new</span> KafkaProducer&lt;&gt;(properties);</span><br><span class="line">        <span class="comment">// 初始化线程池</span></span><br><span class="line">        service = <span class="keyword">new</span> ThreadPoolExecutor(corePoolSize, maximumPoolSize, keepAliveTime, timeUnit, blockingQueue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            service.submit(createMsgTask());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生产消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ProducerThread <span class="title">createMsgTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        OrderMessage orderMessage = <span class="keyword">new</span> OrderMessage();</span><br><span class="line">        orderMessage.setId(UUID.randomUUID().toString());</span><br><span class="line">        <span class="keyword">long</span> timestamp = System.nanoTime();</span><br><span class="line">        orderMessage.setCreateTime(timestamp);</span><br><span class="line">        orderMessage.setRemake(<span class="string">&quot;rem&quot;</span>);</span><br><span class="line">        orderMessage.setsName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        ProducerRecord&lt;String, String&gt; record = <span class="keyword">new</span> ProducerRecord&lt;String, String&gt;(topic, timestamp + <span class="string">&quot;&quot;</span>, orderMessage.toString());</span><br><span class="line">        ProducerThread task = <span class="keyword">new</span> ProducerThread(producer, record);</span><br><span class="line">        <span class="keyword">return</span> task;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="序列化器"><a href="#序列化器" class="headerlink" title="序列化器"></a>序列化器</h2><p>Kafka提供了一些序列化器，可以在<code>org.apache.kafka.common.serialization</code>中找到。</p><p>我们也可通过实现<code>org.apache.kafka.common.serialization.Serializer&lt;T&gt;</code>接口，并重写其中的<code>byte[] serialize(String topic, T data)</code>方法实现自定义序列化器。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><ul><li><a href="https://weread.qq.com/web/reader/bb03287071848770bb0d2c4kc81322c012c81e728d9d180">Kafka并不难学</a></li><li><a href="https://www.cnblogs.com/superfj/p/9440835.html">玩转Kafka的生产者——分区器与多线程</a></li><li><a href="https://blog.csdn.net/sanyaoxu_2/article/details/80754134">Kafka : Kafka入门教程和JAVA客户端使用</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;生产者在业务中实时读取原始数据进行业务逻辑处理，然后调用Kafka的生产者接口将处理后的消息记录写入到Kafa集群中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/kafka-producer-process.png&quot; alt=&quot;kafka-producer-proc
      
    
    </summary>
    
    
      <category term="blog" scheme="http://jiangyixiong.top/categories/blog/"/>
    
    
      <category term="Kafka" scheme="http://jiangyixiong.top/tags/Kafka/"/>
    
  </entry>
  
</feed>
