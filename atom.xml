<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>蒋亦雄的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jiangyixiong.top/"/>
  <updated>2020-08-03T08:06:07.206Z</updated>
  <id>http://jiangyixiong.top/</id>
  
  <author>
    <name>Yixiong Jiang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Shiro使用之自定义realm</title>
    <link href="http://jiangyixiong.top/2020/08/03/Shiro%E4%BD%BF%E7%94%A8%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89realm/"/>
    <id>http://jiangyixiong.top/2020/08/03/Shiro%E4%BD%BF%E7%94%A8%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89realm/</id>
    <published>2020-08-03T07:09:52.000Z</published>
    <updated>2020-08-03T08:06:07.206Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Realm"><a href="#什么是Realm" class="headerlink" title="什么是Realm"></a>什么是Realm</h2><p>Realm直译为王国或领地，再Shiro中，realm负责链接认证授权服务与其所使用的数据源。</p><p>如果说Shiro是小区保安，负责筛查所有进出小区的车辆，realm就是保安手上的住户名单，负责记录每个用户的信息，包含<code>Principals</code>（用户识别信息，通常是用户名或邮箱手机号），<code>Credentials</code>（用户证明信息，通常就是密码），和<code>Authorization</code>（用户身份）。</p><a id="more"></a><h2 id="如何自定义Realm"><a href="#如何自定义Realm" class="headerlink" title="如何自定义Realm"></a>如何自定义Realm</h2><p>Shiro提供了很多Realm实现，其中常用的有<code>IniRealm</code>，<code>PropertiesRealm</code>，<code>JdbcRealm</code>。通常在项目中用户信息是存储于数据库中，对应可使用<code>JdbcRealm</code>。但<code>JdbcRealm</code>的使用中需要我们定义身份与用户信息的查询语句，这些内容通常是我们在实现DAO和Service层时就已经做过的。加上有事在获取用户信息的过程中会有一些特殊的业务逻辑，我们通常会通过继承<code>AuthorizingRealm</code>来实现自定义Realm。</p><p><code>AuthorizingRealm</code>是一个抽象类，提供了<code>doGetAuthorizationInfo</code>抽象方法，同时通过继承<code>AuthenticatingRealm</code>提供<code>doGetAuthenticationInfo</code>。我们在继承<code>AuthorizingRealm</code>时需要实现这两个抽象方法。</p><p><code>doGetAuthenticationInfo</code>方法用于获取系统存储的用户认证信息，它接收一个用户的Token，返回该用户的认证信息<code>AuthenticationInfo</code>。</p><p><code>doGetAuthorizationInfo</code>方法用于获取系统所存储的用户身份信息，即用户角色，它接收用户的Principals信息，返回用户的身份信息<code>AuthorizationInfo</code>。</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注入用户Service</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    AdminUserService aus;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现doGetAuthorizationInfo方法，通过用户principals获取用户身份并返回</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//由于用户可以有多个Principals这里需要获取到用户的主要Principal</span></span><br><span class="line">        String principal = (String) principalCollection.getPrimaryPrincipal();</span><br><span class="line">        <span class="comment">//通过用户Service获取用户domain对象，本例中用户principal为email</span></span><br><span class="line">        AdminUser au = aus.selectByEmail(principal);</span><br><span class="line">        <span class="comment">//如用户不存在则直接返回null</span></span><br><span class="line">        <span class="keyword">if</span>(au==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//用户可以有多个身份，存放于一个Set中</span></span><br><span class="line">        Set&lt;String&gt; authSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        authSet.add(au.getAuth());</span><br><span class="line">        <span class="comment">//通过Set创建用户身份信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthorizationInfo(authSet);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现AuthenticationInfo方法，通过用户principal信息获取用户认证信息并返回</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="comment">//从登录Token中取得用户的Principal</span></span><br><span class="line">        String principal = (String) authenticationToken.getPrincipal();</span><br><span class="line">        <span class="comment">//通过Principal从用户Service中获取用户domain对象</span></span><br><span class="line">        AdminUser au = aus.selectByEmail(principal);</span><br><span class="line">        <span class="comment">//如用户不存在则直接返回null</span></span><br><span class="line">        <span class="keyword">if</span>(au==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建用户认证信息并返回，这里使用SimpleAuthenticationInfo实现，SimpleAuthenticationInfo提供了多种构造方式。</span></span><br><span class="line">        <span class="comment">//这里使用的是hash+salt加密的认证信息构造方法 SimpleAuthenticationInfo(Object principal, Object hashedCredentials, ByteSource credentialsSalt, String realmName)</span></span><br><span class="line">        <span class="comment">//若不使用hash加密，则可直接使用 SimpleAuthenticationInfo(Object principal, Object credentials, String realmName)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(au.getEmail(),au.getPassword(), ByteSource.Util.bytes(au.getSalt()),<span class="keyword">this</span>.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是Realm&quot;&gt;&lt;a href=&quot;#什么是Realm&quot; class=&quot;headerlink&quot; title=&quot;什么是Realm&quot;&gt;&lt;/a&gt;什么是Realm&lt;/h2&gt;&lt;p&gt;Realm直译为王国或领地，再Shiro中，realm负责链接认证授权服务与其所使用的数据源。&lt;/p&gt;
&lt;p&gt;如果说Shiro是小区保安，负责筛查所有进出小区的车辆，realm就是保安手上的住户名单，负责记录每个用户的信息，包含&lt;code&gt;Principals&lt;/code&gt;（用户识别信息，通常是用户名或邮箱手机号），&lt;code&gt;Credentials&lt;/code&gt;（用户证明信息，通常就是密码），和&lt;code&gt;Authorization&lt;/code&gt;（用户身份）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="blog" scheme="http://jiangyixiong.top/categories/blog/"/>
    
    
  </entry>
  
  <entry>
    <title>输出将k个无差别礼物分配给n个小朋友的所有分法（python实现）</title>
    <link href="http://jiangyixiong.top/2020/08/01/%E8%BE%93%E5%87%BA%E5%B0%86k%E4%B8%AA%E6%97%A0%E5%B7%AE%E5%88%AB%E7%A4%BC%E7%89%A9%E5%88%86%E9%85%8D%E7%BB%99n%E4%B8%AA%E5%B0%8F%E6%9C%8B%E5%8F%8B%E7%9A%84%E6%89%80%E6%9C%89%E5%88%86%E6%B3%95%EF%BC%88python%E5%AE%9E%E7%8E%B0%EF%BC%89/"/>
    <id>http://jiangyixiong.top/2020/08/01/%E8%BE%93%E5%87%BA%E5%B0%86k%E4%B8%AA%E6%97%A0%E5%B7%AE%E5%88%AB%E7%A4%BC%E7%89%A9%E5%88%86%E9%85%8D%E7%BB%99n%E4%B8%AA%E5%B0%8F%E6%9C%8B%E5%8F%8B%E7%9A%84%E6%89%80%E6%9C%89%E5%88%86%E6%B3%95%EF%BC%88python%E5%AE%9E%E7%8E%B0%EF%BC%89/</id>
    <published>2020-08-01T00:38:56.000Z</published>
    <updated>2020-08-03T00:39:55.720Z</updated>
    
    <content type="html"><![CDATA[<p>我的算法思路为遍历所有可能性，感觉有点蠢</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#为小朋友分配礼物</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">distribute</span>(<span class="params">giftNum,childNum</span>):</span></span><br><span class="line">        children = [[[<span class="number">0</span>]*childNum]]</span><br><span class="line">        <span class="comment"># children[n]为小朋友们分n个礼物的所有可能分法</span></span><br><span class="line">        <span class="comment"># 如childNum为2时，children[1]=[[1,0],[0,1]]</span></span><br><span class="line">        <span class="comment"># 上一行代码初始化了小朋友们分0个礼物是的情况</span></span><br><span class="line">        <span class="keyword">for</span> times <span class="keyword">in</span> range(<span class="number">1</span>,giftNum+<span class="number">1</span>):</span><br><span class="line">                children.append([])</span><br><span class="line">                <span class="comment"># 增加一行用以记录增加一个礼物时的情况</span></span><br><span class="line">                <span class="keyword">for</span> prob <span class="keyword">in</span> range(len(children[times<span class="number">-1</span>])):</span><br><span class="line">                <span class="comment"># 遍历少一个礼物时的每一种情况</span></span><br><span class="line">                <span class="comment"># 对于每一种情况，增加一个礼物时会可能出现childNum种新情况</span></span><br><span class="line">                        <span class="keyword">for</span> tarChild <span class="keyword">in</span> range(childNum):</span><br><span class="line">                        <span class="comment"># 遍历增加一个礼物后的每一种情况,即该礼物分到各个小朋友手中时产生的情况</span></span><br><span class="line">                                child = children[times<span class="number">-1</span>][prob].copy()</span><br><span class="line">                                child[tarChild] += <span class="number">1</span></span><br><span class="line">                                <span class="comment"># 优化速度注释掉如下&#123;</span></span><br><span class="line">                                <span class="comment"># same = False</span></span><br><span class="line">                                <span class="comment"># for i in children[times]:</span></span><br><span class="line">                                <span class="comment">#         if child == i:</span></span><br><span class="line">                                <span class="comment">#                 same = True</span></span><br><span class="line">                                <span class="comment"># &#125;</span></span><br><span class="line">                                <span class="keyword">if</span> children[times].count(child) == <span class="number">0</span>:</span><br><span class="line">                                <span class="comment"># 判断该情况是否与之前情况有重合</span></span><br><span class="line">                                        children[times].append(child)</span><br><span class="line">        <span class="keyword">return</span> children[giftNum]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    inputLine = sys.stdin.readline().strip().split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">    inputLine = [int(str) <span class="keyword">for</span> str <span class="keyword">in</span> inputLine]</span><br><span class="line">    n = inputLine[<span class="number">0</span>]</span><br><span class="line">    k = inputLine[<span class="number">1</span>]</span><br><span class="line">    distribution = distribute(n,k)</span><br><span class="line">    print(len(distribution))</span><br><span class="line">    <span class="keyword">for</span> prob <span class="keyword">in</span> distribution:</span><br><span class="line">                count = <span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> prob:</span><br><span class="line">                        print(<span class="string">&quot;*&quot;</span>*i,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                        count = count+<span class="number">1</span></span><br><span class="line">                        <span class="keyword">if</span> count &lt; k:</span><br><span class="line">                                print(<span class="string">&quot;|&quot;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                print()</span><br><span class="line">        </span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我的算法思路为遍历所有可能性，感觉有点蠢&lt;/p&gt;
    
    </summary>
    
    
      <category term="blog" scheme="http://jiangyixiong.top/categories/blog/"/>
    
    
  </entry>
  
  <entry>
    <title>Hear不同 S01E03 《隐秘的角落》和解读一切的时代</title>
    <link href="http://jiangyixiong.top/2020/07/29/Hear%E4%B8%8D%E5%90%8CS01E03%E3%80%8A%E9%9A%90%E7%A7%98%E7%9A%84%E8%A7%92%E8%90%BD%E3%80%8B%E5%92%8C%E8%A7%A3%E8%AF%BB%E4%B8%80%E5%88%87%E7%9A%84%E6%97%B6%E4%BB%A3/"/>
    <id>http://jiangyixiong.top/2020/07/29/Hear%E4%B8%8D%E5%90%8CS01E03%E3%80%8A%E9%9A%90%E7%A7%98%E7%9A%84%E8%A7%92%E8%90%BD%E3%80%8B%E5%92%8C%E8%A7%A3%E8%AF%BB%E4%B8%80%E5%88%87%E7%9A%84%E6%97%B6%E4%BB%A3/</id>
    <published>2020-07-29T00:43:57.000Z</published>
    <updated>2020-08-03T08:04:57.528Z</updated>
    
    <content type="html"><![CDATA[<p>最近三位主播陆续看完了爆款出圈网剧《隐秘的角落》，正剧之外，都不约而同得去看了一些解读，由此意识到我们正处于解读一切的时代，于是我们以此作为话题进行了讨论。在节目开始的2分钟，刘轶抑制不住作为曼联球迷重回下赛季欧冠的喜悦，语无伦次了一会儿，请见谅。</p><a id="more"></a><iframe src="https://fireside.fm/player/v2/CSKDZ64u+5VtTqdqS?theme=dark" width="740" height="200" frameborder="0" scrolling="no"></iframe><p><strong>【本期营业人员】</strong></p><p>刘轶，<a href="https://www.weibo.com/u/1730354404">@amuro0061</a><br>陈老师，<a href="https://www.weibo.com/u/7475078094">@hearchen33</a><br>小雄，<a href="https://www.weibo.com/u/5628876835">@Gary熊了个熊</a></p><p><strong>【主题讨论】</strong></p><p>00:29 2019-2020英超联赛收官，曼联位列第3重回下赛季欧冠<br>03:00 《隐秘的角落》大热出圈引起了正剧之外方方面面的解读，更有程序员通过人工智能AI解读唇形<br>11:39 通过《隐秘的角落》让我们意识到，我们似乎处在【解读一切】的时代<br>13:21 越来越多的人在成为信息的生产者，成为解读者的门槛在变低，障碍在变少<br>16:20 独立思考和消化别人解读的成果，这两个行为是矛盾的吗<br>20:33 作为没有艺术相关知识的门外汉，解读是启发我们独立思考的前提<br>24:11 我们似乎已经习惯在解读里找到一种意识的认同<br>31:10 知识爆炸的时代，我们都需要浓缩的解读，就是所谓的“干货”<br>34:47 获得“干货“的过程比结果更重要，因为水分是你自己挤掉的<br>40:41 看了别人解读的结果很容易变成拾人牙慧的尴尬<br>45:32 曾经解读世界的权利只掌握在教会的手里，如今解读一切的时代是文明进步的产物<br>49:40 《隐秘的角落》是国产电视剧一次巨大的进步</p><p><strong>【节目BGM】</strong></p><p>Glory Glory Man United – 《Come On You Reds 99》<br>Streamers – 《Destroyed》 by Wave Racer</p><p><strong>【分享环节】</strong><br>小雄：玩游戏不再强迫自己体验所有支线<br>陈老师：没有分享和推荐，猜测是因为颈椎病有所改善<br>刘轶：《这！就是街舞》第三季，对张艺兴路转粉～</p><p><strong>【延伸阅读】</strong></p><p>程序员通过人工智能技术解析《隐秘的角落》：<br><a href="https://sspai.com/post/61269">https://sspai.com/post/61269</a></p><p>B站及油管视频up主【大聪看电影】，异形系列解读第一期《四万字解读普罗米修斯》：<br><a href="https://www.bilibili.com/video/BV1Rz4y1R7fT?from=search&amp;seid=4252473860033650144">https://www.bilibili.com/video/BV1Rz4y1R7fT?from=search&amp;seid=4252473860033650144</a></p><p>《这！就是街舞》第三季02，最终毛巾争夺战队长Battle：<br><a href="https://v.youku.com/v_show/id_XNDczNDc5MjU0MA==.html?s=adee048d2edc41949017&amp;scm=20140719.rcmd.15319.show_adee048d2edc41949017">https://v.youku.com/v_show/id_XNDczNDc5MjU0MA==.html?s=adee048d2edc41949017&amp;scm=20140719.rcmd.15319.show_adee048d2edc41949017</a></p><p>2019上映的电影《阳光普照》：<br><a href="https://www.bilibili.com/video/BV1mJ411T771?from=search&amp;seid=9693875576536071804">https://www.bilibili.com/video/BV1mJ411T771?from=search&amp;seid=9693875576536071804</a> </p><p><strong>【关于我们】</strong></p><p>“Hear不同”是一档凭直觉思维驱动的播客节目，话题多元且随机。我们谈话的目的是为了收获乐趣与自我觉察，无意也无能成为生活方式或社会思潮的引领者，君子和而不同，Hear不同。</p><p><strong>【订阅和rss】</strong></p><p>我们推荐使用泛用性播客客户端订阅我们的RSS进行节目的收听，地址如下：</p><p><a href="https://feeds.fireside.fm/hearbutong/rss">https://feeds.fireside.fm/hearbutong/rss</a></p><p>同时，我们的节目已在各大音频平台上线，包括喜马拉雅fm、荔枝fm、网易云音乐、Google podcast、苹果播客、小宇宙等，您的订阅和反馈是我们持续更新的核动力。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近三位主播陆续看完了爆款出圈网剧《隐秘的角落》，正剧之外，都不约而同得去看了一些解读，由此意识到我们正处于解读一切的时代，于是我们以此作为话题进行了讨论。在节目开始的2分钟，刘轶抑制不住作为曼联球迷重回下赛季欧冠的喜悦，语无伦次了一会儿，请见谅。&lt;/p&gt;
    
    </summary>
    
    
      <category term="podcast" scheme="http://jiangyixiong.top/categories/podcast/"/>
    
    
  </entry>
  
  <entry>
    <title>Hear不同 S01E02 入睡困难和刷不完的迷惑标题</title>
    <link href="http://jiangyixiong.top/2020/07/15/Hear%E4%B8%8D%E5%90%8CS01E02%E5%85%A5%E7%9D%A1%E5%9B%B0%E9%9A%BE%E5%92%8C%E5%88%B7%E4%B8%8D%E5%AE%8C%E7%9A%84%E8%BF%B7%E6%83%91%E6%A0%87%E9%A2%98/"/>
    <id>http://jiangyixiong.top/2020/07/15/Hear%E4%B8%8D%E5%90%8CS01E02%E5%85%A5%E7%9D%A1%E5%9B%B0%E9%9A%BE%E5%92%8C%E5%88%B7%E4%B8%8D%E5%AE%8C%E7%9A%84%E8%BF%B7%E6%83%91%E6%A0%87%E9%A2%98/</id>
    <published>2020-07-15T00:41:01.000Z</published>
    <updated>2020-08-03T00:43:18.245Z</updated>
    
    <content type="html"><![CDATA[<iframe src="https://fireside.fm/player/v2/CSKDZ64u+XVgpma-V?theme=dark" width="740" height="200" frameborder="0" scrolling="no"></iframe><p><strong>【开场BGM】</strong><br><a href="https://music.163.com/#/song?id=457761714">Griffin Oskar - Bullet Proof</a></p><p><strong>【本期营业人员】</strong><br>刘轶，<a href="https://www.weibo.com/u/1730354404">@amuro0061</a><br>陈老师，<a href="https://www.weibo.com/u/7475078094">@hearchen33</a><br>小雄，<a href="https://www.weibo.com/u/5628876835">@Gary熊了个熊</a></p><p><strong>【主题讨论】</strong><br>00:50 入睡困难时尝试了这些办法<br>01:50 沙雕新闻的标题吸引了我<br>06:00 我就想看看你们写了什么<br>08:40 欢迎给我们发律师信<br>12:10 标题党的写作公式<br>16:00 东方的克苏鲁在中国的社会新闻里<br>18:56 严肃媒体的标题讨论<br>26:00 标题真的很难写啊！我们第一期的标题被反馈不知所云<br>32:30 三段式的标题大概要长期陪伴我们了<br>35:42 沙雕新闻的标题本质上是个谜语的谜面<br>37:24 面对强烈的不安，我们会逃走，但如果不安相对较弱，则会唤起我们的好奇心</p><p><strong>【本期节目三段式的标题】</strong><br>《入睡困难？进来学习99%的人都不知道的入睡技巧，听众：一觉到天亮。》</p><p><strong>【分享环节】</strong><br>小雄：Windows端RSS订阅聚合阅读工具<br>陈老师：改善颈椎病好物第二弹<br>刘轶：不吝啬点赞</p><p><strong>【关于我们】</strong><br>“Hear不同”是一档凭直觉思维驱动的播客节目，话题多元且随机。我们谈话的目的是为了收获乐趣与自我觉察，无意也无能成为生活方式或社会思潮的引领者，君子和而不同，Hear不同。</p><p><strong>【订阅和rss】</strong><br>我们推荐使用泛用性播客客户端订阅我们的RSS进行节目的收听，地址如下：</p><p><a href="https://feeds.fireside.fm/hearbutong/rss">https://feeds.fireside.fm/hearbutong/rss</a></p><p>同时，我们的节目已在各大音频平台上线，包括喜马拉雅fm、荔枝fm、网易云音乐、Google podcast、苹果播客、小宇宙等，期待您的反馈和好评。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe src=&quot;https://fireside.fm/player/v2/CSKDZ64u+XVgpma-V?theme=dark&quot; width=&quot;740&quot; height=&quot;200&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;


      
    
    </summary>
    
    
      <category term="podcast" scheme="http://jiangyixiong.top/categories/podcast/"/>
    
    
  </entry>
  
  <entry>
    <title>Hear不同 S01E01 “拍一拍”和情绪化表达</title>
    <link href="http://jiangyixiong.top/2020/07/02/Hear%E4%B8%8D%E5%90%8CS01E01%20%E2%80%9C%E6%8B%8D%E4%B8%80%E6%8B%8D%E2%80%9D%E5%92%8C%E6%83%85%E7%BB%AA%E5%8C%96%E8%A1%A8%E8%BE%BE/"/>
    <id>http://jiangyixiong.top/2020/07/02/Hear%E4%B8%8D%E5%90%8CS01E01%20%E2%80%9C%E6%8B%8D%E4%B8%80%E6%8B%8D%E2%80%9D%E5%92%8C%E6%83%85%E7%BB%AA%E5%8C%96%E8%A1%A8%E8%BE%BE/</id>
    <published>2020-07-02T00:34:51.000Z</published>
    <updated>2020-08-03T00:37:35.751Z</updated>
    
    <content type="html"><![CDATA[<p>我们在2020年上半年的最后一天录制了“Hear不同”的第一期节目，感谢所有听完的朋友们，节目还很生涩，谢谢你们的包容。</p><a id="more"></a><iframe src="https://fireside.fm/player/v2/CSKDZ64u+cA2BLPDY?theme=dark" width="740" height="200" frameborder="0" scrolling="no"></iframe><p><strong>本期营业人员：</strong><br>刘轶，<a href="https://www.weibo.com/u/1730354404">@amuro0061</a><br>陈老师，<a href="https://www.weibo.com/u/7475078094">@hearchen33</a><br>小雄，<a href="https://www.weibo.com/u/5628876835">@Gary熊了个熊</a></p><p><strong>“你最近过得怎么样”分享环节：</strong><br>陈老师分享了他的颈椎病、显示器支架和学校的一些“刻板印象”<br>小雄分享了微信读书app的使用感受，提到了大热网剧《隐秘的角落》（无剧透）<br>刘轶分享了购买adobe audition的经历</p><p><strong>讨论环节：</strong><br>34:44 从微信“拍一拍”聊到情绪化表达</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在2020年上半年的最后一天录制了“Hear不同”的第一期节目，感谢所有听完的朋友们，节目还很生涩，谢谢你们的包容。&lt;/p&gt;
    
    </summary>
    
    
      <category term="podcast" scheme="http://jiangyixiong.top/categories/podcast/"/>
    
    
  </entry>
  
  <entry>
    <title>递归算法简单实现列表全排列（Python为例）</title>
    <link href="http://jiangyixiong.top/2020/06/01/%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E5%88%97%E8%A1%A8%E5%85%A8%E6%8E%92%E5%88%97%EF%BC%88Python%E4%B8%BA%E4%BE%8B%EF%BC%89/"/>
    <id>http://jiangyixiong.top/2020/06/01/%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E5%88%97%E8%A1%A8%E5%85%A8%E6%8E%92%E5%88%97%EF%BC%88Python%E4%B8%BA%E4%BE%8B%EF%BC%89/</id>
    <published>2020-06-01T00:24:34.000Z</published>
    <updated>2020-08-03T00:40:18.777Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算法说明"><a href="#算法说明" class="headerlink" title="算法说明"></a>算法说明</h2><h4 id="目的："><a href="#目的：" class="headerlink" title="目的："></a>目的：</h4><p>输出给定列表array的全部排列</p><a id="more"></a><h4 id="算法步骤："><a href="#算法步骤：" class="headerlink" title="算法步骤："></a>算法步骤：</h4><ol><li>利用递归思想将n阶问题化简为n-1阶问题</li><li>面对列表[1,2,3]，我们通常写出全排列的方法为：写出以1为开头的排列[1,2,3],[1,3,2]，再写出以2为开头的排列[2,1,3],[2,3,1]依次类推</li><li>故我们在面对3元素的列表时，我们是轮流取出元素作为头，之后将其余两个元素全排列后放在第一个元素后</li><li>所以我们可以知道全排列[x1,x2,x3,…,xn]时，我们会以x1作为头部，在其后加上其余元素即[x2,x3,…,xn]的全排列；再以x2作为头部，在其后加上[x1,x3,…,xn]的全排列；直到以xn作为头部，在其后加上[x1,x2,…,xn-1]的全排列</li><li>同时设定基线条件：当列表仅有一个元素时，仅有一种排列</li></ol><h4 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">arrange</span>(<span class="params">array</span>):</span><span class="comment">#全排列数组-通过递归</span></span><br><span class="line">    output = []</span><br><span class="line">    <span class="keyword">if</span> len(array) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> [array]<span class="comment">#当数组只有一个元素时直接返回该数组</span></span><br><span class="line">    <span class="keyword">else</span>:<span class="comment">#对于多个元素的数组，全排列相当于以不同的元素首，并将其余元素分全排列</span></span><br><span class="line">        <span class="comment"># 例如全排列[1,2,3]，相当于以1为头部排列[2,3]，以2为头部排列[1,3]，以3为头部排列[1,2]</span></span><br><span class="line">        <span class="comment"># 所以全排列为[1]+arrange([2,3]),[2]+arrange([1,3]),[3]+arrange([1,2])</span></span><br><span class="line">        <span class="comment"># 推广至n个元素的数列</span></span><br><span class="line">        <span class="comment"># arrange([x1,x2,...,xn])为[x1]+arrange([x2,x3,...,xn]),[x2]+arrange([x1,x3,...,xn]),...,[xn]+arrange([x1,x2,...,xn-1])</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> array:</span><br><span class="line">            subArr = array.copy()</span><br><span class="line">            subArr.remove(i)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> arrange(subArr):</span><br><span class="line">                newArr = [i]+j</span><br><span class="line">                output.append(newArr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;算法说明&quot;&gt;&lt;a href=&quot;#算法说明&quot; class=&quot;headerlink&quot; title=&quot;算法说明&quot;&gt;&lt;/a&gt;算法说明&lt;/h2&gt;&lt;h4 id=&quot;目的：&quot;&gt;&lt;a href=&quot;#目的：&quot; class=&quot;headerlink&quot; title=&quot;目的：&quot;&gt;&lt;/a&gt;目的：&lt;/h4&gt;&lt;p&gt;输出给定列表array的全部排列&lt;/p&gt;
    
    </summary>
    
    
      <category term="blog" scheme="http://jiangyixiong.top/categories/blog/"/>
    
    
  </entry>
  
</feed>
