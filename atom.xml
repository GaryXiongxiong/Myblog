<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>蒋亦雄的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jiangyixiong.top/"/>
  <updated>2020-09-19T07:23:56.995Z</updated>
  <id>http://jiangyixiong.top/</id>
  
  <author>
    <name>Yixiong Jiang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode笔记 二叉树的序列化与反序列化</title>
    <link href="http://jiangyixiong.top/2020/09/19/LeetCode%E7%AC%94%E8%AE%B0-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://jiangyixiong.top/2020/09/19/LeetCode%E7%AC%94%E8%AE%B0-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2020-09-19T07:16:24.000Z</published>
    <updated>2020-09-19T07:23:56.995Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>序列化是将一个数据结构或者对象转换为连续的比特位的操作，进而可以将转换后的数据存储在一个文件或者内存中，同时也可以通过网络传输到另一个计算机环境，采取相反方式重构得到原数据。</p><p>请设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 / 反序列化算法执行逻辑，你只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。</p><p>示例: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">你可以将以下二叉树：</span><br><span class="line"></span><br><span class="line">    1</span><br><span class="line">   &#x2F; \</span><br><span class="line">  2   3</span><br><span class="line">     &#x2F; \</span><br><span class="line">    4   5</span><br><span class="line"></span><br><span class="line">序列化为 &quot;[1,2,3,null,null,4,5]&quot;</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree">https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>大体思路为BFS，不过过程中需要处理字节点为null的情况。所以突发奇想引入Java中的Optional类来简化算法</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Codec</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">serialize</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span>==root)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;[]&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Queue&lt;Optional&lt;TreeNode&gt;&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">        queue.offer(Optional.of(root));</span><br><span class="line">        <span class="keyword">int</span> nullCounter = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            Optional&lt;TreeNode&gt; curNode = queue.poll();</span><br><span class="line">            <span class="keyword">if</span>(curNode.isEmpty())&#123;</span><br><span class="line">                nullCounter--;</span><br><span class="line">                sb.append(<span class="string">&quot;null,&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                Optional&lt;TreeNode&gt; left = Optional.ofNullable(curNode.get().left);</span><br><span class="line">                Optional&lt;TreeNode&gt; right = Optional.ofNullable(curNode.get().right);</span><br><span class="line">                <span class="keyword">if</span>(left.isEmpty())&#123;</span><br><span class="line">                    nullCounter++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(right.isEmpty())&#123;</span><br><span class="line">                    nullCounter++;</span><br><span class="line">                &#125;</span><br><span class="line">                queue.offer(left);</span><br><span class="line">                queue.offer(right);</span><br><span class="line">                sb.append(curNode.get().val+<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nullCounter==queue.size())&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sb.delete(sb.length()-<span class="number">1</span>,sb.length());</span><br><span class="line">        sb.append(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">deserialize</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        data = data.replace(<span class="string">&quot;[&quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;]&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        LinkedList&lt;String&gt; elements = <span class="keyword">new</span> LinkedList&lt;&gt;(Arrays.asList(data.split(<span class="string">&quot;,&quot;</span>)));</span><br><span class="line">        Queue&lt;Optional&lt;TreeNode&gt;&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        String rootElement = elements.pollFirst();</span><br><span class="line">        <span class="keyword">if</span>(rootElement==<span class="keyword">null</span>||<span class="string">&quot;null&quot;</span>.equals(rootElement)||<span class="string">&quot;&quot;</span>.equals(rootElement))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(Integer.parseInt(rootElement));</span><br><span class="line">        queue.offer(Optional.ofNullable(root));</span><br><span class="line">        <span class="keyword">while</span>(!elements.isEmpty()&amp;&amp;!queue.isEmpty())&#123;</span><br><span class="line">            Optional&lt;TreeNode&gt; curNode = queue.poll();</span><br><span class="line">            <span class="keyword">if</span>(!curNode.isEmpty())&#123;</span><br><span class="line">                String left = elements.poll();</span><br><span class="line">                String right = elements.poll();</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">null</span>!=left&amp;&amp;!<span class="string">&quot;null&quot;</span>.equals(left))&#123;</span><br><span class="line">                    curNode.get().left = <span class="keyword">new</span> TreeNode(Integer.parseInt(left));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    curNode.get().left = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">null</span>!=right&amp;&amp;!<span class="string">&quot;null&quot;</span>.equals(right))&#123;</span><br><span class="line">                    curNode.get().right = <span class="keyword">new</span> TreeNode(Integer.parseInt(right));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    curNode.get().right = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                queue.offer(Optional.ofNullable(curNode.get().left));</span><br><span class="line">                queue.offer(Optional.ofNullable(curNode.get().right));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Your Codec object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment">// Codec codec = new Codec();</span></span><br><span class="line"><span class="comment">// codec.deserialize(codec.serialize(root));</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;序列化是将一个数据结构或者对象转换为连续的比特位的操作，进而可以将转换后的数据存储在一个文件或者内存中，同时也可以通过网络传输到另一个计算机
      
    
    </summary>
    
    
      <category term="blog" scheme="http://jiangyixiong.top/categories/blog/"/>
    
    
      <category term="Algorithm" scheme="http://jiangyixiong.top/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>常见安全测试项目总结 - 1</title>
    <link href="http://jiangyixiong.top/2020/09/19/%E5%B8%B8%E8%A7%81%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93-1/"/>
    <id>http://jiangyixiong.top/2020/09/19/%E5%B8%B8%E8%A7%81%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93-1/</id>
    <published>2020-09-19T06:26:00.000Z</published>
    <updated>2020-09-19T08:31:17.237Z</updated>
    
    <content type="html"><![CDATA[<p>最近工作中接触到了一家安全公司出具的安全扫描报告，感觉其中所列的安全检查事项与常见漏洞比较齐全，故记录下以供之后学习。</p><a id="more"></a><h2 id="SQL注入攻击"><a href="#SQL注入攻击" class="headerlink" title="SQL注入攻击"></a>SQL注入攻击</h2><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><blockquote><p>SQL注入攻击主要是由于程序员在开发过程中没有对客户端所传输到服务器端的参数进行严格的安全检查，同时SQL语句的执行引用了该参数，并且SQL语句采用字符串拼接的方式执行时，攻击者将可能在参数中插入恶意的SQL查询语句，导致服务器执行了该恶意SQL语句。SQL注入漏洞主要影响是攻击者可利用该漏洞窃取数据库中的任意内容，在某些场景下，攻击者将有可能获得数据库服务器的完全控制权限。</p></blockquote><h4 id="典型示例："><a href="#典型示例：" class="headerlink" title="典型示例："></a>典型示例：</h4><p>如果在代码中直接拼接SQL，则可能产生此类漏洞。例如，我们接收一个用户输入的产品名称并从数据库中取出相关产品返回。如果我们使用拼接字符串：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String SQLQuery = <span class="string">&quot;SELECT * FROM product WHERE product_name =&quot;</span> + userInput + <span class="string">&quot;;&quot;</span></span><br></pre></td></tr></table></figure><p>这时如果用户输入为<code>&#39;test&#39;;DROP table product--</code>，那么最终拼接成的字符串将成为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> product_name = <span class="string">&#x27;test&#x27;</span>; <span class="keyword">DROP</span> <span class="keyword">table</span> product <span class="comment">--;</span></span><br></pre></td></tr></table></figure><p>或者，攻击者可以通过输入追加条件，如<code>&#39;test&#39; OR 1=1</code>拉取整张product表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> product_name = <span class="string">&#x27;test&#x27;</span> <span class="keyword">OR</span> <span class="number">1</span>=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="CSRF跨站伪造请求"><a href="#CSRF跨站伪造请求" class="headerlink" title="CSRF跨站伪造请求"></a>CSRF跨站伪造请求</h2><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><blockquote><p> CSRF（Cross-Site Request Forgery，跨站点伪造请求）是一种网络攻击方式，该攻击可以在用户毫不知情的情况下以用户自身的名义伪造请求发送给受攻击站点，从而在未授权的情况下执行在权限保护之下的操作。具体来讲，可以这样理解CSRF攻击：攻击者盗用了你的身份，以你的名义发送恶意请求，对服务器来说这个请求是完全合法的，但是却完成了攻击者所期望的一个操作，比如以你的名义发送邮件、发消息，盗取你的账号，添加系统管理员，甚至于购买商品、虚拟货币转账等。  </p></blockquote><h4 id="典型示例"><a href="#典型示例" class="headerlink" title="典型示例"></a>典型示例</h4><p>银行网站 A，它以 GET 请求来完成银行转账的操作，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.mybank.com&#x2F;Transfer.php?toBankId&#x3D;11&amp;money&#x3D;1000</span><br></pre></td></tr></table></figure><p>危险网站 B，它里面有一段 HTML 的代码如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">http://www.mybank.com/Transfer.php?toBankId</span>=<span class="string">11&amp;money</span>=<span class="string">1000</span>&gt;</span></span><br></pre></td></tr></table></figure><p>首先，你登录了银行网站 A ，然后访问危险网站 B ，噢，这时你会发现你的银行账户少了 1000 块…</p><h2 id="XSS跨站脚本攻击"><a href="#XSS跨站脚本攻击" class="headerlink" title="XSS跨站脚本攻击"></a>XSS跨站脚本攻击</h2><h4 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h4><blockquote><p>跨站脚本攻击(Cross Site Scripting)，为不和层叠样式表(Cascading  Style Sheets, CSS)的缩写混淆，故将跨站脚本攻击缩写为XSS。恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。在不同场景下，XSS有相应不同的表现形式，主要分为反射型、存储型以及DOM型的跨站脚本攻击，所造成的影响主要是窃取用户登录凭证（Cookies）、挂马攻击、页面访问挟持等。  </p></blockquote><h4 id="典型示例-1"><a href="#典型示例-1" class="headerlink" title="典型示例"></a>典型示例</h4><p>在一些留言或者允许用户输入富文本并展示在页面上的地方，如果不做关键html标签的拦截，用户将可以通过输入<code>&lt;script&gt;</code>标签来向页面注入脚本。这些脚本可以拿到cookie、代用户发出请求、篡改页面内容，从而达成攻击效果。</p><h2 id="SSRF-服务端请求伪造"><a href="#SSRF-服务端请求伪造" class="headerlink" title="SSRF 服务端请求伪造"></a>SSRF 服务端请求伪造</h2><h4 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h4><blockquote><p>SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成并由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）<br>SSRF 形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。比如从指定URL地址获取网页文本内容，加载指定地址的图片，下载等等。最终将可能导致，攻击者可通过外网服务器端利用该漏洞访问内网服务器端的资源。</p></blockquote><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>如某些网站提供网页转码、图片待下载、在线翻译等功能，如果存在SSRF漏洞则可以通过篡改请求地址获取服务器本地文件或请求内网资源，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.xingkonglangzi.com&#x2F;ssrf.php?url&#x3D;file&#x2F;&#x2F;&#x2F;c.&#x2F;windows&#x2F;win.ini </span><br></pre></td></tr></table></figure><h2 id="任意文件上传"><a href="#任意文件上传" class="headerlink" title="任意文件上传"></a>任意文件上传</h2><h4 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h4><blockquote><p>任意文件上传漏洞主要是由于程序员在开发文件上传功能时，没有考虑对文件格式后缀的合法性进行校验或只考虑在应用前端（Web浏览器端）通过javascript进行后缀校验，攻击者可上传一个包含恶意代码的动态脚本（如jsp、asp、php、aspx文件后缀）到服务器上，攻击者访问该脚本时服务器将对包含恶意代码的动态脚本解析，最终执行相应的恶意代码。该漏洞最终将可能直接影响应用系统的服务器安全，攻击者可通过所上传的脚本完全控制服务器。  </p></blockquote><h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><p>当网站提供文件上传服务且未限制文件类型，而上传的目录又恰好有脚本执行权限，那么攻击者就可以通过编写恶意脚本并上传执行来完成攻击</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> <span class="keyword">import</span>=<span class="string">&quot;java.io.File&quot;</span>%&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=utf-8&quot;</span> pageEncoding=<span class="string">&quot;utf-8&quot;</span>%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    String root = request.getServletContext().getRealPath(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    out.write(<span class="string">&quot;系统部署绝对路径:&quot;</span>+root);</span><br><span class="line">    File file = <span class="keyword">new</span> File(root+<span class="string">&quot;/index.jsp&quot;</span>);</span><br><span class="line">    file.delete();</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><blockquote><p><a href="https://www.jianshu.com/p/64a413ada155">https://www.jianshu.com/p/64a413ada155</a></p><p><a href="https://blog.csdn.net/tanzhen1991910/article/details/53260446">https://blog.csdn.net/tanzhen1991910/article/details/53260446</a></p><p><a href="https://websec.readthedocs.io/zh/latest/vuln/ssrf.html">https://websec.readthedocs.io/zh/latest/vuln/ssrf.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近工作中接触到了一家安全公司出具的安全扫描报告，感觉其中所列的安全检查事项与常见漏洞比较齐全，故记录下以供之后学习。&lt;/p&gt;
    
    </summary>
    
    
      <category term="blog" scheme="http://jiangyixiong.top/categories/blog/"/>
    
    
      <category term="安全" scheme="http://jiangyixiong.top/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 读取配置字符串中转义字符的小坑</title>
    <link href="http://jiangyixiong.top/2020/09/09/Spring-Boot-%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6%E7%9A%84%E5%B0%8F%E5%9D%91/"/>
    <id>http://jiangyixiong.top/2020/09/09/Spring-Boot-%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6%E7%9A%84%E5%B0%8F%E5%9D%91/</id>
    <published>2020-09-09T11:30:03.000Z</published>
    <updated>2020-09-09T11:36:50.242Z</updated>
    
    <content type="html"><![CDATA[<p>今天遇到一个问题，从配置中读取的字符串内容中的<code>\n</code>不换行，类似如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">wechat:</span></span><br><span class="line">    <span class="attr">message:</span></span><br><span class="line">        <span class="attr">error:</span> <span class="string">出现如下错误：\n</span> <span class="number">1</span><span class="string">.错误1</span> <span class="string">\n</span> <span class="number">2</span><span class="string">.错误2</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;wechat.message.error&#125;&quot;)</span></span><br><span class="line">String errorMessage;</span><br></pre></td></tr></table></figure><p>得到的<code>errorMessage</code>的值为<code>&quot;出现如下错误：\n 1.错误1 \n 2.错误2&quot;</code>其中<code>\n</code>作为字符显示，并不能换行。一开始以为是View曾解析的问题，折腾半天后发现，在Spring Boot读取配置时，会将配置字符串中的<code>\n</code>作为字符读入，等价于<code>\\n</code>。</p><p>解决该问题也很简单，在配置文件中用引号包裹包含转义字符的字符串即可：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">wechat:</span></span><br><span class="line">    <span class="attr">message:</span></span><br><span class="line">        <span class="attr">error:</span> <span class="string">&quot;出现如下错误：\n 1.错误1 \n 2.错误2&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天遇到一个问题，从配置中读取的字符串内容中的&lt;code&gt;\n&lt;/code&gt;不换行，类似如下：&lt;/p&gt;
&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1
      
    
    </summary>
    
    
      <category term="blog" scheme="http://jiangyixiong.top/categories/blog/"/>
    
    
      <category term="Spring Boot" scheme="http://jiangyixiong.top/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Elastic Search学习笔记一 - Docker安装 Elastic Search 并快速开始</title>
    <link href="http://jiangyixiong.top/2020/09/08/Elastic%20Search%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80-Docker%E5%AE%89%E8%A3%85Elastic-Search%E5%B9%B6%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/"/>
    <id>http://jiangyixiong.top/2020/09/08/Elastic%20Search%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80-Docker%E5%AE%89%E8%A3%85Elastic-Search%E5%B9%B6%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/</id>
    <published>2020-09-08T08:59:34.000Z</published>
    <updated>2020-09-08T09:41:33.418Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker-安装-Elastic-Search"><a href="#Docker-安装-Elastic-Search" class="headerlink" title="Docker 安装 Elastic Search"></a>Docker 安装 Elastic Search</h2><h4 id="编写Docker-compose-yml"><a href="#编写Docker-compose-yml" class="headerlink" title="编写Docker-compose.yml"></a>编写<code>Docker-compose.yml</code></h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">es:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.elastic.co/elasticsearch/elasticsearch:7.9.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">es</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9200:9200&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9300:9300&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">discovery.type=single-node</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ES_JAVA_OPTS=-Xms256m</span> <span class="string">-Xmx512m</span></span><br><span class="line">  <span class="attr">kibana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">kibana:7.9.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kibana</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5601:5601&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ELASTICSEARCH_HOSTS=http://es:9200</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">es</span></span><br></pre></td></tr></table></figure><h4 id="运行docker-compose"><a href="#运行docker-compose" class="headerlink" title="运行docker-compose"></a>运行docker-compose</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><h4 id="验证Kibana与Elastic-Search"><a href="#验证Kibana与Elastic-Search" class="headerlink" title="验证Kibana与Elastic Search"></a>验证Kibana与Elastic Search</h4><ol><li><p>前往 docker宿主机地址:5601，打开Kibana环境</p></li><li><p>点击左下 Dev Tools</p></li><li><p>运行<code>GET _cluster/health</code></p></li><li><p>确认ES健康信息</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;cluster_name&quot;</span> : <span class="string">&quot;docker-cluster&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;status&quot;</span> : <span class="string">&quot;green&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;number_of_nodes&quot;</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;number_of_data_nodes&quot;</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;active_primary_shards&quot;</span> : <span class="number">6</span>,</span><br><span class="line">  <span class="attr">&quot;active_shards&quot;</span> : <span class="number">6</span>,</span><br><span class="line">  <span class="attr">&quot;relocating_shards&quot;</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;initializing_shards&quot;</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;unassigned_shards&quot;</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;delayed_unassigned_shards&quot;</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;number_of_pending_tasks&quot;</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;number_of_in_flight_fetch&quot;</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;task_max_waiting_in_queue_millis&quot;</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;active_shards_percent_as_number&quot;</span> : <span class="number">100.0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="基本Query"><a href="#基本Query" class="headerlink" title="基本Query"></a>基本Query</h2><h4 id="插入-更新文档"><a href="#插入-更新文档" class="headerlink" title="插入/更新文档"></a>插入/更新文档</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">PUT /megacorp/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;first_name&quot;</span> : <span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;last_name&quot;</span> :  <span class="string">&quot;Smith&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span> :        <span class="number">25</span>,</span><br><span class="line">    <span class="attr">&quot;about&quot;</span> :      <span class="string">&quot;I love to go rock climbing&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;interests&quot;</span>: [ <span class="string">&quot;sports&quot;</span>, <span class="string">&quot;music&quot;</span> ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT /megacorp/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;first_name&quot;</span> :  <span class="string">&quot;Jane&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;last_name&quot;</span> :   <span class="string">&quot;Smith&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span> :         <span class="number">32</span>,</span><br><span class="line">    <span class="attr">&quot;about&quot;</span> :       <span class="string">&quot;I like to collect rock albums&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;interests&quot;</span>:  [ <span class="string">&quot;music&quot;</span> ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT /megacorp/_doc/3</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;first_name&quot;</span> :  <span class="string">&quot;Douglas&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;last_name&quot;</span> :   <span class="string">&quot;Fir&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span> :         <span class="number">35</span>,</span><br><span class="line">    <span class="attr">&quot;about&quot;</span>:        <span class="string">&quot;I like to build cabinets&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;interests&quot;</span>:  [ <span class="string">&quot;forestry&quot;</span> ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT /megacorp/_doc/4</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;first_name&quot;</span> :  <span class="string">&quot;Gary&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;last_name&quot;</span> :   <span class="string">&quot;Jiang&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span> :         <span class="number">26</span>,</span><br><span class="line">    <span class="attr">&quot;about&quot;</span>:        <span class="string">&quot;I like Coding&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;interests&quot;</span>:  [ <span class="string">&quot;coding&quot;</span> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="根据id获取文档"><a href="#根据id获取文档" class="headerlink" title="根据id获取文档"></a>根据id获取文档</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /megacorp/_doc/1</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;megacorp&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_version&quot;</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span> : <span class="number">6</span>,</span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;found&quot;</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;first_name&quot;</span> : <span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;last_name&quot;</span> : <span class="string">&quot;Smith&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span> : <span class="number">25</span>,</span><br><span class="line">    <span class="attr">&quot;about&quot;</span> : <span class="string">&quot;I love to go rock climbing&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;interests&quot;</span> : [</span><br><span class="line">      <span class="string">&quot;sports&quot;</span>,</span><br><span class="line">      <span class="string">&quot;music&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="轻量搜索"><a href="#轻量搜索" class="headerlink" title="轻量搜索"></a>轻量搜索</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /megacorp/_search?q=last_name:Smith</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;took&quot;</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : &#123;</span><br><span class="line">      <span class="attr">&quot;value&quot;</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> : <span class="string">&quot;eq&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> : <span class="number">0.44183272</span>,</span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;megacorp&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;employee&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;2&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">0.44183272</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;first_name&quot;</span> : <span class="string">&quot;Jane&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;last_name&quot;</span> : <span class="string">&quot;Smith&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;age&quot;</span> : <span class="number">32</span>,</span><br><span class="line">          <span class="attr">&quot;about&quot;</span> : <span class="string">&quot;I like to collect rock albums&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;interests&quot;</span> : [</span><br><span class="line">            <span class="string">&quot;music&quot;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;megacorp&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;employee&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">0.44183272</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;first_name&quot;</span> : <span class="string">&quot;John&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;last_name&quot;</span> : <span class="string">&quot;Smith&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;age&quot;</span> : <span class="number">25</span>,</span><br><span class="line">          <span class="attr">&quot;about&quot;</span> : <span class="string">&quot;I love to go rock climbing&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;interests&quot;</span> : [</span><br><span class="line">            <span class="string">&quot;sports&quot;</span>,</span><br><span class="line">            <span class="string">&quot;music&quot;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查询表达式搜索"><a href="#查询表达式搜索" class="headerlink" title="查询表达式搜索"></a>查询表达式搜索</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /megacorp/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;last_name&quot;</span>: <span class="string">&quot;Smith&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;took&quot;</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : &#123;</span><br><span class="line">      <span class="attr">&quot;value&quot;</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> : <span class="string">&quot;eq&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> : <span class="number">0.44183272</span>,</span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;megacorp&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;employee&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;2&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">0.44183272</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;first_name&quot;</span> : <span class="string">&quot;Jane&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;last_name&quot;</span> : <span class="string">&quot;Smith&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;age&quot;</span> : <span class="number">32</span>,</span><br><span class="line">          <span class="attr">&quot;about&quot;</span> : <span class="string">&quot;I like to collect rock albums&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;interests&quot;</span> : [</span><br><span class="line">            <span class="string">&quot;music&quot;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;megacorp&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;employee&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">0.44183272</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;first_name&quot;</span> : <span class="string">&quot;John&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;last_name&quot;</span> : <span class="string">&quot;Smith&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;age&quot;</span> : <span class="number">25</span>,</span><br><span class="line">          <span class="attr">&quot;about&quot;</span> : <span class="string">&quot;I love to go rock climbing&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;interests&quot;</span> : [</span><br><span class="line">            <span class="string">&quot;sports&quot;</span>,</span><br><span class="line">            <span class="string">&quot;music&quot;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">GET /megacorp/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;must&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;last_name&quot;</span>: <span class="string">&quot;Smith&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;filter&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;range&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;age&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;gt&quot;</span>: <span class="number">30</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;took&quot;</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : &#123;</span><br><span class="line">      <span class="attr">&quot;value&quot;</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> : <span class="string">&quot;eq&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> : <span class="number">0.44183272</span>,</span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;megacorp&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;employee&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;2&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">0.44183272</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;first_name&quot;</span> : <span class="string">&quot;Jane&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;last_name&quot;</span> : <span class="string">&quot;Smith&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;age&quot;</span> : <span class="number">32</span>,</span><br><span class="line">          <span class="attr">&quot;about&quot;</span> : <span class="string">&quot;I like to collect rock albums&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;interests&quot;</span> : [</span><br><span class="line">            <span class="string">&quot;music&quot;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="全文搜索"><a href="#全文搜索" class="headerlink" title="全文搜索"></a>全文搜索</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /megacorp/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;about&quot;</span>: <span class="string">&quot;rock climbing&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;took&quot;</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : &#123;</span><br><span class="line">      <span class="attr">&quot;value&quot;</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> : <span class="string">&quot;eq&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> : <span class="number">1.0797646</span>,</span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;megacorp&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;employee&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">1.0797646</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;first_name&quot;</span> : <span class="string">&quot;John&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;last_name&quot;</span> : <span class="string">&quot;Smith&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;age&quot;</span> : <span class="number">25</span>,</span><br><span class="line">          <span class="attr">&quot;about&quot;</span> : <span class="string">&quot;I love to go rock climbing&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;interests&quot;</span> : [</span><br><span class="line">            <span class="string">&quot;sports&quot;</span>,</span><br><span class="line">            <span class="string">&quot;music&quot;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;megacorp&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;employee&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;2&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">0.42033815</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;first_name&quot;</span> : <span class="string">&quot;Jane&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;last_name&quot;</span> : <span class="string">&quot;Smith&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;age&quot;</span> : <span class="number">32</span>,</span><br><span class="line">          <span class="attr">&quot;about&quot;</span> : <span class="string">&quot;I like to collect rock albums&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;interests&quot;</span> : [</span><br><span class="line">            <span class="string">&quot;music&quot;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="短语搜索"><a href="#短语搜索" class="headerlink" title="短语搜索"></a>短语搜索</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /megacorp/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match_phrase&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;about&quot;</span>: <span class="string">&quot;rock climbing&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;took&quot;</span> : <span class="number">37</span>,</span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : &#123;</span><br><span class="line">      <span class="attr">&quot;value&quot;</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> : <span class="string">&quot;eq&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> : <span class="number">1.0797647</span>,</span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;megacorp&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;employee&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">1.0797647</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;first_name&quot;</span> : <span class="string">&quot;John&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;last_name&quot;</span> : <span class="string">&quot;Smith&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;age&quot;</span> : <span class="number">25</span>,</span><br><span class="line">          <span class="attr">&quot;about&quot;</span> : <span class="string">&quot;I love to go rock climbing&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;interests&quot;</span> : [</span><br><span class="line">            <span class="string">&quot;sports&quot;</span>,</span><br><span class="line">            <span class="string">&quot;music&quot;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Docker-安装-Elastic-Search&quot;&gt;&lt;a href=&quot;#Docker-安装-Elastic-Search&quot; class=&quot;headerlink&quot; title=&quot;Docker 安装 Elastic Search&quot;&gt;&lt;/a&gt;Docker 安装 Elas
      
    
    </summary>
    
    
      <category term="blog" scheme="http://jiangyixiong.top/categories/blog/"/>
    
    
      <category term="Elastic Search" scheme="http://jiangyixiong.top/tags/Elastic-Search/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Stream 配合Kafka 基础使用demo</title>
    <link href="http://jiangyixiong.top/2020/09/08/Spring-Cloud-Stream-%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8demo/"/>
    <id>http://jiangyixiong.top/2020/09/08/Spring-Cloud-Stream-%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8demo/</id>
    <published>2020-09-08T03:08:39.000Z</published>
    <updated>2020-09-08T04:48:10.479Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介与概念"><a href="#简介与概念" class="headerlink" title="简介与概念"></a>简介与概念</h2><p>Spring Cloud Stream 是一个用于构建消息驱动微服务的框架。Spring Cloud Stream 基于 Spring Boot，整合消息中间件（Kafka或RabbitMQ） 构建可独立运行，生产级的Spring应用。</p><h4 id="应用模型"><a href="#应用模型" class="headerlink" title="应用模型"></a>应用模型</h4><p>一个<strong>Spring Cloud Stream</strong>应用程序依赖于于独立的消息中间件。应用通过<strong>Spring Cloud Stream</strong>注入的输入和输出<em>通道</em>与外部世界通信。通道通过专用的<em>Binder</em>实现与外部代理连接。这种模型屏蔽了消息中间件的使用差异，我们只需掌握Spring Cloud Stream的使用就可以方便的构建消息驱动的微服务应用。</p><p><img src="/images/spring-cloud-stream-model.png" alt="Spring Cloud Stream引用模型"></p><h4 id="Binder"><a href="#Binder" class="headerlink" title="Binder"></a>Binder</h4><p>Binder 是 Spring Cloud Stream 的一个抽象概念，是应用与消息中间件之间的粘合剂。目前 Spring Cloud Stream 实现了 Kafka 和 Rabbit MQ 的binder。</p><p>通过 binder ，可以很方便的连接中间件，可以动态的改变消息的<br> destinations（对应于 Kafka 的topic，Rabbit MQ 的 exchanges），这些都可以通过<code>spring.cloud.stream.binder</code>进行配置。</p><h4 id="发布订阅模型"><a href="#发布订阅模型" class="headerlink" title="发布订阅模型"></a>发布订阅模型</h4><p>Spring Cloud Stream 使用了经典的发布/订阅模式。发布者将消息发布到指定的Topic中，订阅者通过订阅该Topic来消费消息。</p><h4 id="Consumer-Group"><a href="#Consumer-Group" class="headerlink" title="Consumer Group"></a>Consumer Group</h4><p>类似于Kafka中消费者组的概念，每个binding可以指定一个group，一条消息只会被同一个group中的一个binding消费。可以被用来防止重复消费。可以于<code>spring.cloud.stream.bindings.&lt;channelName&gt;.group</code>中定义。</p><h2 id="搭建Kafka与Zookeeper"><a href="#搭建Kafka与Zookeeper" class="headerlink" title="搭建Kafka与Zookeeper"></a>搭建Kafka与Zookeeper</h2><p>为了在本地构建我们的第一个Spring Cloud Stream应用，我们需要先行搭建其依赖的Kafka。Kafka又需要用到Zookeeper。这里使用Docker Compose来快速搭建Kafka与Zookeeper。</p><h4 id="编写-Docker-compose-yml"><a href="#编写-Docker-compose-yml" class="headerlink" title="编写 Docker-compose.yml"></a>编写 <code>Docker-compose.yml</code></h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">kafka:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">wurstmeister/kafka</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kafka-streamlistener</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9092:9092&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_ADVERTISED_HOST_NAME=192.168.99.100</span> <span class="comment">#这里写docker宿主机地址。此例为在windows Docker Quickstart中运行，故地址为docker所在虚拟机的地址。</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_ADVERTISED_PORT=9092</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">zookeeper</span></span><br><span class="line">  <span class="attr">zookeeper:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">wurstmeister/zookeeper</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;2181:2181&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_ADVERTISED_HOST_NAME=zookeeper</span></span><br><span class="line">  <span class="attr">kafka-manager:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">sheepkiller/kafka-manager</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9000</span><span class="string">:9000</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">ZK_HOSTS:</span> <span class="string">zookeeper:2181</span></span><br><span class="line">      <span class="attr">KAFKA_BROKERS:</span> <span class="string">kafka:9092</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="启动配置好的Docker-compose"><a href="#启动配置好的Docker-compose" class="headerlink" title="启动配置好的Docker-compose"></a>启动配置好的Docker-compose</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>之后前往 <code>http://192.168.99.100:9000</code>验证 Kafka 运行情况</p><h2 id="构建-Spring-Cloud-Stream-应用"><a href="#构建-Spring-Cloud-Stream-应用" class="headerlink" title="构建 Spring Cloud Stream 应用"></a>构建 Spring Cloud Stream 应用</h2><p>本例中，我们将构建两个微服务，<code>Producer</code>开放Restful接口，并将接口请求发布至消息队列。<code>Sample</code>订阅队列并打印其中的消息。</p><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><p>首先在两个项目中引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-stream-test-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="在-Spring-Boot-中配置-Spring-Cloud-Stream-的-binder-与-bindings"><a href="#在-Spring-Boot-中配置-Spring-Cloud-Stream-的-binder-与-bindings" class="headerlink" title="在 Spring Boot 中配置 Spring Cloud Stream 的 binder 与 bindings"></a>在 Spring Boot 中配置 Spring Cloud Stream 的 binder 与 bindings</h4><p>Consumer的<code>application.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">kafka:</span></span><br><span class="line">        <span class="attr">binder:</span></span><br><span class="line">          <span class="comment"># Kafka节点地址列表</span></span><br><span class="line">          <span class="attr">brokers:</span> <span class="number">192.168</span><span class="number">.99</span><span class="number">.100</span><span class="string">:9092</span></span><br><span class="line">      <span class="attr">default-binder:</span> <span class="string">kafka</span></span><br><span class="line">      <span class="attr">bindings:</span></span><br><span class="line">        <span class="comment"># 设置binding</span></span><br><span class="line">        <span class="attr">msg_output:</span></span><br><span class="line">          <span class="comment"># 对应kafka的topic名称</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">msg</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">kafka</span></span><br><span class="line">        <span class="comment"># 可以设置多个binding，对应不同或相同的destination，如果destination相同且未设置group，将会重复消费对应destination中的消息。若group相同将会采用竞争策略，只有一个binding可以消费消息</span></span><br><span class="line">        <span class="attr">error_output:</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">error</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">kafka</span></span><br></pre></td></tr></table></figure><p>Consumer的<code>application.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">kafka:</span></span><br><span class="line">        <span class="attr">binder:</span></span><br><span class="line">          <span class="attr">brokers:</span> <span class="number">192.168</span><span class="number">.99</span><span class="number">.100</span><span class="string">:9092</span></span><br><span class="line">      <span class="attr">default-binder:</span> <span class="string">kafka</span></span><br><span class="line">      <span class="attr">bindings:</span></span><br><span class="line">        <span class="attr">msg_input:</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">msg</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">kafka</span></span><br><span class="line">        <span class="attr">error_input:</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">error</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">kafka</span></span><br></pre></td></tr></table></figure><h4 id="Producer编写"><a href="#Producer编写" class="headerlink" title="Producer编写"></a><code>Producer</code>编写</h4><p>定义binding接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义通道名称</span></span><br><span class="line">    String OUTPUT_CHANNEL =<span class="string">&quot;msg_output&quot;</span>;</span><br><span class="line">    String ERROR_CHANNEL =<span class="string">&quot;error_output&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过Output注解定义输出通道</span></span><br><span class="line">    <span class="meta">@Output(Producer.OUTPUT_CHANNEL)</span></span><br><span class="line">    <span class="function">MessageChannel <span class="title">messageOutput</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Output(Producer.ERROR_CHANNEL)</span></span><br><span class="line">    <span class="function">MessageChannel <span class="title">errorOutput</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开启<code>binding</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableBinding(Producer.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamproducerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(StreamproducerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义Controller接收请求并置入消息队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    Producer producer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/msg/&#123;key&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendMsg</span><span class="params">(<span class="meta">@PathVariable</span> String key, <span class="meta">@RequestBody</span> Object msg)</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; payload = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        payload.put(key,msg);</span><br><span class="line">        <span class="comment">//将负载送入通道</span></span><br><span class="line">        producer.messageOutput().send(MessageBuilder.withPayload(payload).build());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;sent&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/error/&#123;key&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendErr</span><span class="params">(<span class="meta">@PathVariable</span> String key, <span class="meta">@RequestBody</span> Object err)</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; payload = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        payload.put(key,err);</span><br><span class="line">        producer.errorOutput().send(MessageBuilder.withPayload(payload).build());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;sent&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Consumer编写"><a href="#Consumer编写" class="headerlink" title="Consumer编写"></a><code>Consumer</code>编写</h4><p>定义binding接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    String INPUT_CHANNEL =<span class="string">&quot;msg_input&quot;</span>;</span><br><span class="line">    String ERROR_CHANNEL =<span class="string">&quot;error_input&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Input(Consumer.INPUT_CHANNEL)</span></span><br><span class="line">    <span class="function">SubscribableChannel <span class="title">messageInput</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Input(Consumer.ERROR_CHANNEL)</span></span><br><span class="line">    <span class="function">SubscribableChannel <span class="title">errorInput</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>@StreamListener</code>注解消费消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableBinding(Consumer.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@StreamListener(Consumer.INPUT_CHANNEL)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInput</span><span class="params">(Map&lt;String,Object&gt; msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[msg]: &quot;</span>+msg.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@StreamListener(Consumer.ERROR_CHANNEL)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getError</span><span class="params">(Map&lt;String,Object&gt; error)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[err]: &quot;</span>+error.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p>Producer请求</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;msg&quot;</span>:<span class="string">&quot;hello&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;uid&quot;</span>:<span class="string">&quot;3319&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;error&quot;</span>:<span class="string">&quot;ERROR&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;uid&quot;</span>:<span class="string">&quot;2113&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Consumer输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[msg]: &#123;msg1&#x3D;&#123;msg&#x3D;hello, uid&#x3D;3319&#125;&#125;</span><br><span class="line">[err]: &#123;error1&#x3D;&#123;error&#x3D;ERROR, uid&#x3D;2113&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><ul><li><a href="https://blog.csdn.net/qq_32734365/article/details/81413218">Spring Cloud Stream中文指导手册</a></li><li><a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-stream/3.0.6.RELEASE/reference/html/spring-cloud-stream.html#_quick_start">Spring Cloud Stream - Quick Start</a></li><li><a href="https://www.jianshu.com/p/fb7d11c7f798">使用 Spring Cloud Stream 构建消息驱动微服务</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介与概念&quot;&gt;&lt;a href=&quot;#简介与概念&quot; class=&quot;headerlink&quot; title=&quot;简介与概念&quot;&gt;&lt;/a&gt;简介与概念&lt;/h2&gt;&lt;p&gt;Spring Cloud Stream 是一个用于构建消息驱动微服务的框架。Spring Cloud Stream 
      
    
    </summary>
    
    
      <category term="blog" scheme="http://jiangyixiong.top/categories/blog/"/>
    
    
      <category term="Kafka" scheme="http://jiangyixiong.top/tags/Kafka/"/>
    
      <category term="Spring Cloud" scheme="http://jiangyixiong.top/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud OpenFeign 快速上手</title>
    <link href="http://jiangyixiong.top/2020/09/07/Spring-Cloud-OpenFeign-%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/"/>
    <id>http://jiangyixiong.top/2020/09/07/Spring-Cloud-OpenFeign-%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</id>
    <published>2020-09-07T02:20:04.000Z</published>
    <updated>2020-09-07T06:53:07.456Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Feign是什么"><a href="#Feign是什么" class="headerlink" title="Feign是什么"></a>Feign是什么</h2><p>Feign是一个声明式的web服务客户端。他允许开发者通过注解与接口实现简单快捷的http客户端创建。Spring Cloud OpenFeign在Feign的基础上加入了对SpringMVC注解的支持</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h4 id="引入Maven依赖"><a href="#引入Maven依赖" class="headerlink" title="引入Maven依赖"></a>引入Maven依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="启用Feign的客户端功能"><a href="#启用Feign的客户端功能" class="headerlink" title="启用Feign的客户端功能"></a>启用Feign的客户端功能</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//在启动类上添加注解@EnableFeignClients</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="声明需要的客户端接口"><a href="#声明需要的客户端接口" class="headerlink" title="声明需要的客户端接口"></a>声明需要的客户端接口</h4><p>例如我们需要一个用于<code>stores</code>服务中<code>/stores</code>接口的客户端，那我们可以声明如下的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(&quot;stores&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StoreClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(method = RequestMethod.GET, value = &quot;/stores&quot;)</span></span><br><span class="line">    <span class="function">List&lt;Store&gt; <span class="title">getStores</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(method = RequestMethod.GET, value = &quot;/stores&quot;)</span></span><br><span class="line">    <span class="function">Page&lt;Store&gt; <span class="title">getStores</span><span class="params">(Pageable pageable)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(method = RequestMethod.POST, value = &quot;/stores/&#123;storeId&#125;&quot;, consumes = &quot;application/json&quot;)</span></span><br><span class="line">    <span class="function">Store <span class="title">update</span><span class="params">(<span class="meta">@PathVariable(&quot;storeId&quot;)</span> Long storeId, Store store)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后我们接可以通过简单的自动注入获取到StoreClient的服务，并调用其中的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line">StoreClient storeService;</span><br><span class="line"></span><br><span class="line">List&lt;Store&gt; = storeService.getStores();</span><br></pre></td></tr></table></figure><p><code>getStroes()</code>方法实际上是向<code>stores/sotres</code>接口发送GET请求，并将请求结果映射成<code>List&lt;Store&gt;</code>返回，正如我们在<code>StoreClient</code>接口中声明的。</p><h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><h4 id="SpringMVC相关注解"><a href="#SpringMVC相关注解" class="headerlink" title="SpringMVC相关注解"></a>SpringMVC相关注解</h4><p>从快速开始的例子中可以看到，OpenFeign支持SpringMVC风格的注解，包括<code>GetMapping</code>,<code>PostMapping</code>,<code>RequestMapping</code>等等。需要注意的是，这里的注解对应的是服务端的接口信息。例如在快速开始中的<code> @RequestMapping(method = RequestMethod.POST, value = &quot;/stores/&#123;storeId&#125;&quot;, consumes = &quot;application/json&quot;)</code> 其中的consumes不是我们这个方法消费参数的格式，而是服务端消费请求的方式，即我们的客户端发送请求的方式。</p><h4 id="FeignClient注解"><a href="#FeignClient注解" class="headerlink" title="@FeignClient注解"></a>@FeignClient注解</h4><p><code>FeignClient</code>注解是Feign中最常用的注解，可作用于接口上，用来声明此接口是一个Feign客户端，并声明该客户端调用服务的名称或url。该注解包含以下参数：</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td><code>value</code> / <code>name</code></td><td>客户端的名称。不管是否提供<code>url</code>都必须明确该属性。如果项目使用了Ribbon，name属性会作为微服务的名称，用于服务发现。</td></tr><tr><td><code>qualifier</code></td><td>定义客户端的qualifier值，对应<code>@Qualifier</code>注入方法。</td></tr><tr><td><code>url</code></td><td>配置调用服务的绝对地址</td></tr><tr><td><code>decode404</code></td><td>boolean值，当调用请求404的时候，如果该参数为true，就会执行配置的Decoder进行解码。如果该参数为false直接抛出异常。</td></tr><tr><td><code>configuration</code></td><td>指定Feign的配置类。可参考<code>org.springframework.cloud.netflix.feign.FeignClientsConfiguration</code>。</td></tr><tr><td><code>fallback</code></td><td>定义fallback类，执zhi行熔断或请求失败后的容错处理。这种做法无法知道熔断的异常信息。样例实现见下文。</td></tr><tr><td><code>fallbackFactory</code></td><td>定义fallbackFactor类，执zhi行熔断或请求失败后的容错处理，可以知道熔断的异常信息。样例实现见下文。</td></tr><tr><td><code>path</code></td><td>客户端访问接口地址的前缀。</td></tr><tr><td><code>primary</code></td><td>对应<code>Primary</code>注解，标注该bean为高注入优先级。</td></tr></tbody></table><h4 id="fallback类"><a href="#fallback类" class="headerlink" title="fallback类"></a>fallback类</h4><p>该类用于<code>fallback</code>参数，需实现对应的feignClient接口，例如对于此client：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;optimization-user&quot;, fallback = UserRemoteClientFallback.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRemoteClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/get&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span><span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>fallback类可写为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRemoteClientFallback</span> <span class="keyword">implements</span> <span class="title">UserRemoteClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="number">0</span>, <span class="string">&quot;默认fallback&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="fallbackFactory类"><a href="#fallbackFactory类" class="headerlink" title="fallbackFactory类"></a>fallbackFactory类</h4><p>fallbackFactory不同于fallback，它通过工厂模式生产一个实现了客户端接口的匿名内部类，并通过该工厂将熔断的异常信息传入该匿名内部类中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;optimization-user&quot;, fallbackFactory = UserRemoteClientFallbackFactory.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRemoteClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/get&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span><span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>fallbackFactory类定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRemoteClientFallbackFactory</span> <span class="keyword">implements</span> <span class="title">FallbackFactory</span>&lt;<span class="title">UserRemoteClient</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(UserRemoteClientFallbackFactory.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserRemoteClient <span class="title">create</span><span class="params">(Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserRemoteClient() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">                logger.error(<span class="string">&quot;UserRemoteClient.getUser异常&quot;</span>, cause);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="number">0</span>, <span class="string">&quot;默认&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h2><blockquote><ul><li><a href="https://github.com/spring-cloud/spring-cloud-openfeign/blob/master/docs/src/main/asciidoc/spring-cloud-openfeign.adoc">Spring Cloud OpenFeign 官方文档</a></li><li><a href="https://www.cnblogs.com/yinjihuan/p/12159986.html">那天晚上和@FeignClient注解的深度交流 from 猿天地</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Feign是什么&quot;&gt;&lt;a href=&quot;#Feign是什么&quot; class=&quot;headerlink&quot; title=&quot;Feign是什么&quot;&gt;&lt;/a&gt;Feign是什么&lt;/h2&gt;&lt;p&gt;Feign是一个声明式的web服务客户端。他允许开发者通过注解与接口实现简单快捷的http客
      
    
    </summary>
    
    
      <category term="blog" scheme="http://jiangyixiong.top/categories/blog/"/>
    
    
      <category term="Spring Cloud" scheme="http://jiangyixiong.top/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Kafka 消费者篇</title>
    <link href="http://jiangyixiong.top/2020/09/03/Kafka-%E6%B6%88%E8%B4%B9%E8%80%85%E7%AF%87/"/>
    <id>http://jiangyixiong.top/2020/09/03/Kafka-%E6%B6%88%E8%B4%B9%E8%80%85%E7%AF%87/</id>
    <published>2020-09-03T11:49:10.000Z</published>
    <updated>2020-09-04T02:47:38.503Z</updated>
    
    <content type="html"><![CDATA[<h2 id="消费者与消费者组"><a href="#消费者与消费者组" class="headerlink" title="消费者与消费者组"></a>消费者与消费者组</h2><p>消费者组是若干个消费者组成的集合，一个消费者组包含以下特性：</p><ul><li>一个消费者组可以有一个或多个消费者实例</li><li>消费者组名（GroupId）通常由一个一个字符串表示，有唯一性。</li><li>当一个消费者组订阅了主题，那么该主题中的每个分区职能分配给否一个消费者组中的某一个消费者程序</li></ul><p>一个分区对应一个消费者，一个消费者可以负责多个分区。消费者数量尽量不要超过话题的分区数，否则多出的消费者将处于空闲状态。</p><p><img src="/images/kafka-consumer.png" alt="image-20200904103005821"></p><h2 id="使用脚本控制消费者"><a href="#使用脚本控制消费者" class="headerlink" title="使用脚本控制消费者"></a>使用脚本控制消费者</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kafka-console-consumer.sh --broker-list broker_name:port --topic topic_name</span><br></pre></td></tr></table></figure><h2 id="使用消费者API"><a href="#使用消费者API" class="headerlink" title="使用消费者API"></a>使用消费者API</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.KafkaConsumer;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.ConsumerRecords;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaConsumerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建并写入客户端配置</span></span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//Kafka 集群地址合集</span></span><br><span class="line">        props.put(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;localhost:9092&quot;</span>);</span><br><span class="line">        <span class="comment">//Kafka 消费者组id</span></span><br><span class="line">        props.put(<span class="string">&quot;group.id&quot;</span>, <span class="string">&quot;CountryCounter&quot;</span>);</span><br><span class="line">        <span class="comment">//反序列化器</span></span><br><span class="line">        props.put(<span class="string">&quot;key.deserializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serializaiton.StrignDeserializer&quot;</span>);</span><br><span class="line">        props.put(<span class="string">&quot;value.deserializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serializaiton.StrignDeserializer&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//根据配置创建consumer</span></span><br><span class="line">           KafkaConsumer&lt;String, String&gt; consumer = <span class="keyword">new</span> KafkaConsumer&lt;String, String&gt;(props);</span><br><span class="line">        <span class="comment">//订阅topic</span></span><br><span class="line">           consumer.subscribe(Collections.singletonList(<span class="string">&quot;test&quot;</span>));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="comment">// 100 是超时时间（ms），在该时间内 poll 会等待服务器返回数据</span></span><br><span class="line">                ConsumerReccords&lt;String, String&gt; records = consumer.poll(<span class="number">100</span>); </span><br><span class="line">                </span><br><span class="line">                <span class="comment">// poll 返回一个记录列表。</span></span><br><span class="line">                <span class="comment">// 每条记录都包含了记录所属主题的信息、记录所在分区的信息、记录在分区里的偏移量，以及记录的键值对。</span></span><br><span class="line">                <span class="keyword">for</span> (ConsumerReccord&lt;String, String&gt; record : records) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;topic=%s, partition=%s, offset=%d, key=%s, value=%s&quot;</span>,</span><br><span class="line">                        record.topic(), record.partition(), record.offset(), </span><br><span class="line">                        record.key(), record.value());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭消费者,网络连接和 socket 也会随之关闭，并立即触发一次再均衡</span></span><br><span class="line">            consumer.close();</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>KafkaConsumer是非多线程并发安全的：如果多个线程公用一个KafkaConsumer实例，则抛出异常错误信息。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;消费者与消费者组&quot;&gt;&lt;a href=&quot;#消费者与消费者组&quot; class=&quot;headerlink&quot; title=&quot;消费者与消费者组&quot;&gt;&lt;/a&gt;消费者与消费者组&lt;/h2&gt;&lt;p&gt;消费者组是若干个消费者组成的集合，一个消费者组包含以下特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个
      
    
    </summary>
    
    
      <category term="blog" scheme="http://jiangyixiong.top/categories/blog/"/>
    
    
      <category term="Kafka" scheme="http://jiangyixiong.top/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Kafka 生产者篇</title>
    <link href="http://jiangyixiong.top/2020/09/02/Kafka-%E7%94%9F%E4%BA%A7%E8%80%85%E7%AF%87/"/>
    <id>http://jiangyixiong.top/2020/09/02/Kafka-%E7%94%9F%E4%BA%A7%E8%80%85%E7%AF%87/</id>
    <published>2020-09-02T07:06:35.000Z</published>
    <updated>2020-09-04T02:32:25.752Z</updated>
    
    <content type="html"><![CDATA[<p>生产者在业务中实时读取原始数据进行业务逻辑处理，然后调用Kafka的生产者接口将处理后的消息记录写入到Kafa集群中。</p><p><img src="/images/kafka-producer-process.png" alt="kafka-producer-process"></p><h2 id="使用脚本操作生产者"><a href="#使用脚本操作生产者" class="headerlink" title="使用脚本操作生产者"></a>使用脚本操作生产者</h2><h4 id="生产者发布消息"><a href="#生产者发布消息" class="headerlink" title="生产者发布消息"></a>生产者发布消息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kafka-console-producer.sh --broker-list broker_name:port --topic topic_name</span><br></pre></td></tr></table></figure><h4 id="消费者查看消息"><a href="#消费者查看消息" class="headerlink" title="消费者查看消息"></a>消费者查看消息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kafka-console-consumer.sh --broker-list broker_name:port --topic topic_name</span><br></pre></td></tr></table></figure><h2 id="使用Java-API操作生产者"><a href="#使用Java-API操作生产者" class="headerlink" title="使用Java API操作生产者"></a>使用Java API操作生产者</h2><h4 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kafka-clients<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="使用生产者API"><a href="#使用生产者API" class="headerlink" title="使用生产者API"></a>使用生产者API</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.KafkaProducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.Producer;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.ProducerRecord;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaProducerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建并写入客户端配置</span></span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//Kafka 集群地址合集</span></span><br><span class="line">        props.put(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;localhost:9092&quot;</span>);</span><br><span class="line">        <span class="comment">//对kafka节点应答的要求，0为不要求应答，1为需要一个节点应答，all为需要全部节点应答</span></span><br><span class="line">        props.put(<span class="string">&quot;acks&quot;</span>, <span class="string">&quot;all&quot;</span>);</span><br><span class="line">        <span class="comment">//发送失败重试次数</span></span><br><span class="line">        props.put(<span class="string">&quot;retries&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">//批处理量，减少请求次数</span></span><br><span class="line">        props.put(<span class="string">&quot;batch.size&quot;</span>, <span class="number">16384</span>);</span><br><span class="line">        <span class="comment">//增加延时，减少请求次数</span></span><br><span class="line">        props.put(<span class="string">&quot;linger.ms&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//Producer可缓存数据的大小</span></span><br><span class="line">        props.put(<span class="string">&quot;buffer.memory&quot;</span>, <span class="number">33554432</span>);</span><br><span class="line">        <span class="comment">//key与value的序列化方式，用于实现Serializer接口</span></span><br><span class="line">        props.put(<span class="string">&quot;key.serializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class="line">        props.put(<span class="string">&quot;value.serializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//根据配置创建producer</span></span><br><span class="line">        Producer&lt;String, String&gt; producer = <span class="keyword">new</span> KafkaProducer&lt;String, String&gt;(props);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//创建并发送record</span></span><br><span class="line">            producer.send(<span class="keyword">new</span> ProducerRecord&lt;String, String&gt;(<span class="string">&quot;my-topic&quot;</span>, Integer.toString(i), Integer.toString(i))); <span class="comment">//topic, key, value</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        producer.close();<span class="comment">//关闭producer</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多线程调用生产者API"><a href="#多线程调用生产者API" class="headerlink" title="多线程调用生产者API"></a>多线程调用生产者API</h4><p>由于Kafka的生产者对象是线程安全的，可以由多个线程调用Kafka生产者对象。</p><p>创建生产线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> kafka.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.KafkaProducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.ProducerRecord;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产者线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> KafkaProducer&lt;String, String&gt; producer = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> ProducerRecord&lt;String, String&gt; record = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProducerThread</span><span class="params">(KafkaProducer&lt;String, String&gt; producer, ProducerRecord&lt;String, String&gt; record)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.producer = producer;</span><br><span class="line">        <span class="keyword">this</span>.record = record;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        producer.send(record, (metadata, e) -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != metadata) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;消息发送成功 ：&quot;</span>+String.format(<span class="string">&quot;offset: %s, partition:%s, topic:%s  timestamp:%s&quot;</span>, metadata.offset(), metadata.partition(), metadata.topic(), metadata.timestamp()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多个线程通过同一个Producer对象发送消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> kafka.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> kafka.OrderMessage;</span><br><span class="line"><span class="keyword">import</span> kafka.partition.PartitionUtil;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.ProducerConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程池生产者</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> tangj</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/7/29 20:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> String topic = <span class="string">&quot;test&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> KafkaProducer&lt;String, String&gt; producer = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 核心池大小</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> corePoolSize = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最大值</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> maximumPoolSize = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无任务时存活时间</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">long</span> keepAliveTime = <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 时间单位</span></span><br><span class="line">    <span class="keyword">static</span> TimeUnit timeUnit = TimeUnit.SECONDS;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 阻塞队列</span></span><br><span class="line">    <span class="keyword">static</span> BlockingQueue blockingQueue = <span class="keyword">new</span> LinkedBlockingQueue();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 线程池</span></span><br><span class="line">    <span class="keyword">static</span> ExecutorService service = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 配置项</span></span><br><span class="line">        properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">&quot;localhost:9092&quot;</span>);</span><br><span class="line">        properties.put(ProducerConfig.PARTITIONER_CLASS_CONFIG, PartitionUtil.class.getName());</span><br><span class="line">        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, <span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class="line">        properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, <span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class="line">        producer = <span class="keyword">new</span> KafkaProducer&lt;&gt;(properties);</span><br><span class="line">        <span class="comment">// 初始化线程池</span></span><br><span class="line">        service = <span class="keyword">new</span> ThreadPoolExecutor(corePoolSize, maximumPoolSize, keepAliveTime, timeUnit, blockingQueue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            service.submit(createMsgTask());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生产消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ProducerThread <span class="title">createMsgTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        OrderMessage orderMessage = <span class="keyword">new</span> OrderMessage();</span><br><span class="line">        orderMessage.setId(UUID.randomUUID().toString());</span><br><span class="line">        <span class="keyword">long</span> timestamp = System.nanoTime();</span><br><span class="line">        orderMessage.setCreateTime(timestamp);</span><br><span class="line">        orderMessage.setRemake(<span class="string">&quot;rem&quot;</span>);</span><br><span class="line">        orderMessage.setsName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        ProducerRecord&lt;String, String&gt; record = <span class="keyword">new</span> ProducerRecord&lt;String, String&gt;(topic, timestamp + <span class="string">&quot;&quot;</span>, orderMessage.toString());</span><br><span class="line">        ProducerThread task = <span class="keyword">new</span> ProducerThread(producer, record);</span><br><span class="line">        <span class="keyword">return</span> task;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="序列化器"><a href="#序列化器" class="headerlink" title="序列化器"></a>序列化器</h2><p>Kafka提供了一些序列化器，可以在<code>org.apache.kafka.common.serialization</code>中找到。</p><p>我们也可通过实现<code>org.apache.kafka.common.serialization.Serializer&lt;T&gt;</code>接口，并重写其中的<code>byte[] serialize(String topic, T data)</code>方法实现自定义序列化器。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><ul><li><a href="https://weread.qq.com/web/reader/bb03287071848770bb0d2c4kc81322c012c81e728d9d180">Kafka并不难学</a></li><li><a href="https://www.cnblogs.com/superfj/p/9440835.html">玩转Kafka的生产者——分区器与多线程</a></li><li><a href="https://blog.csdn.net/sanyaoxu_2/article/details/80754134">Kafka : Kafka入门教程和JAVA客户端使用</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;生产者在业务中实时读取原始数据进行业务逻辑处理，然后调用Kafka的生产者接口将处理后的消息记录写入到Kafa集群中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/kafka-producer-process.png&quot; alt=&quot;kafka-producer-proc
      
    
    </summary>
    
    
      <category term="blog" scheme="http://jiangyixiong.top/categories/blog/"/>
    
    
      <category term="Kafka" scheme="http://jiangyixiong.top/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Hear不同S01E05 猛男落泪不是罪，那些触动我们的光影瞬间</title>
    <link href="http://jiangyixiong.top/2020/09/02/Hear%E4%B8%8D%E5%90%8CS01E05-%E7%8C%9B%E7%94%B7%E8%90%BD%E6%B3%AA%E4%B8%8D%E6%98%AF%E7%BD%AA%EF%BC%8C%E9%82%A3%E4%BA%9B%E8%A7%A6%E5%8A%A8%E6%88%91%E4%BB%AC%E7%9A%84%E5%85%89%E5%BD%B1%E7%9E%AC%E9%97%B4/"/>
    <id>http://jiangyixiong.top/2020/09/02/Hear%E4%B8%8D%E5%90%8CS01E05-%E7%8C%9B%E7%94%B7%E8%90%BD%E6%B3%AA%E4%B8%8D%E6%98%AF%E7%BD%AA%EF%BC%8C%E9%82%A3%E4%BA%9B%E8%A7%A6%E5%8A%A8%E6%88%91%E4%BB%AC%E7%9A%84%E5%85%89%E5%BD%B1%E7%9E%AC%E9%97%B4/</id>
    <published>2020-09-02T02:46:02.000Z</published>
    <updated>2020-09-02T02:50:16.825Z</updated>
    
    <content type="html"><![CDATA[<p>本期节目三位主播各自分享了一部让他们落泪的电影，并稍稍讨论了我们在成长的过程中如何理解男人哭这件事。</p><a id="more"></a><iframe src="https://fireside.fm/player/v2/CSKDZ64u+2kksxfod?theme=dark" width="740" height="200" frameborder="0" scrolling="no"></iframe><p><strong>【本期营业人员】</strong><br>刘轶，<a href="https://www.weibo.com/u/1730354404">@amuro0061</a><br>陈老师，<a href="https://www.weibo.com/u/7475078094">@hearchen33</a><br>小雄，<a href="https://www.weibo.com/u/5628876835">@Gary熊了个熊</a></p><p><strong>【主题讨论】</strong></p><p>00:39 小雄终于回到了他的家乡，吃上了羊肉泡馍<br>02:10 你上一次哭是什么时候，为什么？<br>03:13 陈老师分享让他在同一天里哭了两次的波兰电影《生活如此美好》<br>21:15 小雄分享了韩寒2019年上映的喜剧电影《飞驰人生》，看喜剧哭了…<br>32:14 刘轶分享了威尔史密斯2006年主演的电影《当幸福来敲门》<br>45:44 男生在成长过程中多少都被教育过“不能哭”<br>51:41 男人哭吧不是罪，在亲密关系面前示弱是一种有利健康的行为<br>54:31 有时候我们会主动找一个媒介渲染，让我们哭一下<br>61:04 我们在男孩的成长过程中，如何教育他“哭”这件事</p><p><strong>【节目BGM】</strong></p><p>男人哭吧不是罪 – 《Wonderful World 香港演唱会 2007》 by 刘德华</p><p><strong>【延伸阅读】</strong></p><p>深度解读电影《生命如此美好》<br><a href="https://www.youtube.com/watch?v=TiVQYW6FUFY">https://www.youtube.com/watch?v=TiVQYW6FUFY</a></p><p>杭州小伙被交警拦下后情绪失控、下跪痛哭！网友：心酸……仿佛看到了自己<br><a href="https://zhuanlan.zhihu.com/p/61130942">https://zhuanlan.zhihu.com/p/61130942</a></p><p><strong>【分享环节】</strong><br>没有…我们似乎在本期节目里忘记了这个环节</p><p><strong>【关于我们】</strong></p><p>“Hear不同”是一档凭直觉思维驱动的播客节目，话题多元且随机。我们谈话的目的是为了收获乐趣与自我觉察，无意也无能成为生活方式或社会思潮的引领者，君子和而不同，Hear不同。</p><p><strong>【订阅和rss】</strong></p><p>我们推荐使用泛用性播客客户端订阅我们的RSS进行节目的收听，地址如下：</p><p><a href="https://feeds.fireside.fm/hearbutong/rss">https://feeds.fireside.fm/hearbutong/rss</a></p><p>同时，我们的节目已在各大音频平台上线，包括喜马拉雅fm、荔枝fm、网易云音乐、Google podcast、苹果播客、小宇宙等，您的订阅和反馈是我们持续更新的核动力。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本期节目三位主播各自分享了一部让他们落泪的电影，并稍稍讨论了我们在成长的过程中如何理解男人哭这件事。&lt;/p&gt;
    
    </summary>
    
    
      <category term="podcast" scheme="http://jiangyixiong.top/categories/podcast/"/>
    
    
      <category term="Hear不同" scheme="http://jiangyixiong.top/tags/Hear%E4%B8%8D%E5%90%8C/"/>
    
  </entry>
  
  <entry>
    <title>Kafka基本概念</title>
    <link href="http://jiangyixiong.top/2020/09/02/Kafka%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>http://jiangyixiong.top/2020/09/02/Kafka%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</id>
    <published>2020-09-02T02:33:37.000Z</published>
    <updated>2020-09-02T02:49:19.992Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li>分布式</li><li>发布/订阅模式</li><li>消息队列</li><li>可持久化</li></ul><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h4 id="代理-Broker："><a href="#代理-Broker：" class="headerlink" title="代理 Broker："></a>代理 Broker：</h4><p> 一个Kafka进程（实例）被称作一个代理节点。在分布式集群中，一个服务器上部署一个broker。</p><h4 id="生产者-Producer："><a href="#生产者-Producer：" class="headerlink" title="生产者 Producer："></a>生产者 Producer：</h4><p>Producer将消息记录发送到Kafka集群指定的主题（Topic）中存储。Producer也可通过算法决定将小幅发送到哪个分区（Partition）。</p><h4 id="消费者-Consumer："><a href="#消费者-Consumer：" class="headerlink" title="消费者 Consumer："></a>消费者 Consumer：</h4><p>Consumer 从Kafka集群中指定的Topic读取消息。</p><h4 id="消费者组-Consumer-Group："><a href="#消费者组-Consumer-Group：" class="headerlink" title="消费者组 Consumer Group："></a>消费者组 Consumer Group：</h4><p>一个消费者组可以包括一个或多个消费者。一般而言一个消费者对应一个线程。在设置线程时需遵循“线程数小于等于分区数”。若线程数大于分区数，则多出的线程不会消费数据，造成资源浪费。</p><h4 id="主题-Topic："><a href="#主题-Topic：" class="headerlink" title="主题 Topic："></a>主题 Topic：</h4><p>Kafka消息的逻辑区分方式，用以存储不同业务类型的消息记录。</p><h4 id="分区-Partition："><a href="#分区-Partition：" class="headerlink" title="分区 Partition："></a>分区 Partition：</h4><p>Kafka消息的物理分区，不同分区对应不同数据文件。每个主题可以含有多个分区。Kafka通过分区实现并发读写。分区中的消息记录是有序的，每个消息都会有一个偏移量序号（offset）。一个分区对应一个Broker，一个Broker负责管理多个分区。</p><h4 id="副本-Replication："><a href="#副本-Replication：" class="headerlink" title="副本 Replication："></a>副本 Replication：</h4><p>在Kafka中，每个Topic都会在创建时要求指定副本数，默认为1。副本保证了Kafka的高可用性。</p><h4 id="记录-Record："><a href="#记录-Record：" class="headerlink" title="记录 Record："></a>记录 Record：</h4><p>被实际写入Kafka的可被消费者读取的数据被称为记录。每个记录包含key-value 与 timestamp。</p><blockquote><p><strong>副本系数：</strong></p><p>当集群数&gt;=3, 副本系数可设为3</p><p>若集群数&lt;3, 副本系数可设为集群数量</p></blockquote><h2 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h2><p>核心机制：消费者-生产者</p><p><img src="/images/kafka-process.png" alt="kafka-process"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;分布式&lt;/li&gt;
&lt;li&gt;发布/订阅模式&lt;/li&gt;
&lt;li&gt;消息队列&lt;/li&gt;
&lt;li&gt;可持久化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 
      
    
    </summary>
    
    
      <category term="blog" scheme="http://jiangyixiong.top/categories/blog/"/>
    
    
      <category term="Kafka" scheme="http://jiangyixiong.top/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Nginx常用配置笔记</title>
    <link href="http://jiangyixiong.top/2020/09/02/Nginx%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E7%AC%94%E8%AE%B0/"/>
    <id>http://jiangyixiong.top/2020/09/02/Nginx%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E7%AC%94%E8%AE%B0/</id>
    <published>2020-09-02T02:23:07.000Z</published>
    <updated>2020-09-03T01:55:23.774Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正向代理与反向代理"><a href="#正向代理与反向代理" class="headerlink" title="正向代理与反向代理"></a>正向代理与反向代理</h2><p>正向代理是指客户端通过代理服务器作为跳板，访问不方便直接访问的服务器。就像我们希望购买海外的商品但不方便直接出国或联系国外的商家，我们就可以寻找代购，帮我们带着我们的钱找到海外商家，并带着我们想买的商品回来。在这个过程中，我们需要明确我们想买的商品是什么在哪里，要找的代购是谁。</p><p><img src="/images/forward-proxy.png" alt="forward-proxy"></p><p>反向代理是指反向代理服务器代理原始服务器接收客户端请求并分发到原始服务器。类比到某些贴牌品牌。消费者带着购物需求找到该品牌，品牌商根据该需求从实际的生产厂家拿到商品并返回给消费者。消费者在这个过程中只知道品牌商是谁，并不知道实际的生产厂家是谁在那里，也不知道需求在厂家与商家之间是如何流转的。</p><p><img src="/images/reverse-proxy.png" alt="reverse-proxy"></p><p>Nginx就是这样一个反向代理服务，有着内存占用小，并发能力强的特点。</p><h2 id="Nginx配置文件"><a href="#Nginx配置文件" class="headerlink" title="Nginx配置文件"></a>Nginx配置文件</h2><p>Nginx主配置文件<code>/etc/nginx/nginx.conf</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">### main块开始，此块为全局配置块，会影响其他所有设置 ###</span><br><span class="line"></span><br><span class="line"># user: 指定Nginx worker 进程运行的用户与用户组</span><br><span class="line">user  nginx;</span><br><span class="line"># worker_processes: 指定worker进程的数量</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line"># error_log: 定义全局错误日志文件地址与日志级别</span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line"># pid: 定义进程pid文件的存储位置</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line">### main块结束 ###</span><br><span class="line"></span><br><span class="line">### events块开始 ###</span><br><span class="line">events &#123;</span><br><span class="line">    # worker_connections: Nginx每个进程的最大连接数</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">    # BTW, Nginx 能抗的最大并发 = worker_processes * worker_connections / (2(静态)|4(动态))</span><br><span class="line">&#125;</span><br><span class="line">### events块结束 ###</span><br><span class="line"></span><br><span class="line">### http块开始 ###</span><br><span class="line">http &#123;</span><br><span class="line">    # 文档类型定义文件位置</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    # 当文档类型不在定义中时默认的加载类型</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    # log_format: 定义日志记录格式</span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    # access_log: 输出日志位置与格式</span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    # sendfile参数用于开启高效文件传输模式。将tcp_nopush和tcp_nodelay两个指令设置为on用于防止网络阻塞；</span><br><span class="line">    # 这里还是有点迷惑</span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    # keepalive_timeout: 连接保持时常</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line">    </span><br><span class="line">    # 引入/etc/nginx/conf.d/下的所有配置文件</span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认配置文件 <code>etc/nginx/conf.d/default.conf</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">### server块开始，用于指定主机与端口，继承main块设定 ###</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    listen  [::]:80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #charset koi8-r;</span><br><span class="line">    #access_log  /var/log/nginx/host.access.log  main;</span><br><span class="line"></span><br><span class="line">    ### location块开始，配置网页位置，继承server块设置 ###</span><br><span class="line">    # 定义代理地址: /</span><br><span class="line">    # 此处可使用正则</span><br><span class="line">    location / &#123;</span><br><span class="line">        # 定义要代理到的位置</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">        # 定义index名称</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">    # redirect server error pages to the static page /50x.html</span><br><span class="line">    #</span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">    #</span><br><span class="line">    #location ~ \.php$ &#123;</span><br><span class="line">    #    proxy_pass   http://127.0.0.1;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">    #</span><br><span class="line">    #location ~ \.php$ &#123;</span><br><span class="line">    #    root           html;</span><br><span class="line">    #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">    #    fastcgi_index  index.php;</span><br><span class="line">    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">    #    include        fastcgi_params;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">    # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class="line">    # concurs with nginx&#x27;s one</span><br><span class="line">    #</span><br><span class="line">    #location ~ /\.ht &#123;</span><br><span class="line">    #    deny  all;</span><br><span class="line">    #</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="反向代理配置"><a href="#反向代理配置" class="headerlink" title="反向代理配置"></a>反向代理配置</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">location /index &#123;</span><br><span class="line">       proxy_pass http://jiangyixiong.top:8080/;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">location ^~ /baidu/ &#123;</span><br><span class="line">       proxy_pass https://baidu.com;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   location / &#123;</span><br><span class="line">       proxy_pass http://jiangyixiong.top;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="负载均衡配置"><a href="#负载均衡配置" class="headerlink" title="负载均衡配置"></a>负载均衡配置</h2><p>配置upstream(配置在server块之外)</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream my_server&#123;</span><br><span class="line">    server jiangyixiong.top:8080;</span><br><span class="line">    server jiangyixiong.top:8081;</span><br><span class="line">    server jiangyixiong.top:8082;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置反向代理到该upstream</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    listen  [::]:80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://my_server/;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上配置为轮询，其余还有权重与ip哈希算法。</p><p>权重轮询:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream my_server&#123;</span><br><span class="line">    server jiangyixiong.top:8080 weight=2;</span><br><span class="line">    server jiangyixiong.top:8081 weight=5;</span><br><span class="line">    server jiangyixiong.top:8082 weight=3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动静分离配置"><a href="#动静分离配置" class="headerlink" title="动静分离配置"></a>动静分离配置</h2><p>静态资源需放置于Nginx所在服务器</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    # 静态资源所在目录</span><br><span class="line">    root /usr/share/nginx/html;</span><br><span class="line">    # index文件</span><br><span class="line">    index index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可通过<code>autoindex</code>显示静态资源目录</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    root /usr/share/nginx/data;</span><br><span class="line">    autoindex on;</span><br><span class="line">    #代表展示静态资源的全部内容，以列表的形式展开</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/auto-index.png" alt="auto-index"></p><h2 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h2><blockquote><ul><li><a href="https://blog.csdn.net/m0_49558851/article/details/107786372">《Nginx学习笔记 基于docker》南城.南城</a></li><li><a href="https://www.bilibili.com/video/BV1W54y1z7GM?p=14">《Nginx快速上手》</a></li><li><a href="https://blog.csdn.net/wangbin_0729/article/details/82109693">《Nginx的配置文件详解》古陵云烟</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;正向代理与反向代理&quot;&gt;&lt;a href=&quot;#正向代理与反向代理&quot; class=&quot;headerlink&quot; title=&quot;正向代理与反向代理&quot;&gt;&lt;/a&gt;正向代理与反向代理&lt;/h2&gt;&lt;p&gt;正向代理是指客户端通过代理服务器作为跳板，访问不方便直接访问的服务器。就像我们希望购
      
    
    </summary>
    
    
      <category term="blog" scheme="http://jiangyixiong.top/categories/blog/"/>
    
    
      <category term="Nginx" scheme="http://jiangyixiong.top/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Hear不同 S01E04 吐槽大会：做播客和人生一样难！</title>
    <link href="http://jiangyixiong.top/2020/08/07/Hear%E4%B8%8D%E5%90%8CS01E04%E5%90%90%E6%A7%BD%E5%A4%A7%E4%BC%9A%EF%BC%9A%E5%81%9A%E6%92%AD%E5%AE%A2%E5%92%8C%E4%BA%BA%E7%94%9F%E4%B8%80%E6%A0%B7%E9%9A%BE%EF%BC%81/"/>
    <id>http://jiangyixiong.top/2020/08/07/Hear%E4%B8%8D%E5%90%8CS01E04%E5%90%90%E6%A7%BD%E5%A4%A7%E4%BC%9A%EF%BC%9A%E5%81%9A%E6%92%AD%E5%AE%A2%E5%92%8C%E4%BA%BA%E7%94%9F%E4%B8%80%E6%A0%B7%E9%9A%BE%EF%BC%81/</id>
    <published>2020-08-07T07:50:21.000Z</published>
    <updated>2020-09-02T02:24:29.318Z</updated>
    
    <content type="html"><![CDATA[<p>世界上没有无缘无故的爱，也没有无缘无故的恨。刘轶今天要“吐槽”另外两位搭档，并讨论我们在制作播客过程中的痛并快乐、自我成长和心态变化，三个男人在一起做播客，真是难上加男！</p><a id="more"></a><iframe src="https://fireside.fm/player/v2/CSKDZ64u+raFZZTkV?theme=dark" width="740" height="200" frameborder="0" scrolling="no"></iframe><p><strong>【本期营业人员】</strong><br>刘轶，<a href="https://www.weibo.com/u/1730354404">@amuro0061</a><br>陈老师，<a href="https://www.weibo.com/u/7475078094">@hearchen33</a><br>小雄，<a href="https://www.weibo.com/u/5628876835">@Gary熊了个熊</a></p><p><strong>【主题讨论】</strong></p><p>00:49 欢迎小雄回到祖国的怀抱，但是等我cue你好不好？<br>02:26 陈老师大概傻笑了1分钟<br>05:32 成熟男人的标志是，无论有什么情绪都把安全驾驶放在第一位<br>06:50 做播客比预想的难太多了<br>10:05 “发起人”总是痛并快乐着<br>14:41 每一个微小的鼓励对我们都是很大的激励<br>19:33 直男间的互相嫌弃<br>26:12 播客的选题困难是因为我们自己的能力还不够<br>33:35 我们都是推翻既定话题的小能手<br>38:55 不装逼，【Hear不同】渴望被听到<br>44:17 我们做播客的心态有点像组了一个小乐队<br>47:16 播客是我们的小小有富足精神世界<br>48:43 音频播客真是太小众了<br>50:42 听着自己的播客入睡是我们给自己的徽章</p><p><strong>【节目BGM】</strong></p><p><a href="https://y.qq.com/n/yqq/song/003itfg21R0Hb5.html">谢谢侬 – 《Special Thanks To》</a> by 陈奕迅<br><a href="https://v.youku.com/v_show/id_XNzQzNzgyMjMy.html?spm=a2h0c.8166622.PhoneSokuUgc_11.dtitle">念白台词 – 电影《后会无期》</a> by 钟汉良</p><p><strong>【分享环节】</strong><br>小雄：老牌趣味资讯聚合网站【煎蛋】，日光之下并无新事<br>陈老师：播客节目《BYM》简单心里创始人简里里发起的探讨女性在现代社会中，面对教育职场、亲密关系、家庭等一系列的问题的播客。<br>刘轶：播客节目《不可理论》、《不丧》、《贤者时间》、《随机波动》</p><p><strong>【关于我们】</strong></p><p>“Hear不同”是一档凭直觉思维驱动的播客节目，话题多元且随机。我们谈话的目的是为了收获乐趣与自我觉察，无意也无能成为生活方式或社会思潮的引领者，君子和而不同，Hear不同。</p><p><strong>【订阅和rss】</strong></p><p>我们推荐使用泛用性播客客户端订阅我们的RSS进行节目的收听，地址如下：</p><p><a href="https://feeds.fireside.fm/hearbutong/rss">https://feeds.fireside.fm/hearbutong/rss</a></p><p>同时，我们的节目已在各大音频平台上线，包括喜马拉雅fm、荔枝fm、网易云音乐、Google podcast、苹果播客、小宇宙等，您的订阅和反馈是我们持续更新的核动力。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;世界上没有无缘无故的爱，也没有无缘无故的恨。刘轶今天要“吐槽”另外两位搭档，并讨论我们在制作播客过程中的痛并快乐、自我成长和心态变化，三个男人在一起做播客，真是难上加男！&lt;/p&gt;
    
    </summary>
    
    
      <category term="podcast" scheme="http://jiangyixiong.top/categories/podcast/"/>
    
    
      <category term="Hear不同" scheme="http://jiangyixiong.top/tags/Hear%E4%B8%8D%E5%90%8C/"/>
    
  </entry>
  
  <entry>
    <title>Shiro通过注解实现REST风格API权限管理</title>
    <link href="http://jiangyixiong.top/2020/08/04/Shiro%E9%80%9A%E8%BF%87%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0REST%E9%A3%8E%E6%A0%BCAPI%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
    <id>http://jiangyixiong.top/2020/08/04/Shiro%E9%80%9A%E8%BF%87%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0REST%E9%A3%8E%E6%A0%BCAPI%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</id>
    <published>2020-08-04T07:24:39.000Z</published>
    <updated>2020-09-02T02:24:12.856Z</updated>
    
    <content type="html"><![CDATA[<p>最近在写个自己的springboot的前后端分离小项目，项目使用REST风格的API来进行前后端通信。在API使用权限管理上选择了Shiro。REST风格API的特点之一是同一个地址的不同请求方法会产生不同的效果，也需要不同的权限控制。例如对于<code>/blog/1</code>这个地址，使用<code>GET</code>方法为获取id为1的博客的内容信息，而使用<code>PATCH</code>方法为更新id为1的博客的信息。这时就需要对于<code>GET</code>和<code>PATCH</code>方法设定不同的权限要求。</p><a id="more"></a><h2 id="使用-Shiro-Filter-时遇到的问题"><a href="#使用-Shiro-Filter-时遇到的问题" class="headerlink" title="使用 Shiro Filter 时遇到的问题"></a>使用 Shiro Filter 时遇到的问题</h2><p>在Shiro官方的<a href="https://shiro.apache.org/reference.html">参考文档</a>中，对于Web应用建议使用Shiro提供的<code>HttpMethodPermissionFilter</code>（<code>rest</code>）对特定的请求方法进行权限控制。具体来说，我们可以在为角色添加权限时设定指定资源的指定方法。这些方法会被<code>HttpMethodPermissionFilter</code>对应到各个http请求方法上。例如我们要控制一角色对于blog资源的修改权限，我们可以为该角色添加以下permission：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info.addStringPermission(<span class="string">&quot;blog:edit&quot;</span>);</span><br></pre></td></tr></table></figure><p>其中，blog为指定的资源名称，冒号后为指定的操作方法类型，在Shiro的定义中，edit被对应到了<code>PATCH</code>请求方法上。之后，我们就可以通过<code>HttpMethodPermissionFilter</code>过滤器来限制对于<code>/blog/**</code>地址的权限：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shiroFilterFactoryBean.setFilterChainDefinitions(<span class="string">&quot;/blog/**=rest[blog]&quot;</span>);</span><br></pre></td></tr></table></figure><p>如此设置之后，拥有<code>blog:edit</code>权限的用户可以向该地址发送<code>PATCH</code>请求，拥有<code>blog:create</code>权限的的用户可以向该地址发送<code>POST</code>请求，拥有<code>blog:read</code>方法的用户可以向该地址发送<code>GET</code>请求。具体的请求方法与Shiro定义权限的对应如下：</p><table><thead><tr><th>HTTP Method</th><th>Mapped Action</th><th>Example Permission</th><th>Runtime Check</th></tr></thead><tbody><tr><td>head</td><td>read</td><td>perm1</td><td>perm1:read</td></tr><tr><td>get</td><td>read</td><td>perm2</td><td>perm2:read</td></tr><tr><td>put</td><td>update</td><td>perm3</td><td>perm3:update</td></tr><tr><td>post</td><td>create</td><td>perm4</td><td>perm4:create</td></tr><tr><td>mkcol</td><td>create</td><td>perm5</td><td>perm5:create</td></tr><tr><td>options</td><td>read</td><td>perm6</td><td>perm6:read</td></tr><tr><td>trace</td><td>read</td><td>perm7</td><td>perm7:read</td></tr><tr><td>patch</td><td>edit</td><td>perm8</td><td>perm8:edit</td></tr></tbody></table><p>在我尝试使用这种方法配置filter时，发现了一个问题，有些资源我们希望用户可以匿名发送<code>GET</code>请求，而需要限制只有管理员才能发送<code>POST</code>等其他请用。如果我们使用该<code>HttpMethodPermissionFilter</code>，会对于所有请求方法进行鉴权，<code>GET</code>请求必须要拥有<code>read</code>权限的用户方可发送。由于匿名用户没有角色，无法对其进行授权，其<code>GET</code>请求就会被拦截。</p><p>为了解决这个问题，我们需要写一个自定义的Filter来放行<code>GET</code>方法，仅对其余方法进行权限检查。感觉比较麻烦。在网上查找其他项目的实现时发现Shiro可以基于注解对调用方法进行权限管理（在官方文档里居然没有说，或者是我没有找到），所以想出了一个比较便捷（懒）的实现REST API权限控制的方法</p><h2 id="基于注解的实现"><a href="#基于注解的实现" class="headerlink" title="基于注解的实现"></a>基于注解的实现</h2><p>Shiro提供了以下几个注解来实现方法调用的权限控制：</p><ul><li><code>@RequiresAuthentication</code>仅认证（登录）后的用户可以调用该方法</li><li><code>@RequiresGuest</code> 仅Guest（未认证）用户可以调用该方法，这个注解的作用与<code>@RequiresAuthentication</code>完全相反</li><li><code>@RequireUser</code>仅User可以可以调用，这个注解与<code>@RequiresAuthentication</code>的区别是，它会允许之前认证过，并使用<code>RememberMe</code>功能的用户调用该方法</li><li><code>@RequiresRoles</code>仅拥有指定角色的用户可以调用该方法</li><li><code>@RequiresPermissions</code>仅拥有指定权限的用户可以调用该方法</li></ul><p>调用被注解的方法时没有指定的权限，Shiro会抛出一个<code>AuthorizationException</code>异常</p><p>使用这些注解，配合我们在上一节中对用户的授权，我们就可以在controller中设置每个mapping方法的使用权限啦：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/blog&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlogController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    BlogService bs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里不注解即表示所有人均可调用</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> RestResult&lt;List&lt;Blog&gt;&gt; selectAll()&#123;</span><br><span class="line">        <span class="keyword">return</span> RestResult.success(bs.selectAll());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//同上</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestResult&lt;Blog&gt; <span class="title">selectById</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> RestResult.success(bs.selectByPrimaryKey(id));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//仅拥有blog:create权限的用户可以调用该方法</span></span><br><span class="line">    <span class="meta">@RequiresPermissions(&quot;blog:create&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestResult&lt;Blog&gt; <span class="title">Insert</span><span class="params">(<span class="meta">@RequestParam</span> String title, <span class="meta">@RequestParam</span> String content, <span class="meta">@RequestParam</span> <span class="keyword">int</span> author)</span></span>&#123;</span><br><span class="line">        Blog blog = <span class="keyword">new</span> Blog();</span><br><span class="line">        blog.setTitle(title);</span><br><span class="line">        blog.setContent(content);</span><br><span class="line">        blog.setAuthor(author);</span><br><span class="line">        bs.insert(blog);</span><br><span class="line">        <span class="keyword">return</span> RestResult.success(bs.selectByPrimaryKey(blog.getId()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequiresPermissions(&quot;blog:edit&quot;)</span></span><br><span class="line">    <span class="meta">@PatchMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestResult&lt;Blog&gt; <span class="title">update</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> id,<span class="meta">@RequestParam(required = false)</span> String title, <span class="meta">@RequestParam(required = false)</span> String content, <span class="meta">@RequestParam(required = false)</span> Integer author)</span></span>&#123;</span><br><span class="line">        Blog blog = <span class="keyword">new</span> Blog();</span><br><span class="line">        blog.setId(id);</span><br><span class="line">        blog.setTitle(title);</span><br><span class="line">        blog.setContent(content);</span><br><span class="line">        blog.setAuthor(author);</span><br><span class="line">        bs.updateByPrimaryKeySelective(blog);</span><br><span class="line">        <span class="keyword">return</span> RestResult.success(bs.selectByPrimaryKey(blog.getId()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequiresPermissions(&quot;blog:delete&quot;)</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestResult&lt;Blog&gt; <span class="title">delete</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        Blog blog = bs.selectByPrimaryKey(id);</span><br><span class="line">        bs.deleteByPrimaryKey(id);</span><br><span class="line">        <span class="keyword">return</span> RestResult.success(blog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后别忘了通过springboot对异常进行捕获并返回适当的结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerExceptionHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(AuthorizationException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestResult&lt;Object&gt; <span class="title">handleAuthorizationException</span><span class="params">(AuthorizationException e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> RestResult.fail(<span class="number">403</span>,<span class="string">&#x27;没有权限&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在写个自己的springboot的前后端分离小项目，项目使用REST风格的API来进行前后端通信。在API使用权限管理上选择了Shiro。REST风格API的特点之一是同一个地址的不同请求方法会产生不同的效果，也需要不同的权限控制。例如对于&lt;code&gt;/blog/1&lt;/code&gt;这个地址，使用&lt;code&gt;GET&lt;/code&gt;方法为获取id为1的博客的内容信息，而使用&lt;code&gt;PATCH&lt;/code&gt;方法为更新id为1的博客的信息。这时就需要对于&lt;code&gt;GET&lt;/code&gt;和&lt;code&gt;PATCH&lt;/code&gt;方法设定不同的权限要求。&lt;/p&gt;
    
    </summary>
    
    
      <category term="blog" scheme="http://jiangyixiong.top/categories/blog/"/>
    
    
      <category term="Shiro" scheme="http://jiangyixiong.top/tags/Shiro/"/>
    
  </entry>
  
  <entry>
    <title>Shiro使用之自定义realm</title>
    <link href="http://jiangyixiong.top/2020/08/03/Shiro%E4%BD%BF%E7%94%A8%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89realm/"/>
    <id>http://jiangyixiong.top/2020/08/03/Shiro%E4%BD%BF%E7%94%A8%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89realm/</id>
    <published>2020-08-03T07:09:52.000Z</published>
    <updated>2020-09-02T02:24:07.839Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Realm"><a href="#什么是Realm" class="headerlink" title="什么是Realm"></a>什么是Realm</h2><p>Realm直译为王国或领地，再Shiro中，realm负责链接认证授权服务与其所使用的数据源。</p><p>如果说Shiro是小区保安，负责筛查所有进出小区的车辆，realm就是保安手上的住户名单，负责记录每个用户的信息，包含<code>Principals</code>（用户识别信息，通常是用户名或邮箱手机号），<code>Credentials</code>（用户证明信息，通常就是密码），和<code>Authorization</code>（用户身份）。</p><a id="more"></a><h2 id="如何自定义Realm"><a href="#如何自定义Realm" class="headerlink" title="如何自定义Realm"></a>如何自定义Realm</h2><p>Shiro提供了很多Realm实现，其中常用的有<code>IniRealm</code>，<code>PropertiesRealm</code>，<code>JdbcRealm</code>。通常在项目中用户信息是存储于数据库中，对应可使用<code>JdbcRealm</code>。但<code>JdbcRealm</code>的使用中需要我们定义身份与用户信息的查询语句，这些内容通常是我们在实现DAO和Service层时就已经做过的。加上有事在获取用户信息的过程中会有一些特殊的业务逻辑，我们通常会通过继承<code>AuthorizingRealm</code>来实现自定义Realm。</p><p><code>AuthorizingRealm</code>是一个抽象类，提供了<code>doGetAuthorizationInfo</code>抽象方法，同时通过继承<code>AuthenticatingRealm</code>提供<code>doGetAuthenticationInfo</code>。我们在继承<code>AuthorizingRealm</code>时需要实现这两个抽象方法。</p><p><code>doGetAuthenticationInfo</code>方法用于获取系统存储的用户认证信息，它接收一个用户的Token，返回该用户的认证信息<code>AuthenticationInfo</code>。</p><p><code>doGetAuthorizationInfo</code>方法用于获取系统所存储的用户身份信息，即用户角色，它接收用户的Principals信息，返回用户的身份信息<code>AuthorizationInfo</code>。</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注入用户Service</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    AdminUserService aus;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现doGetAuthorizationInfo方法，通过用户principals获取用户身份并返回</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//由于用户可以有多个Principals这里需要获取到用户的主要Principal</span></span><br><span class="line">        String principal = (String) principalCollection.getPrimaryPrincipal();</span><br><span class="line">        <span class="comment">//通过用户Service获取用户domain对象，本例中用户principal为email</span></span><br><span class="line">        AdminUser au = aus.selectByEmail(principal);</span><br><span class="line">        <span class="comment">//如用户不存在则直接返回null</span></span><br><span class="line">        <span class="keyword">if</span>(au==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//用户可以有多个身份，存放于一个Set中</span></span><br><span class="line">        Set&lt;String&gt; authSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        authSet.add(au.getAuth());</span><br><span class="line">        <span class="comment">//通过Set创建用户身份信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthorizationInfo(authSet);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现AuthenticationInfo方法，通过用户principal信息获取用户认证信息并返回</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="comment">//从登录Token中取得用户的Principal</span></span><br><span class="line">        String principal = (String) authenticationToken.getPrincipal();</span><br><span class="line">        <span class="comment">//通过Principal从用户Service中获取用户domain对象</span></span><br><span class="line">        AdminUser au = aus.selectByEmail(principal);</span><br><span class="line">        <span class="comment">//如用户不存在则直接返回null</span></span><br><span class="line">        <span class="keyword">if</span>(au==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建用户认证信息并返回，这里使用SimpleAuthenticationInfo实现，SimpleAuthenticationInfo提供了多种构造方式。</span></span><br><span class="line">        <span class="comment">//这里使用的是hash+salt加密的认证信息构造方法 SimpleAuthenticationInfo(Object principal, Object hashedCredentials, ByteSource credentialsSalt, String realmName)</span></span><br><span class="line">        <span class="comment">//若不使用hash加密，则可直接使用 SimpleAuthenticationInfo(Object principal, Object credentials, String realmName)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(au.getEmail(),au.getPassword(), ByteSource.Util.bytes(au.getSalt()),<span class="keyword">this</span>.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是Realm&quot;&gt;&lt;a href=&quot;#什么是Realm&quot; class=&quot;headerlink&quot; title=&quot;什么是Realm&quot;&gt;&lt;/a&gt;什么是Realm&lt;/h2&gt;&lt;p&gt;Realm直译为王国或领地，再Shiro中，realm负责链接认证授权服务与其所使用的数据源。&lt;/p&gt;
&lt;p&gt;如果说Shiro是小区保安，负责筛查所有进出小区的车辆，realm就是保安手上的住户名单，负责记录每个用户的信息，包含&lt;code&gt;Principals&lt;/code&gt;（用户识别信息，通常是用户名或邮箱手机号），&lt;code&gt;Credentials&lt;/code&gt;（用户证明信息，通常就是密码），和&lt;code&gt;Authorization&lt;/code&gt;（用户身份）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="blog" scheme="http://jiangyixiong.top/categories/blog/"/>
    
    
      <category term="Shiro" scheme="http://jiangyixiong.top/tags/Shiro/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode笔记 输出将k个无差别礼物分配给n个小朋友的所有分法（python实现）</title>
    <link href="http://jiangyixiong.top/2020/08/01/%E8%BE%93%E5%87%BA%E5%B0%86k%E4%B8%AA%E6%97%A0%E5%B7%AE%E5%88%AB%E7%A4%BC%E7%89%A9%E5%88%86%E9%85%8D%E7%BB%99n%E4%B8%AA%E5%B0%8F%E6%9C%8B%E5%8F%8B%E7%9A%84%E6%89%80%E6%9C%89%E5%88%86%E6%B3%95%EF%BC%88python%E5%AE%9E%E7%8E%B0%EF%BC%89/"/>
    <id>http://jiangyixiong.top/2020/08/01/%E8%BE%93%E5%87%BA%E5%B0%86k%E4%B8%AA%E6%97%A0%E5%B7%AE%E5%88%AB%E7%A4%BC%E7%89%A9%E5%88%86%E9%85%8D%E7%BB%99n%E4%B8%AA%E5%B0%8F%E6%9C%8B%E5%8F%8B%E7%9A%84%E6%89%80%E6%9C%89%E5%88%86%E6%B3%95%EF%BC%88python%E5%AE%9E%E7%8E%B0%EF%BC%89/</id>
    <published>2020-08-01T00:38:56.000Z</published>
    <updated>2020-09-19T07:15:28.333Z</updated>
    
    <content type="html"><![CDATA[<p>我的算法思路为遍历所有可能性，感觉有点蠢</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#为小朋友分配礼物</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">distribute</span>(<span class="params">giftNum,childNum</span>):</span></span><br><span class="line">        children = [[[<span class="number">0</span>]*childNum]]</span><br><span class="line">        <span class="comment"># children[n]为小朋友们分n个礼物的所有可能分法</span></span><br><span class="line">        <span class="comment"># 如childNum为2时，children[1]=[[1,0],[0,1]]</span></span><br><span class="line">        <span class="comment"># 上一行代码初始化了小朋友们分0个礼物是的情况</span></span><br><span class="line">        <span class="keyword">for</span> times <span class="keyword">in</span> range(<span class="number">1</span>,giftNum+<span class="number">1</span>):</span><br><span class="line">                children.append([])</span><br><span class="line">                <span class="comment"># 增加一行用以记录增加一个礼物时的情况</span></span><br><span class="line">                <span class="keyword">for</span> prob <span class="keyword">in</span> range(len(children[times<span class="number">-1</span>])):</span><br><span class="line">                <span class="comment"># 遍历少一个礼物时的每一种情况</span></span><br><span class="line">                <span class="comment"># 对于每一种情况，增加一个礼物时会可能出现childNum种新情况</span></span><br><span class="line">                        <span class="keyword">for</span> tarChild <span class="keyword">in</span> range(childNum):</span><br><span class="line">                        <span class="comment"># 遍历增加一个礼物后的每一种情况,即该礼物分到各个小朋友手中时产生的情况</span></span><br><span class="line">                                child = children[times<span class="number">-1</span>][prob].copy()</span><br><span class="line">                                child[tarChild] += <span class="number">1</span></span><br><span class="line">                                <span class="comment"># 优化速度注释掉如下&#123;</span></span><br><span class="line">                                <span class="comment"># same = False</span></span><br><span class="line">                                <span class="comment"># for i in children[times]:</span></span><br><span class="line">                                <span class="comment">#         if child == i:</span></span><br><span class="line">                                <span class="comment">#                 same = True</span></span><br><span class="line">                                <span class="comment"># &#125;</span></span><br><span class="line">                                <span class="keyword">if</span> children[times].count(child) == <span class="number">0</span>:</span><br><span class="line">                                <span class="comment"># 判断该情况是否与之前情况有重合</span></span><br><span class="line">                                        children[times].append(child)</span><br><span class="line">        <span class="keyword">return</span> children[giftNum]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    inputLine = sys.stdin.readline().strip().split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">    inputLine = [int(str) <span class="keyword">for</span> str <span class="keyword">in</span> inputLine]</span><br><span class="line">    n = inputLine[<span class="number">0</span>]</span><br><span class="line">    k = inputLine[<span class="number">1</span>]</span><br><span class="line">    distribution = distribute(n,k)</span><br><span class="line">    print(len(distribution))</span><br><span class="line">    <span class="keyword">for</span> prob <span class="keyword">in</span> distribution:</span><br><span class="line">                count = <span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> prob:</span><br><span class="line">                        print(<span class="string">&quot;*&quot;</span>*i,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                        count = count+<span class="number">1</span></span><br><span class="line">                        <span class="keyword">if</span> count &lt; k:</span><br><span class="line">                                print(<span class="string">&quot;|&quot;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                print()</span><br><span class="line">        </span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我的算法思路为遍历所有可能性，感觉有点蠢&lt;/p&gt;
    
    </summary>
    
    
      <category term="blog" scheme="http://jiangyixiong.top/categories/blog/"/>
    
    
      <category term="Algorithm" scheme="http://jiangyixiong.top/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Hear不同 S01E03 《隐秘的角落》和解读一切的时代</title>
    <link href="http://jiangyixiong.top/2020/07/29/Hear%E4%B8%8D%E5%90%8CS01E03%E3%80%8A%E9%9A%90%E7%A7%98%E7%9A%84%E8%A7%92%E8%90%BD%E3%80%8B%E5%92%8C%E8%A7%A3%E8%AF%BB%E4%B8%80%E5%88%87%E7%9A%84%E6%97%B6%E4%BB%A3/"/>
    <id>http://jiangyixiong.top/2020/07/29/Hear%E4%B8%8D%E5%90%8CS01E03%E3%80%8A%E9%9A%90%E7%A7%98%E7%9A%84%E8%A7%92%E8%90%BD%E3%80%8B%E5%92%8C%E8%A7%A3%E8%AF%BB%E4%B8%80%E5%88%87%E7%9A%84%E6%97%B6%E4%BB%A3/</id>
    <published>2020-07-29T00:43:57.000Z</published>
    <updated>2020-09-02T02:24:25.967Z</updated>
    
    <content type="html"><![CDATA[<p>最近三位主播陆续看完了爆款出圈网剧《隐秘的角落》，正剧之外，都不约而同得去看了一些解读，由此意识到我们正处于解读一切的时代，于是我们以此作为话题进行了讨论。在节目开始的2分钟，刘轶抑制不住作为曼联球迷重回下赛季欧冠的喜悦，语无伦次了一会儿，请见谅。</p><a id="more"></a><iframe src="https://fireside.fm/player/v2/CSKDZ64u+5VtTqdqS?theme=dark" width="740" height="200" frameborder="0" scrolling="no"></iframe><p><strong>【本期营业人员】</strong></p><p>刘轶，<a href="https://www.weibo.com/u/1730354404">@amuro0061</a><br>陈老师，<a href="https://www.weibo.com/u/7475078094">@hearchen33</a><br>小雄，<a href="https://www.weibo.com/u/5628876835">@Gary熊了个熊</a></p><p><strong>【主题讨论】</strong></p><p>00:29 2019-2020英超联赛收官，曼联位列第3重回下赛季欧冠<br>03:00 《隐秘的角落》大热出圈引起了正剧之外方方面面的解读，更有程序员通过人工智能AI解读唇形<br>11:39 通过《隐秘的角落》让我们意识到，我们似乎处在【解读一切】的时代<br>13:21 越来越多的人在成为信息的生产者，成为解读者的门槛在变低，障碍在变少<br>16:20 独立思考和消化别人解读的成果，这两个行为是矛盾的吗<br>20:33 作为没有艺术相关知识的门外汉，解读是启发我们独立思考的前提<br>24:11 我们似乎已经习惯在解读里找到一种意识的认同<br>31:10 知识爆炸的时代，我们都需要浓缩的解读，就是所谓的“干货”<br>34:47 获得“干货“的过程比结果更重要，因为水分是你自己挤掉的<br>40:41 看了别人解读的结果很容易变成拾人牙慧的尴尬<br>45:32 曾经解读世界的权利只掌握在教会的手里，如今解读一切的时代是文明进步的产物<br>49:40 《隐秘的角落》是国产电视剧一次巨大的进步</p><p><strong>【节目BGM】</strong></p><p>Glory Glory Man United – 《Come On You Reds 99》<br>Streamers – 《Destroyed》 by Wave Racer</p><p><strong>【分享环节】</strong><br>小雄：玩游戏不再强迫自己体验所有支线<br>陈老师：没有分享和推荐，猜测是因为颈椎病有所改善<br>刘轶：《这！就是街舞》第三季，对张艺兴路转粉～</p><p><strong>【延伸阅读】</strong></p><p>程序员通过人工智能技术解析《隐秘的角落》：<br><a href="https://sspai.com/post/61269">https://sspai.com/post/61269</a></p><p>B站及油管视频up主【大聪看电影】，异形系列解读第一期《四万字解读普罗米修斯》：<br><a href="https://www.bilibili.com/video/BV1Rz4y1R7fT?from=search&amp;seid=4252473860033650144">https://www.bilibili.com/video/BV1Rz4y1R7fT?from=search&amp;seid=4252473860033650144</a></p><p>《这！就是街舞》第三季02，最终毛巾争夺战队长Battle：<br><a href="https://v.youku.com/v_show/id_XNDczNDc5MjU0MA==.html?s=adee048d2edc41949017&amp;scm=20140719.rcmd.15319.show_adee048d2edc41949017">https://v.youku.com/v_show/id_XNDczNDc5MjU0MA==.html?s=adee048d2edc41949017&amp;scm=20140719.rcmd.15319.show_adee048d2edc41949017</a></p><p>2019上映的电影《阳光普照》：<br><a href="https://www.bilibili.com/video/BV1mJ411T771?from=search&amp;seid=9693875576536071804">https://www.bilibili.com/video/BV1mJ411T771?from=search&amp;seid=9693875576536071804</a> </p><p><strong>【关于我们】</strong></p><p>“Hear不同”是一档凭直觉思维驱动的播客节目，话题多元且随机。我们谈话的目的是为了收获乐趣与自我觉察，无意也无能成为生活方式或社会思潮的引领者，君子和而不同，Hear不同。</p><p><strong>【订阅和rss】</strong></p><p>我们推荐使用泛用性播客客户端订阅我们的RSS进行节目的收听，地址如下：</p><p><a href="https://feeds.fireside.fm/hearbutong/rss">https://feeds.fireside.fm/hearbutong/rss</a></p><p>同时，我们的节目已在各大音频平台上线，包括喜马拉雅fm、荔枝fm、网易云音乐、Google podcast、苹果播客、小宇宙等，您的订阅和反馈是我们持续更新的核动力。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近三位主播陆续看完了爆款出圈网剧《隐秘的角落》，正剧之外，都不约而同得去看了一些解读，由此意识到我们正处于解读一切的时代，于是我们以此作为话题进行了讨论。在节目开始的2分钟，刘轶抑制不住作为曼联球迷重回下赛季欧冠的喜悦，语无伦次了一会儿，请见谅。&lt;/p&gt;
    
    </summary>
    
    
      <category term="podcast" scheme="http://jiangyixiong.top/categories/podcast/"/>
    
    
      <category term="Hear不同" scheme="http://jiangyixiong.top/tags/Hear%E4%B8%8D%E5%90%8C/"/>
    
  </entry>
  
  <entry>
    <title>Hear不同 S01E02 入睡困难和刷不完的迷惑标题</title>
    <link href="http://jiangyixiong.top/2020/07/15/Hear%E4%B8%8D%E5%90%8CS01E02%E5%85%A5%E7%9D%A1%E5%9B%B0%E9%9A%BE%E5%92%8C%E5%88%B7%E4%B8%8D%E5%AE%8C%E7%9A%84%E8%BF%B7%E6%83%91%E6%A0%87%E9%A2%98/"/>
    <id>http://jiangyixiong.top/2020/07/15/Hear%E4%B8%8D%E5%90%8CS01E02%E5%85%A5%E7%9D%A1%E5%9B%B0%E9%9A%BE%E5%92%8C%E5%88%B7%E4%B8%8D%E5%AE%8C%E7%9A%84%E8%BF%B7%E6%83%91%E6%A0%87%E9%A2%98/</id>
    <published>2020-07-15T00:41:01.000Z</published>
    <updated>2020-09-02T02:24:21.345Z</updated>
    
    <content type="html"><![CDATA[<iframe src="https://fireside.fm/player/v2/CSKDZ64u+XVgpma-V?theme=dark" width="740" height="200" frameborder="0" scrolling="no"></iframe><p><strong>【开场BGM】</strong><br><a href="https://music.163.com/#/song?id=457761714">Griffin Oskar - Bullet Proof</a></p><p><strong>【本期营业人员】</strong><br>刘轶，<a href="https://www.weibo.com/u/1730354404">@amuro0061</a><br>陈老师，<a href="https://www.weibo.com/u/7475078094">@hearchen33</a><br>小雄，<a href="https://www.weibo.com/u/5628876835">@Gary熊了个熊</a></p><p><strong>【主题讨论】</strong><br>00:50 入睡困难时尝试了这些办法<br>01:50 沙雕新闻的标题吸引了我<br>06:00 我就想看看你们写了什么<br>08:40 欢迎给我们发律师信<br>12:10 标题党的写作公式<br>16:00 东方的克苏鲁在中国的社会新闻里<br>18:56 严肃媒体的标题讨论<br>26:00 标题真的很难写啊！我们第一期的标题被反馈不知所云<br>32:30 三段式的标题大概要长期陪伴我们了<br>35:42 沙雕新闻的标题本质上是个谜语的谜面<br>37:24 面对强烈的不安，我们会逃走，但如果不安相对较弱，则会唤起我们的好奇心</p><p><strong>【本期节目三段式的标题】</strong><br>《入睡困难？进来学习99%的人都不知道的入睡技巧，听众：一觉到天亮。》</p><p><strong>【分享环节】</strong><br>小雄：Windows端RSS订阅聚合阅读工具<br>陈老师：改善颈椎病好物第二弹<br>刘轶：不吝啬点赞</p><p><strong>【关于我们】</strong><br>“Hear不同”是一档凭直觉思维驱动的播客节目，话题多元且随机。我们谈话的目的是为了收获乐趣与自我觉察，无意也无能成为生活方式或社会思潮的引领者，君子和而不同，Hear不同。</p><p><strong>【订阅和rss】</strong><br>我们推荐使用泛用性播客客户端订阅我们的RSS进行节目的收听，地址如下：</p><p><a href="https://feeds.fireside.fm/hearbutong/rss">https://feeds.fireside.fm/hearbutong/rss</a></p><p>同时，我们的节目已在各大音频平台上线，包括喜马拉雅fm、荔枝fm、网易云音乐、Google podcast、苹果播客、小宇宙等，期待您的反馈和好评。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe src=&quot;https://fireside.fm/player/v2/CSKDZ64u+XVgpma-V?theme=dark&quot; width=&quot;740&quot; height=&quot;200&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;


      
    
    </summary>
    
    
      <category term="podcast" scheme="http://jiangyixiong.top/categories/podcast/"/>
    
    
      <category term="Hear不同" scheme="http://jiangyixiong.top/tags/Hear%E4%B8%8D%E5%90%8C/"/>
    
  </entry>
  
  <entry>
    <title>Hear不同 S01E01 “拍一拍”和情绪化表达</title>
    <link href="http://jiangyixiong.top/2020/07/02/Hear%E4%B8%8D%E5%90%8CS01E01%20%E2%80%9C%E6%8B%8D%E4%B8%80%E6%8B%8D%E2%80%9D%E5%92%8C%E6%83%85%E7%BB%AA%E5%8C%96%E8%A1%A8%E8%BE%BE/"/>
    <id>http://jiangyixiong.top/2020/07/02/Hear%E4%B8%8D%E5%90%8CS01E01%20%E2%80%9C%E6%8B%8D%E4%B8%80%E6%8B%8D%E2%80%9D%E5%92%8C%E6%83%85%E7%BB%AA%E5%8C%96%E8%A1%A8%E8%BE%BE/</id>
    <published>2020-07-02T00:34:51.000Z</published>
    <updated>2020-09-02T02:24:18.382Z</updated>
    
    <content type="html"><![CDATA[<p>我们在2020年上半年的最后一天录制了“Hear不同”的第一期节目，感谢所有听完的朋友们，节目还很生涩，谢谢你们的包容。</p><a id="more"></a><iframe src="https://fireside.fm/player/v2/CSKDZ64u+cA2BLPDY?theme=dark" width="740" height="200" frameborder="0" scrolling="no"></iframe><p><strong>本期营业人员：</strong><br>刘轶，<a href="https://www.weibo.com/u/1730354404">@amuro0061</a><br>陈老师，<a href="https://www.weibo.com/u/7475078094">@hearchen33</a><br>小雄，<a href="https://www.weibo.com/u/5628876835">@Gary熊了个熊</a></p><p><strong>“你最近过得怎么样”分享环节：</strong><br>陈老师分享了他的颈椎病、显示器支架和学校的一些“刻板印象”<br>小雄分享了微信读书app的使用感受，提到了大热网剧《隐秘的角落》（无剧透）<br>刘轶分享了购买adobe audition的经历</p><p><strong>讨论环节：</strong><br>34:44 从微信“拍一拍”聊到情绪化表达</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在2020年上半年的最后一天录制了“Hear不同”的第一期节目，感谢所有听完的朋友们，节目还很生涩，谢谢你们的包容。&lt;/p&gt;
    
    </summary>
    
    
      <category term="podcast" scheme="http://jiangyixiong.top/categories/podcast/"/>
    
    
      <category term="Hear不同" scheme="http://jiangyixiong.top/tags/Hear%E4%B8%8D%E5%90%8C/"/>
    
  </entry>
  
  <entry>
    <title>递归算法简单实现列表全排列（Python为例）</title>
    <link href="http://jiangyixiong.top/2020/06/01/%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E5%88%97%E8%A1%A8%E5%85%A8%E6%8E%92%E5%88%97%EF%BC%88Python%E4%B8%BA%E4%BE%8B%EF%BC%89/"/>
    <id>http://jiangyixiong.top/2020/06/01/%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E5%88%97%E8%A1%A8%E5%85%A8%E6%8E%92%E5%88%97%EF%BC%88Python%E4%B8%BA%E4%BE%8B%EF%BC%89/</id>
    <published>2020-06-01T00:24:34.000Z</published>
    <updated>2020-09-02T02:33:50.520Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算法说明"><a href="#算法说明" class="headerlink" title="算法说明"></a>算法说明</h2><h4 id="目的："><a href="#目的：" class="headerlink" title="目的："></a>目的：</h4><p>输出给定列表array的全部排列</p><a id="more"></a><h4 id="算法步骤："><a href="#算法步骤：" class="headerlink" title="算法步骤："></a>算法步骤：</h4><ol><li>利用递归思想将n阶问题化简为n-1阶问题</li><li>面对列表[1,2,3]，我们通常写出全排列的方法为：写出以1为开头的排列[1,2,3],[1,3,2]，再写出以2为开头的排列[2,1,3],[2,3,1]依次类推</li><li>故我们在面对3元素的列表时，我们是轮流取出元素作为头，之后将其余两个元素全排列后放在第一个元素后</li><li>所以我们可以知道全排列[x1,x2,x3,…,xn]时，我们会以x1作为头部，在其后加上其余元素即[x2,x3,…,xn]的全排列；再以x2作为头部，在其后加上[x1,x3,…,xn]的全排列；直到以xn作为头部，在其后加上[x1,x2,…,xn-1]的全排列</li><li>同时设定基线条件：当列表仅有一个元素时，仅有一种排列</li></ol><h4 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">arrange</span>(<span class="params">array</span>):</span><span class="comment">#全排列数组-通过递归</span></span><br><span class="line">    output = []</span><br><span class="line">    <span class="keyword">if</span> len(array) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> [array]<span class="comment">#当数组只有一个元素时直接返回该数组</span></span><br><span class="line">    <span class="keyword">else</span>:<span class="comment">#对于多个元素的数组，全排列相当于以不同的元素首，并将其余元素分全排列</span></span><br><span class="line">        <span class="comment"># 例如全排列[1,2,3]，相当于以1为头部排列[2,3]，以2为头部排列[1,3]，以3为头部排列[1,2]</span></span><br><span class="line">        <span class="comment"># 所以全排列为[1]+arrange([2,3]),[2]+arrange([1,3]),[3]+arrange([1,2])</span></span><br><span class="line">        <span class="comment"># 推广至n个元素的数列</span></span><br><span class="line">        <span class="comment"># arrange([x1,x2,...,xn])为[x1]+arrange([x2,x3,...,xn]),[x2]+arrange([x1,x3,...,xn]),...,[xn]+arrange([x1,x2,...,xn-1])</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> array:</span><br><span class="line">            subArr = array.copy()</span><br><span class="line">            subArr.remove(i)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> arrange(subArr):</span><br><span class="line">                newArr = [i]+j</span><br><span class="line">                output.append(newArr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;算法说明&quot;&gt;&lt;a href=&quot;#算法说明&quot; class=&quot;headerlink&quot; title=&quot;算法说明&quot;&gt;&lt;/a&gt;算法说明&lt;/h2&gt;&lt;h4 id=&quot;目的：&quot;&gt;&lt;a href=&quot;#目的：&quot; class=&quot;headerlink&quot; title=&quot;目的：&quot;&gt;&lt;/a&gt;目的：&lt;/h4&gt;&lt;p&gt;输出给定列表array的全部排列&lt;/p&gt;
    
    </summary>
    
    
      <category term="blog" scheme="http://jiangyixiong.top/categories/blog/"/>
    
    
      <category term="Algorithm" scheme="http://jiangyixiong.top/tags/Algorithm/"/>
    
  </entry>
  
</feed>
